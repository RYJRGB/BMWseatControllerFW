
BMWseatController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008ac8  08008ac8  00018ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b98  08008b98  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba0  08008ba0  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba0  08008ba0  00018ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ba4  08008ba4  00018ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  20000160  08008d08  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e7c  08008d08  00021e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d98  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003132  00000000  00000000  00034f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  00038060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  000390c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005497  00000000  00000000  0003a000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e94  00000000  00000000  0003f497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5ab  00000000  00000000  0005532b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e18d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000480c  00000000  00000000  000e1928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ab0 	.word	0x08008ab0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08008ab0 	.word	0x08008ab0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LIN_Ping_And_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LIN_Ping_And_Print(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
    uint8_t tx[2] = { 0x55, 0xC1 };   // SYNC + PID for ID 0x01
 800058a:	f24c 1355 	movw	r3, #49493	; 0xc155
 800058e:	833b      	strh	r3, [r7, #24]

    // Optional but recommended: keep RX off during header to avoid echo/junk
    CLEAR_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8000590:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	68da      	ldr	r2, [r3, #12]
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f022 0204 	bic.w	r2, r2, #4
 800059e:	60da      	str	r2, [r3, #12]

    HAL_LIN_SendBreak(&huart2);
 80005a0:	482b      	ldr	r0, [pc, #172]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005a2:	f003 f98c 	bl	80038be <HAL_LIN_SendBreak>
    HAL_UART_Transmit(&huart2, tx, 2, 20);   // <-- length = 2 (not 3)
 80005a6:	f107 0118 	add.w	r1, r7, #24
 80005aa:	2314      	movs	r3, #20
 80005ac:	2202      	movs	r2, #2
 80005ae:	4828      	ldr	r0, [pc, #160]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005b0:	f003 f851 	bl	8003656 <HAL_UART_Transmit>

    // Flush BREAK artifacts so first slave byte isn't lost
    __HAL_UART_CLEAR_FEFLAG(&huart2);
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b25      	ldr	r3, [pc, #148]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UART_CLEAR_NEFLAG(&huart2);
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
    __HAL_UART_CLEAR_OREFLAG(&huart2);
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]
#if defined(USART_RDR_RDR) || defined(USART_ISR_RXNE)
    (void)huart2.Instance->ISR; (void)huart2.Instance->RDR;
#else
    (void)huart2.Instance->SR;  (void)huart2.Instance->DR;
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	685b      	ldr	r3, [r3, #4]
#endif
    huart2.ErrorCode = HAL_UART_ERROR_NONE;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 8000604:	2200      	movs	r2, #0
 8000606:	641a      	str	r2, [r3, #64]	; 0x40

    // Re-enable RX to catch the response
    SET_BIT(huart2.Instance->CR1, USART_CR1_RE);
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f042 0204 	orr.w	r2, r2, #4
 8000616:	60da      	str	r2, [r3, #12]

    uint8_t rx[9];
    int n = lin_receive_response(&huart2, rx, sizeof(rx), 80); // try 50–100 ms first
 8000618:	f107 010c 	add.w	r1, r7, #12
 800061c:	2350      	movs	r3, #80	; 0x50
 800061e:	2209      	movs	r2, #9
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LIN_Ping_And_Print+0xcc>)
 8000622:	f000 f81b 	bl	800065c <lin_receive_response>
 8000626:	61f8      	str	r0, [r7, #28]
    if (n <= 0) {
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b00      	cmp	r3, #0
 800062c:	dc04      	bgt.n	8000638 <LIN_Ping_And_Print+0xb4>
        CDC_Transmit_FS((uint8_t*)"LIN: no response\r\n", 18);
 800062e:	2112      	movs	r1, #18
 8000630:	4808      	ldr	r0, [pc, #32]	; (8000654 <LIN_Ping_And_Print+0xd0>)
 8000632:	f007 f937 	bl	80078a4 <CDC_Transmit_FS>
    } else {
        cdc_print_hex("LIN ID 0x01 -> ", rx, n);
    }
}
 8000636:	e006      	b.n	8000646 <LIN_Ping_And_Print+0xc2>
        cdc_print_hex("LIN ID 0x01 -> ", rx, n);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	4619      	mov	r1, r3
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <LIN_Ping_And_Print+0xd4>)
 8000642:	f000 f83d 	bl	80006c0 <cdc_print_hex>
}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000214 	.word	0x20000214
 8000654:	08008ac8 	.word	0x08008ac8
 8000658:	08008adc 	.word	0x08008adc

0800065c <lin_receive_response>:
}


// Read up to max_len bytes until timeout (slave data + checksum)
static int lin_receive_response(UART_HandleTypeDef *huart, uint8_t *buf, int max_len, uint32_t timeout_ms)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
 8000668:	603b      	str	r3, [r7, #0]
    // Simple blocking read; for production, use DMA + IDLE detection
    int n = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
    uint32_t t0 = HAL_GetTick();
 800066e:	f000 fc45 	bl	8000efc <HAL_GetTick>
 8000672:	6138      	str	r0, [r7, #16]
    while (n < max_len) {
 8000674:	e018      	b.n	80006a8 <lin_receive_response+0x4c>
        if (HAL_UART_Receive(huart, &buf[n], 1, 1) == HAL_OK) {
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	68ba      	ldr	r2, [r7, #8]
 800067a:	18d1      	adds	r1, r2, r3
 800067c:	2301      	movs	r3, #1
 800067e:	2201      	movs	r2, #1
 8000680:	68f8      	ldr	r0, [r7, #12]
 8000682:	f003 f87a 	bl	800377a <HAL_UART_Receive>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d105      	bne.n	8000698 <lin_receive_response+0x3c>
            n++;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
            t0 = HAL_GetTick(); // got something; extend window
 8000692:	f000 fc33 	bl	8000efc <HAL_GetTick>
 8000696:	6138      	str	r0, [r7, #16]
        }
        if ((HAL_GetTick() - t0) > timeout_ms) break;
 8000698:	f000 fc30 	bl	8000efc <HAL_GetTick>
 800069c:	4602      	mov	r2, r0
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	683a      	ldr	r2, [r7, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d304      	bcc.n	80006b2 <lin_receive_response+0x56>
    while (n < max_len) {
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbe2      	blt.n	8000676 <lin_receive_response+0x1a>
 80006b0:	e000      	b.n	80006b4 <lin_receive_response+0x58>
        if ((HAL_GetTick() - t0) > timeout_ms) break;
 80006b2:	bf00      	nop
    }
    return n; // 0 means no data
 80006b4:	697b      	ldr	r3, [r7, #20]
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3718      	adds	r7, #24
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <cdc_print_hex>:

static void cdc_print_hex(const char *prefix, const uint8_t *data, int len)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a6      	sub	sp, #152	; 0x98
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
    char line[128];
    int off = snprintf(line, sizeof(line), "%s", prefix);
 80006cc:	f107 0010 	add.w	r0, r7, #16
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a2a      	ldr	r2, [pc, #168]	; (800077c <cdc_print_hex+0xbc>)
 80006d4:	2180      	movs	r1, #128	; 0x80
 80006d6:	f007 fd69 	bl	80081ac <sniprintf>
 80006da:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    for (int i = 0; i < len && off < (int)sizeof(line) - 4; ++i) {
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80006e4:	e01b      	b.n	800071e <cdc_print_hex+0x5e>
        off += snprintf(line + off, sizeof(line) - off, "%02X ", data[i]);
 80006e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006ea:	f107 0210 	add.w	r2, r7, #16
 80006ee:	18d0      	adds	r0, r2, r3
 80006f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80006f4:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 80006f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	4413      	add	r3, r2
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <cdc_print_hex+0xc0>)
 8000704:	f007 fd52 	bl	80081ac <sniprintf>
 8000708:	4602      	mov	r2, r0
 800070a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800070e:	4413      	add	r3, r2
 8000710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int i = 0; i < len && off < (int)sizeof(line) - 4; ++i) {
 8000714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000718:	3301      	adds	r3, #1
 800071a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800071e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	da03      	bge.n	8000730 <cdc_print_hex+0x70>
 8000728:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800072c:	2b7b      	cmp	r3, #123	; 0x7b
 800072e:	ddda      	ble.n	80006e6 <cdc_print_hex+0x26>
    }
    if (off < (int)sizeof(line) - 2) line[off++] = '\r', line[off++] = '\n';
 8000730:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000734:	2b7d      	cmp	r3, #125	; 0x7d
 8000736:	dc13      	bgt.n	8000760 <cdc_print_hex+0xa0>
 8000738:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000742:	3398      	adds	r3, #152	; 0x98
 8000744:	443b      	add	r3, r7
 8000746:	220d      	movs	r2, #13
 8000748:	f803 2c88 	strb.w	r2, [r3, #-136]
 800074c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000756:	3398      	adds	r3, #152	; 0x98
 8000758:	443b      	add	r3, r7
 800075a:	220a      	movs	r2, #10
 800075c:	f803 2c88 	strb.w	r2, [r3, #-136]
    CDC_Transmit_FS((uint8_t*)line, off);
 8000760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000764:	b29a      	uxth	r2, r3
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f007 f899 	bl	80078a4 <CDC_Transmit_FS>
}
 8000772:	bf00      	nop
 8000774:	3798      	adds	r7, #152	; 0x98
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	08008aec 	.word	0x08008aec
 8000780:	08008af0 	.word	0x08008af0

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fb51 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f81f 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f90b 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000796:	f000 f887 	bl	80008a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800079a:	f000 f8b3 	bl	8000904 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800079e:	f000 f8db 	bl	8000958 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80007a2:	f006 ffc1 	bl	8007728 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 80007a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007aa:	f000 fbb3 	bl	8000f14 <HAL_Delay>
  HAL_GPIO_WritePin(LIN_CS_GPIO_Port, LIN_CS_Pin, GPIO_PIN_SET); //set LIN txcvr CS pin high
 80007ae:	2201      	movs	r2, #1
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <main+0x44>)
 80007b4:	f000 fe68 	bl	8001488 <HAL_GPIO_WritePin>
  const char *msg = "Hello BMW\r\n";
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <main+0x48>)
 80007ba:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIN_Ping_And_Print();
 80007bc:	f7ff fee2 	bl	8000584 <LIN_Ping_And_Print>
	  HAL_Delay(250);
 80007c0:	20fa      	movs	r0, #250	; 0xfa
 80007c2:	f000 fba7 	bl	8000f14 <HAL_Delay>
	  LIN_Ping_And_Print();
 80007c6:	e7f9      	b.n	80007bc <main+0x38>
 80007c8:	40020400 	.word	0x40020400
 80007cc:	08008af8 	.word	0x08008af8

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f007 fcdc 	bl	800819c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a28      	ldr	r2, [pc, #160]	; (80008a0 <SystemClock_Config+0xd0>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <SystemClock_Config+0xd0>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b23      	ldr	r3, [pc, #140]	; (80008a4 <SystemClock_Config+0xd4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <SystemClock_Config+0xd4>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b20      	ldr	r3, [pc, #128]	; (80008a4 <SystemClock_Config+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800082c:	2303      	movs	r3, #3
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083a:	2310      	movs	r3, #16
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000848:	230f      	movs	r3, #15
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800084c:	2390      	movs	r3, #144	; 0x90
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000854:	2305      	movs	r3, #5
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f9ef 	bl	8002c40 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000868:	f000 f93a 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fc52 	bl	8003130 <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000892:	f000 f925 	bl	8000ae0 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C1_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e6:	f000 fde9 	bl	80014bc <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8f6 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	2000017c 	.word	0x2000017c
 80008fc:	40005400 	.word	0x40005400
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART1_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART1_UART_Init+0x4c>)
 800093c:	f002 fdd8 	bl	80034f0 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f8cb 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001d0 	.word	0x200001d0
 8000954:	40011000 	.word	0x40011000

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	; (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_11B) != HAL_OK)
 800098e:	2120      	movs	r1, #32
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000992:	f002 fdfa 	bl	800358a <HAL_LIN_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800099c:	f000 f8a0 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000214 	.word	0x20000214
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b42      	ldr	r3, [pc, #264]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a41      	ldr	r2, [pc, #260]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a3a      	ldr	r2, [pc, #232]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b38      	ldr	r3, [pc, #224]	; (8000ad0 <MX_GPIO_Init+0x124>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a33      	ldr	r2, [pc, #204]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <MX_GPIO_Init+0x124>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4826      	ldr	r0, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0x128>)
 8000a3a:	f000 fd25 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000a3e:	2200      	movs	r2, #0
 8000a40:	21f3      	movs	r1, #243	; 0xf3
 8000a42:	4825      	ldr	r0, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a44:	f000 fd20 	bl	8001488 <HAL_GPIO_WritePin>
                          |BR3B_Pin|BR3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f247 5187 	movw	r1, #30087	; 0x7587
 8000a4e:	4823      	ldr	r0, [pc, #140]	; (8000adc <MX_GPIO_Init+0x130>)
 8000a50:	f000 fd1a 	bl	8001488 <HAL_GPIO_WritePin>
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <MX_GPIO_Init+0x128>)
 8000a6e:	f000 fb87 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR1B_Pin BR1A_Pin BR2B_Pin BR2A_Pin
                           BR3B_Pin BR3A_Pin */
  GPIO_InitStruct.Pin = BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000a72:	23f3      	movs	r3, #243	; 0xf3
 8000a74:	617b      	str	r3, [r7, #20]
                          |BR3B_Pin|BR3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <MX_GPIO_Init+0x12c>)
 8000a8a:	f000 fb79 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR4B_Pin BR4A_Pin BR5B_Pin BR5A_Pin
                           LS3_EN_Pin LS2_EN_Pin LS1_EN_Pin LIN_CS_Pin
                           RS485DE_Pin */
  GPIO_InitStruct.Pin = BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000a8e:	f247 5387 	movw	r3, #30087	; 0x7587
 8000a92:	617b      	str	r3, [r7, #20]
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	480d      	ldr	r0, [pc, #52]	; (8000adc <MX_GPIO_Init+0x130>)
 8000aa8:	f000 fb6a 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_ALERT_Pin */
  GPIO_InitStruct.Pin = INA_ALERT_Pin;
 8000aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INA_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4806      	ldr	r0, [pc, #24]	; (8000adc <MX_GPIO_Init+0x130>)
 8000ac2:	f000 fb5d 	bl	8001180 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <HAL_MspInit+0x4c>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_I2C_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b7a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b80:	2312      	movs	r3, #18
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8c:	2304      	movs	r3, #4
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HAL_I2C_MspInit+0x8c>)
 8000b98:	f000 faf2 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_I2C_MspInit+0x88>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	; 0x30
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <HAL_UART_MspInit+0x108>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d12d      	bne.n	8000c4a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	4b39      	ldr	r3, [pc, #228]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a38      	ldr	r2, [pc, #224]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c38:	2307      	movs	r3, #7
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4826      	ldr	r0, [pc, #152]	; (8000cdc <HAL_UART_MspInit+0x110>)
 8000c44:	f000 fa9c 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c48:	e040      	b.n	8000ccc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_UART_MspInit+0x114>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d13b      	bne.n	8000ccc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c62:	6413      	str	r3, [r2, #64]	; 0x40
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_UART_MspInit+0x10c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c8c:	2304      	movs	r3, #4
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9c:	2307      	movs	r3, #7
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <HAL_UART_MspInit+0x110>)
 8000ca8:	f000 fa6a 	bl	8001180 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cac:	2308      	movs	r3, #8
 8000cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_UART_MspInit+0x110>)
 8000cc8:	f000 fa5a 	bl	8001180 <HAL_GPIO_Init>
}
 8000ccc:	bf00      	nop
 8000cce:	3730      	adds	r7, #48	; 0x30
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <NMI_Handler+0x4>

08000cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <HardFault_Handler+0x4>

08000cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <MemManage_Handler+0x4>

08000cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <BusFault_Handler+0x4>

08000cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d30:	f000 f8d0 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <OTG_FS_IRQHandler+0x10>)
 8000d3e:	f000 fe51 	bl	80019e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20001740 	.word	0x20001740

08000d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d54:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	; (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d7c:	f007 f9e4 	bl	8008148 <__errno>
 8000d80:	4603      	mov	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	4a05      	ldr	r2, [pc, #20]	; (8000db0 <_sbrk+0x64>)
 8000d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20020000 	.word	0x20020000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000258 	.word	0x20000258
 8000db4:	20001e80 	.word	0x20001e80

08000db8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <SystemInit+0x20>)
 8000dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <SystemInit+0x20>)
 8000dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000de2:	490e      	ldr	r1, [pc, #56]	; (8000e1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000df8:	4c0b      	ldr	r4, [pc, #44]	; (8000e28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffd7 	bl	8000db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f007 f9a3 	bl	8008154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fcb9 	bl	8000784 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000e20:	08008ba8 	.word	0x08008ba8
  ldr r2, =_sbss
 8000e24:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000e28:	20001e7c 	.word	0x20001e7c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 f94f 	bl	80010fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe42 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f967 	bl	8001166 <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb0:	f000 f92f 	bl	8001112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	2000025c 	.word	0x2000025c

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000025c 	.word	0x2000025c

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_Delay+0x44>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000008 	.word	0x20000008

08000f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f003 0307 	and.w	r3, r3, #7
 8000f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8e:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	60d3      	str	r3, [r2, #12]
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <__NVIC_GetPriorityGrouping+0x18>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	0a1b      	lsrs	r3, r3, #8
 8000fae:	f003 0307 	and.w	r3, r3, #7
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	db0b      	blt.n	8000fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f003 021f 	and.w	r2, r3, #31
 8000fd8:	4907      	ldr	r1, [pc, #28]	; (8000ff8 <__NVIC_EnableIRQ+0x38>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100

08000ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	db0a      	blt.n	8001026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <__NVIC_SetPriority+0x4c>)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	0112      	lsls	r2, r2, #4
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	440b      	add	r3, r1
 8001020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001024:	e00a      	b.n	800103c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	b2da      	uxtb	r2, r3
 800102a:	4908      	ldr	r1, [pc, #32]	; (800104c <__NVIC_SetPriority+0x50>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	3b04      	subs	r3, #4
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	440b      	add	r3, r1
 800103a:	761a      	strb	r2, [r3, #24]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f1c3 0307 	rsb	r3, r3, #7
 800106a:	2b04      	cmp	r3, #4
 800106c:	bf28      	it	cs
 800106e:	2304      	movcs	r3, #4
 8001070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3304      	adds	r3, #4
 8001076:	2b06      	cmp	r3, #6
 8001078:	d902      	bls.n	8001080 <NVIC_EncodePriority+0x30>
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3b03      	subs	r3, #3
 800107e:	e000      	b.n	8001082 <NVIC_EncodePriority+0x32>
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 32ff 	mov.w	r2, #4294967295
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	401a      	ands	r2, r3
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001098:	f04f 31ff 	mov.w	r1, #4294967295
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa01 f303 	lsl.w	r3, r1, r3
 80010a2:	43d9      	mvns	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	4313      	orrs	r3, r2
         );
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c8:	d301      	bcc.n	80010ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00f      	b.n	80010ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <SysTick_Config+0x40>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010d6:	210f      	movs	r1, #15
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f7ff ff8e 	bl	8000ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <SysTick_Config+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010e6:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <SysTick_Config+0x40>)
 80010e8:	2207      	movs	r2, #7
 80010ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff29 	bl	8000f5c <__NVIC_SetPriorityGrouping>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff3e 	bl	8000fa4 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff8e 	bl	8001050 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5d 	bl	8000ffc <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff31 	bl	8000fc0 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa2 	bl	80010b8 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
 800119a:	e159      	b.n	8001450 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	697a      	ldr	r2, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	f040 8148 	bne.w	800144a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d130      	bne.n	8001234 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	2203      	movs	r2, #3
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68da      	ldr	r2, [r3, #12]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001208:	2201      	movs	r2, #1
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	f003 0201 	and.w	r2, r3, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0303 	and.w	r3, r3, #3
 800123c:	2b03      	cmp	r3, #3
 800123e:	d017      	beq.n	8001270 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d123      	bne.n	80012c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	08da      	lsrs	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3208      	adds	r2, #8
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0203 	and.w	r2, r3, #3
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a2 	beq.w	800144a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b57      	ldr	r3, [pc, #348]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a56      	ldr	r2, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b54      	ldr	r3, [pc, #336]	; (8001468 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a49      	ldr	r2, [pc, #292]	; (8001470 <HAL_GPIO_Init+0x2f0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x202>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a48      	ldr	r2, [pc, #288]	; (8001474 <HAL_GPIO_Init+0x2f4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x1fe>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a47      	ldr	r2, [pc, #284]	; (8001478 <HAL_GPIO_Init+0x2f8>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x1fa>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a46      	ldr	r2, [pc, #280]	; (800147c <HAL_GPIO_Init+0x2fc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x1f6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a45      	ldr	r2, [pc, #276]	; (8001480 <HAL_GPIO_Init+0x300>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x1f2>
 800136e:	2304      	movs	r3, #4
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001372:	2307      	movs	r3, #7
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x204>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x204>
 8001382:	2300      	movs	r3, #0
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001394:	4935      	ldr	r1, [pc, #212]	; (800146c <HAL_GPIO_Init+0x2ec>)
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a2:	4b38      	ldr	r3, [pc, #224]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c6:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f6:	4b23      	ldr	r3, [pc, #140]	; (8001484 <HAL_GPIO_Init+0x304>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800141a:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_GPIO_Init+0x304>)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	f67f aea2 	bls.w	800119c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020400 	.word	0x40020400
 8001478:	40020800 	.word	0x40020800
 800147c:	40020c00 	.word	0x40020c00
 8001480:	40021000 	.word	0x40021000
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e12b      	b.n	8001726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d106      	bne.n	80014e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff fb2a 	bl	8000b3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2224      	movs	r2, #36	; 0x24
 80014ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800150e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800151e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001520:	f001 ffbe 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8001524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4a81      	ldr	r2, [pc, #516]	; (8001730 <HAL_I2C_Init+0x274>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d807      	bhi.n	8001540 <HAL_I2C_Init+0x84>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4a80      	ldr	r2, [pc, #512]	; (8001734 <HAL_I2C_Init+0x278>)
 8001534:	4293      	cmp	r3, r2
 8001536:	bf94      	ite	ls
 8001538:	2301      	movls	r3, #1
 800153a:	2300      	movhi	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	e006      	b.n	800154e <HAL_I2C_Init+0x92>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4a7d      	ldr	r2, [pc, #500]	; (8001738 <HAL_I2C_Init+0x27c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	bf94      	ite	ls
 8001548:	2301      	movls	r3, #1
 800154a:	2300      	movhi	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0e7      	b.n	8001726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a78      	ldr	r2, [pc, #480]	; (800173c <HAL_I2C_Init+0x280>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	0c9b      	lsrs	r3, r3, #18
 8001560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	430a      	orrs	r2, r1
 8001574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4a6a      	ldr	r2, [pc, #424]	; (8001730 <HAL_I2C_Init+0x274>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d802      	bhi.n	8001590 <HAL_I2C_Init+0xd4>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3301      	adds	r3, #1
 800158e:	e009      	b.n	80015a4 <HAL_I2C_Init+0xe8>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_I2C_Init+0x284>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	3301      	adds	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	430b      	orrs	r3, r1
 80015aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	495c      	ldr	r1, [pc, #368]	; (8001730 <HAL_I2C_Init+0x274>)
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d819      	bhi.n	80015f8 <HAL_I2C_Init+0x13c>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e59      	subs	r1, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80015d2:	1c59      	adds	r1, r3, #1
 80015d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015d8:	400b      	ands	r3, r1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00a      	beq.n	80015f4 <HAL_I2C_Init+0x138>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e59      	subs	r1, r3, #1
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f2:	e051      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e04f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d111      	bne.n	8001624 <HAL_I2C_Init+0x168>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1e58      	subs	r0, r3, #1
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6859      	ldr	r1, [r3, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	e012      	b.n	800164a <HAL_I2C_Init+0x18e>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	0099      	lsls	r1, r3, #2
 8001634:	440b      	add	r3, r1
 8001636:	fbb0 f3f3 	udiv	r3, r0, r3
 800163a:	3301      	adds	r3, #1
 800163c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_Init+0x196>
 800164e:	2301      	movs	r3, #1
 8001650:	e022      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10e      	bne.n	8001678 <HAL_I2C_Init+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1e58      	subs	r0, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6859      	ldr	r1, [r3, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	440b      	add	r3, r1
 8001668:	fbb0 f3f3 	udiv	r3, r0, r3
 800166c:	3301      	adds	r3, #1
 800166e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001676:	e00f      	b.n	8001698 <HAL_I2C_Init+0x1dc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	1e58      	subs	r0, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6859      	ldr	r1, [r3, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	0099      	lsls	r1, r3, #2
 8001688:	440b      	add	r3, r1
 800168a:	fbb0 f3f3 	udiv	r3, r0, r3
 800168e:	3301      	adds	r3, #1
 8001690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	6809      	ldr	r1, [r1, #0]
 800169c:	4313      	orrs	r3, r2
 800169e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69da      	ldr	r2, [r3, #28]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6911      	ldr	r1, [r2, #16]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68d2      	ldr	r2, [r2, #12]
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	430b      	orrs	r3, r1
 80016da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	431a      	orrs	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	000186a0 	.word	0x000186a0
 8001734:	001e847f 	.word	0x001e847f
 8001738:	003d08ff 	.word	0x003d08ff
 800173c:	431bde83 	.word	0x431bde83
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001746:	b08f      	sub	sp, #60	; 0x3c
 8001748:	af0a      	add	r7, sp, #40	; 0x28
 800174a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e10f      	b.n	8001976 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d106      	bne.n	8001776 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f006 f9df 	bl	8007b34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2203      	movs	r2, #3
 800177a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f002 fcc6 	bl	8004126 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	687e      	ldr	r6, [r7, #4]
 80017a2:	466d      	mov	r5, sp
 80017a4:	f106 0410 	add.w	r4, r6, #16
 80017a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80017b8:	1d33      	adds	r3, r6, #4
 80017ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f002 fb9d 	bl	8003efc <USB_CoreInit>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2202      	movs	r2, #2
 80017cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d0      	b.n	8001976 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fcb4 	bl	8004148 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e04a      	b.n	800187c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	333d      	adds	r3, #61	; 0x3d
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	333c      	adds	r3, #60	; 0x3c
 800180a:	7bfa      	ldrb	r2, [r7, #15]
 800180c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800180e:	7bfa      	ldrb	r2, [r7, #15]
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	b298      	uxth	r0, r3
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	440b      	add	r3, r1
 8001820:	3344      	adds	r3, #68	; 0x44
 8001822:	4602      	mov	r2, r0
 8001824:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001826:	7bfa      	ldrb	r2, [r7, #15]
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4413      	add	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	440b      	add	r3, r1
 8001834:	3340      	adds	r3, #64	; 0x40
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3348      	adds	r3, #72	; 0x48
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	334c      	adds	r3, #76	; 0x4c
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001862:	7bfa      	ldrb	r2, [r7, #15]
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	4613      	mov	r3, r2
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4413      	add	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	440b      	add	r3, r1
 8001870:	3354      	adds	r3, #84	; 0x54
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	3301      	adds	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3af      	bcc.n	80017e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e044      	b.n	8001916 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018e4:	7bfa      	ldrb	r2, [r7, #15]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	3301      	adds	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
 8001916:	7bfa      	ldrb	r2, [r7, #15]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	d3b5      	bcc.n	800188c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	687e      	ldr	r6, [r7, #4]
 8001928:	466d      	mov	r5, sp
 800192a:	f106 0410 	add.w	r4, r6, #16
 800192e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	e894 0003 	ldmia.w	r4, {r0, r1}
 800193a:	e885 0003 	stmia.w	r5, {r0, r1}
 800193e:	1d33      	adds	r3, r6, #4
 8001940:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001942:	6838      	ldr	r0, [r7, #0]
 8001944:	f002 fc4c 	bl	80041e0 <USB_DevInit>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2202      	movs	r2, #2
 8001952:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00d      	b.n	8001976 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fd9b 	bl	80054aa <USB_DevDisconnect>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800197e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_PCD_Start+0x1c>
 8001996:	2302      	movs	r3, #2
 8001998:	e020      	b.n	80019dc <HAL_PCD_Start+0x5e>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d109      	bne.n	80019be <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fb9e 	bl	8004104 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fd4b 	bl	8005468 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b08d      	sub	sp, #52	; 0x34
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f003 fe09 	bl	8005612 <USB_GetMode>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 848a 	bne.w	800231c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fd6d 	bl	80054ec <USB_ReadInterrupts>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8480 	beq.w	800231a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fd5a 	bl	80054ec <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695a      	ldr	r2, [r3, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f002 0202 	and.w	r2, r2, #2
 8001a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f003 fd48 	bl	80054ec <USB_ReadInterrupts>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d161      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0210 	bic.w	r2, r2, #16
 8001a74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f003 020f 	and.w	r2, r3, #15
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	4413      	add	r3, r2
 8001a92:	3304      	adds	r3, #4
 8001a94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	0c5b      	lsrs	r3, r3, #17
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d124      	bne.n	8001aec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d035      	beq.n	8001b1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	461a      	mov	r2, r3
 8001ac0:	6a38      	ldr	r0, [r7, #32]
 8001ac2:	f003 fb7f 	bl	80051c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad2:	441a      	add	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae4:	441a      	add	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	621a      	str	r2, [r3, #32]
 8001aea:	e016      	b.n	8001b1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	0c5b      	lsrs	r3, r3, #17
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	2b06      	cmp	r3, #6
 8001af6:	d110      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001afe:	2208      	movs	r2, #8
 8001b00:	4619      	mov	r1, r3
 8001b02:	6a38      	ldr	r0, [r7, #32]
 8001b04:	f003 fb5e 	bl	80051c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b14:	441a      	add	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699a      	ldr	r2, [r3, #24]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 0210 	orr.w	r2, r2, #16
 8001b28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fcdc 	bl	80054ec <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b3e:	f040 80a7 	bne.w	8001c90 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 fce1 	bl	8005512 <USB_ReadDevAllOutEpInterrupt>
 8001b50:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001b52:	e099      	b.n	8001c88 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 808e 	beq.w	8001c7c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f003 fd05 	bl	800557a <USB_ReadDevOutEPInterrupt>
 8001b70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	015a      	lsls	r2, r3, #5
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	4413      	add	r3, r2
 8001b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b88:	461a      	mov	r2, r3
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fec3 	bl	800291c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00c      	beq.n	8001bba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	015a      	lsls	r2, r3, #5
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bac:	461a      	mov	r2, r3
 8001bae:	2308      	movs	r3, #8
 8001bb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 ff99 	bl	8002aec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d008      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d030      	beq.n	8001c42 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be8:	2b80      	cmp	r3, #128	; 0x80
 8001bea:	d109      	bne.n	8001c00 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	3304      	adds	r3, #4
 8001c14:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2200      	movs	r2, #0
 8001c22:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f006 f87e 	bl	8007d2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2302      	movs	r3, #2
 8001c40:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	015a      	lsls	r2, r3, #5
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	4413      	add	r3, r2
 8001c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c58:	461a      	mov	r2, r3
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c74:	461a      	mov	r2, r3
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f47f af62 	bne.w	8001b54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fc29 	bl	80054ec <USB_ReadInterrupts>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ca4:	f040 80db 	bne.w	8001e5e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f003 fc4a 	bl	8005546 <USB_ReadDevAllInEpInterrupt>
 8001cb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001cb8:	e0cd      	b.n	8001e56 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80c2 	beq.w	8001e4a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f003 fc70 	bl	80055b6 <USB_ReadDevInEPInterrupt>
 8001cd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d057      	beq.n	8001d92 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	f003 030f 	and.w	r3, r3, #15
 8001ce8:	2201      	movs	r2, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69f9      	ldr	r1, [r7, #28]
 8001cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d02:	4013      	ands	r3, r2
 8001d04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	015a      	lsls	r2, r3, #5
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d12:	461a      	mov	r2, r3
 8001d14:	2301      	movs	r3, #1
 8001d16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d132      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	334c      	adds	r3, #76	; 0x4c
 8001d30:	6819      	ldr	r1, [r3, #0]
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	4613      	mov	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4403      	add	r3, r0
 8001d40:	3348      	adds	r3, #72	; 0x48
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4419      	add	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4403      	add	r3, r0
 8001d54:	334c      	adds	r3, #76	; 0x4c
 8001d56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d113      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x3a2>
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	4613      	mov	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4413      	add	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3354      	adds	r3, #84	; 0x54
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d108      	bne.n	8001d86 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001d7e:	461a      	mov	r2, r3
 8001d80:	2101      	movs	r1, #1
 8001d82:	f003 fc77 	bl	8005674 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f005 ff52 	bl	8007c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d008      	beq.n	8001dae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da8:	461a      	mov	r2, r3
 8001daa:	2308      	movs	r3, #8
 8001dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d008      	beq.n	8001dca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	015a      	lsls	r2, r3, #5
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	4413      	add	r3, r2
 8001ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001de0:	461a      	mov	r2, r3
 8001de2:	2340      	movs	r3, #64	; 0x40
 8001de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001df2:	6a38      	ldr	r0, [r7, #32]
 8001df4:	f002 fb58 	bl	80044a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	3338      	adds	r3, #56	; 0x38
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	78db      	ldrb	r3, [r3, #3]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d108      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2200      	movs	r2, #0
 8001e18:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4619      	mov	r1, r3
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f005 ff95 	bl	8007d50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e32:	461a      	mov	r2, r3
 8001e34:	2302      	movs	r3, #2
 8001e36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001e42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fcdb 	bl	8002800 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f47f af2e 	bne.w	8001cba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fb42 	bl	80054ec <USB_ReadInterrupts>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e72:	d122      	bne.n	8001eba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e82:	f023 0301 	bic.w	r3, r3, #1
 8001e86:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fec3 	bl	8002c28 <HAL_PCDEx_LPM_Callback>
 8001ea2:	e002      	b.n	8001eaa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f005 ff33 	bl	8007d10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695a      	ldr	r2, [r3, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 fb14 	bl	80054ec <USB_ReadInterrupts>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ece:	d112      	bne.n	8001ef6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f005 feef 	bl	8007cc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001ef4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 faf6 	bl	80054ec <USB_ReadInterrupts>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f0a:	f040 80b7 	bne.w	800207c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f1c:	f023 0301 	bic.w	r3, r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2110      	movs	r1, #16
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fabd 	bl	80044a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f32:	e046      	b.n	8001fc2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f40:	461a      	mov	r2, r3
 8001f42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f46:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001f62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001f7a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f8c:	0151      	lsls	r1, r2, #5
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	440a      	add	r2, r1
 8001f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f9a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fac:	0151      	lsls	r1, r2, #5
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	440a      	add	r2, r1
 8001fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001fb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3b3      	bcc.n	8001f34 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fda:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001fde:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ff8:	f043 030b 	orr.w	r3, r3, #11
 8001ffc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800200e:	f043 030b 	orr.w	r3, r3, #11
 8002012:	6453      	str	r3, [r2, #68]	; 0x44
 8002014:	e015      	b.n	8002042 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002024:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002028:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800202c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800203c:	f043 030b 	orr.w	r3, r3, #11
 8002040:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69fa      	ldr	r2, [r7, #28]
 800204c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002050:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002054:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002066:	461a      	mov	r2, r3
 8002068:	f003 fb04 	bl	8005674 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800207a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fa33 	bl	80054ec <USB_ReadInterrupts>
 8002086:	4603      	mov	r3, r0
 8002088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002090:	d124      	bne.n	80020dc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fac9 	bl	800562e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 fa7e 	bl	80045a2 <USB_GetDevSpeed>
 80020a6:	4603      	mov	r3, r0
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681c      	ldr	r4, [r3, #0]
 80020b2:	f001 f9e9 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80020b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	4620      	mov	r0, r4
 80020c2:	f001 ff7d 	bl	8003fc0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f005 fddd 	bl	8007c86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80020da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 fa03 	bl	80054ec <USB_ReadInterrupts>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d10a      	bne.n	8002106 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f005 fdba 	bl	8007c6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f002 0208 	and.w	r2, r2, #8
 8002104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 f9ee 	bl	80054ec <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002116:	2b80      	cmp	r3, #128	; 0x80
 8002118:	d122      	bne.n	8002160 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800211a:	6a3b      	ldr	r3, [r7, #32]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002126:	2301      	movs	r3, #1
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
 800212a:	e014      	b.n	8002156 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fb27 	bl	800279e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	3301      	adds	r3, #1
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215c:	429a      	cmp	r2, r3
 800215e:	d3e5      	bcc.n	800212c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f9c1 	bl	80054ec <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002170:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002174:	d13b      	bne.n	80021ee <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002176:	2301      	movs	r3, #1
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
 800217a:	e02b      	b.n	80021d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3340      	adds	r3, #64	; 0x40
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d115      	bne.n	80021ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80021a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da12      	bge.n	80021ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	333f      	adds	r3, #63	; 0x3f
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 fae8 	bl	800279e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	3301      	adds	r3, #1
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3ce      	bcc.n	800217c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f003 f97a 	bl	80054ec <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002202:	d155      	bne.n	80022b0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002204:	2301      	movs	r3, #1
 8002206:	627b      	str	r3, [r7, #36]	; 0x24
 8002208:	e045      	b.n	8002296 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d12e      	bne.n	8002290 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002232:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002234:	2b00      	cmp	r3, #0
 8002236:	da2b      	bge.n	8002290 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002244:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002248:	429a      	cmp	r2, r3
 800224a:	d121      	bne.n	8002290 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002250:	4613      	mov	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800225e:	2201      	movs	r2, #1
 8002260:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10a      	bne.n	8002290 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228c:	6053      	str	r3, [r2, #4]
            break;
 800228e:	e007      	b.n	80022a0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3301      	adds	r3, #1
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229c:	429a      	cmp	r2, r3
 800229e:	d3b4      	bcc.n	800220a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80022ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f919 	bl	80054ec <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c4:	d10a      	bne.n	80022dc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f005 fd54 	bl	8007d74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80022da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f003 f903 	bl	80054ec <USB_ReadInterrupts>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d115      	bne.n	800231c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 fd44 	bl	8007d90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	430a      	orrs	r2, r1
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	e000      	b.n	800231c <HAL_PCD_IRQHandler+0x938>
      return;
 800231a:	bf00      	nop
    }
  }
}
 800231c:	3734      	adds	r7, #52	; 0x34
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}

08002322 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	460b      	mov	r3, r1
 800232c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_PCD_SetAddress+0x1a>
 8002338:	2302      	movs	r3, #2
 800233a:	e013      	b.n	8002364 <HAL_PCD_SetAddress+0x42>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f003 f861 	bl	800541c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	70fb      	strb	r3, [r7, #3]
 800237e:	460b      	mov	r3, r1
 8002380:	803b      	strh	r3, [r7, #0]
 8002382:	4613      	mov	r3, r2
 8002384:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800238a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0f      	bge.n	80023b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002392:	78fb      	ldrb	r3, [r7, #3]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	3338      	adds	r3, #56	; 0x38
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	3304      	adds	r3, #4
 80023a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	705a      	strb	r2, [r3, #1]
 80023b0:	e00f      	b.n	80023d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	3304      	adds	r3, #4
 80023ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023d2:	78fb      	ldrb	r3, [r7, #3]
 80023d4:	f003 030f 	and.w	r3, r3, #15
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80023de:	883a      	ldrh	r2, [r7, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	78ba      	ldrb	r2, [r7, #2]
 80023e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	785b      	ldrb	r3, [r3, #1]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80023fc:	78bb      	ldrb	r3, [r7, #2]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d102      	bne.n	8002408 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_PCD_EP_Open+0xaa>
 8002412:	2302      	movs	r3, #2
 8002414:	e00e      	b.n	8002434 <HAL_PCD_EP_Open+0xc8>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 f8e1 	bl	80045ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002432:	7afb      	ldrb	r3, [r7, #11]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	da0f      	bge.n	8002470 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	3338      	adds	r3, #56	; 0x38
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	3304      	adds	r3, #4
 8002466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	705a      	strb	r2, [r3, #1]
 800246e:	e00f      	b.n	8002490 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	f003 020f 	and.w	r2, r3, #15
 8002476:	4613      	mov	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	3304      	adds	r3, #4
 8002488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_PCD_EP_Close+0x6e>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e00e      	b.n	80024c8 <HAL_PCD_EP_Close+0x8c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 f91f 	bl	80046fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	460b      	mov	r3, r1
 80024de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e0:	7afb      	ldrb	r3, [r7, #11]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2200      	movs	r2, #0
 8002510:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002512:	7afb      	ldrb	r3, [r7, #11]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	b2da      	uxtb	r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d102      	bne.n	800252c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800252c:	7afb      	ldrb	r3, [r7, #11]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	f002 fbfe 	bl	8004d44 <USB_EP0StartXfer>
 8002548:	e008      	b.n	800255c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	461a      	mov	r2, r3
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	f002 f9ac 	bl	80048b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	460b      	mov	r3, r1
 8002570:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	f003 020f 	and.w	r2, r3, #15
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002588:	681b      	ldr	r3, [r3, #0]
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	460b      	mov	r3, r1
 80025a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	f003 020f 	and.w	r2, r3, #15
 80025ac:	4613      	mov	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	3338      	adds	r3, #56	; 0x38
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2201      	movs	r2, #1
 80025d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6979      	ldr	r1, [r7, #20]
 8002608:	f002 fb9c 	bl	8004d44 <USB_EP0StartXfer>
 800260c:	e008      	b.n	8002620 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	f002 f94a 	bl	80048b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b084      	sub	sp, #16
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	d901      	bls.n	8002648 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e050      	b.n	80026ea <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800264c:	2b00      	cmp	r3, #0
 800264e:	da0f      	bge.n	8002670 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	f003 020f 	and.w	r2, r3, #15
 8002656:	4613      	mov	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	3338      	adds	r3, #56	; 0x38
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	705a      	strb	r2, [r3, #1]
 800266e:	e00d      	b.n	800268c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	3304      	adds	r3, #4
 8002684:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	b2da      	uxtb	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_PCD_EP_SetStall+0x82>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e01e      	b.n	80026ea <HAL_PCD_EP_SetStall+0xc0>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68f9      	ldr	r1, [r7, #12]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f002 fdda 	bl	8005274 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026da:	461a      	mov	r2, r3
 80026dc:	f002 ffca 	bl	8005674 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b084      	sub	sp, #16
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	460b      	mov	r3, r1
 80026fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d901      	bls.n	8002710 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e042      	b.n	8002796 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002714:	2b00      	cmp	r3, #0
 8002716:	da0f      	bge.n	8002738 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 020f 	and.w	r2, r3, #15
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	3338      	adds	r3, #56	; 0x38
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	3304      	adds	r3, #4
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	705a      	strb	r2, [r3, #1]
 8002736:	e00f      	b.n	8002758 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 020f 	and.w	r2, r3, #15
 800273e:	4613      	mov	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	3304      	adds	r3, #4
 8002750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_PCD_EP_ClrStall+0x86>
 8002774:	2302      	movs	r3, #2
 8002776:	e00e      	b.n	8002796 <HAL_PCD_EP_ClrStall+0xa4>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68f9      	ldr	r1, [r7, #12]
 8002786:	4618      	mov	r0, r3
 8002788:	f002 fde2 	bl	8005350 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80027aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da0c      	bge.n	80027cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	f003 020f 	and.w	r2, r3, #15
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3338      	adds	r3, #56	; 0x38
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	4413      	add	r3, r2
 80027c6:	3304      	adds	r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e00c      	b.n	80027e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 020f 	and.w	r2, r3, #15
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	3304      	adds	r3, #4
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 fc01 	bl	8004ff4 <USB_EPStopXfer>
 80027f2:	4603      	mov	r3, r0
 80027f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80027f6:	7afb      	ldrb	r3, [r7, #11]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	; 0x28
 8002804:	af02      	add	r7, sp, #8
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4613      	mov	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	3338      	adds	r3, #56	; 0x38
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3304      	adds	r3, #4
 8002826:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	429a      	cmp	r2, r3
 8002832:	d901      	bls.n	8002838 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e06c      	b.n	8002912 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	429a      	cmp	r2, r3
 800284c:	d902      	bls.n	8002854 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	3303      	adds	r3, #3
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800285c:	e02b      	b.n	80028b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	429a      	cmp	r2, r3
 8002872:	d902      	bls.n	800287a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3303      	adds	r3, #3
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6919      	ldr	r1, [r3, #16]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	b2da      	uxtb	r2, r3
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002892:	b2db      	uxtb	r3, r3
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	4603      	mov	r3, r0
 8002898:	6978      	ldr	r0, [r7, #20]
 800289a:	f002 fc55 	bl	8005148 <USB_WritePacket>

    ep->xfer_buff  += len;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	441a      	add	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	441a      	add	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d809      	bhi.n	80028e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d203      	bcs.n	80028e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1be      	bne.n	800285e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d811      	bhi.n	8002910 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	2201      	movs	r2, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	43db      	mvns	r3, r3
 8002906:	6939      	ldr	r1, [r7, #16]
 8002908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800290c:	4013      	ands	r3, r2
 800290e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	333c      	adds	r3, #60	; 0x3c
 8002934:	3304      	adds	r3, #4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4413      	add	r3, r2
 8002942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d17b      	bne.n	8002a4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4a61      	ldr	r2, [pc, #388]	; (8002ae4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	f240 80b9 	bls.w	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80b3 	beq.w	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	015a      	lsls	r2, r3, #5
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	4413      	add	r3, r2
 800297a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297e:	461a      	mov	r2, r3
 8002980:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002984:	6093      	str	r3, [r2, #8]
 8002986:	e0a7      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800299e:	461a      	mov	r2, r3
 80029a0:	2320      	movs	r3, #32
 80029a2:	6093      	str	r3, [r2, #8]
 80029a4:	e098      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 8093 	bne.w	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d90f      	bls.n	80029da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	461a      	mov	r2, r3
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	6093      	str	r3, [r2, #8]
 80029d8:	e07e      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	4413      	add	r3, r2
 80029ec:	3304      	adds	r3, #4
 80029ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	69da      	ldr	r2, [r3, #28]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	0159      	lsls	r1, r3, #5
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a06:	1ad2      	subs	r2, r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d114      	bne.n	8002a3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d109      	bne.n	8002a2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a24:	461a      	mov	r2, r3
 8002a26:	2101      	movs	r1, #1
 8002a28:	f002 fe24 	bl	8005674 <USB_EP0_OutStart>
 8002a2c:	e006      	b.n	8002a3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	441a      	add	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f005 f8dc 	bl	8007c00 <HAL_PCD_DataOutStageCallback>
 8002a48:	e046      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	4a26      	ldr	r2, [pc, #152]	; (8002ae8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d124      	bne.n	8002a9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6e:	6093      	str	r3, [r2, #8]
 8002a70:	e032      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4619      	mov	r1, r3
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f005 f8b3 	bl	8007c00 <HAL_PCD_DataOutStageCallback>
 8002a9a:	e01d      	b.n	8002ad8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d114      	bne.n	8002acc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d108      	bne.n	8002acc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f002 fdd4 	bl	8005674 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f005 f894 	bl	8007c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	4f54300a 	.word	0x4f54300a
 8002ae8:	4f54310a 	.word	0x4f54310a

08002aec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	333c      	adds	r3, #60	; 0x3c
 8002b04:	3304      	adds	r3, #4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	015a      	lsls	r2, r3, #5
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4a15      	ldr	r2, [pc, #84]	; (8002b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d90e      	bls.n	8002b40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d009      	beq.n	8002b40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f005 f84b 	bl	8007bdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d90c      	bls.n	8002b68 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b60:	461a      	mov	r2, r3
 8002b62:	2101      	movs	r1, #1
 8002b64:	f002 fd86 	bl	8005674 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	4f54300a 	.word	0x4f54300a

08002b78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
 8002b84:	4613      	mov	r3, r2
 8002b86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d107      	bne.n	8002ba6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b96:	883b      	ldrh	r3, [r7, #0]
 8002b98:	0419      	lsls	r1, r3, #16
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ba4:	e028      	b.n	8002bf8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	0c1b      	lsrs	r3, r3, #16
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e00d      	b.n	8002bd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3340      	adds	r3, #64	; 0x40
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4413      	add	r3, r2
 8002bce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	7bfa      	ldrb	r2, [r7, #15]
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3ec      	bcc.n	8002bba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002be0:	883b      	ldrh	r3, [r7, #0]
 8002be2:	0418      	lsls	r0, r3, #16
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6819      	ldr	r1, [r3, #0]
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4302      	orrs	r2, r0
 8002bf0:	3340      	adds	r3, #64	; 0x40
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	887a      	ldrh	r2, [r7, #2]
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e267      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d075      	beq.n	8002d4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 030c 	and.w	r3, r3, #12
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d00c      	beq.n	8002c84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c6a:	4b85      	ldr	r3, [pc, #532]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d112      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4b82      	ldr	r3, [pc, #520]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c82:	d10b      	bne.n	8002c9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c84:	4b7e      	ldr	r3, [pc, #504]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d05b      	beq.n	8002d48 <HAL_RCC_OscConfig+0x108>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d157      	bne.n	8002d48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e242      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d106      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x74>
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a75      	ldr	r2, [pc, #468]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb0:	6013      	str	r3, [r2, #0]
 8002cb2:	e01d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x98>
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a6f      	ldr	r2, [pc, #444]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b6d      	ldr	r3, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6c      	ldr	r2, [pc, #432]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0xb0>
 8002cd8:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a68      	ldr	r2, [pc, #416]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b66      	ldr	r3, [pc, #408]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe f900 	bl	8000efc <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d00:	f7fe f8fc 	bl	8000efc <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b64      	cmp	r3, #100	; 0x64
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e207      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0xc0>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe f8ec 	bl	8000efc <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7fe f8e8 	bl	8000efc <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1f3      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3a:	4b51      	ldr	r3, [pc, #324]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0xe8>
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d063      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d56:	4b4a      	ldr	r3, [pc, #296]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d62:	4b47      	ldr	r3, [pc, #284]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d11c      	bne.n	8002da8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d116      	bne.n	8002da8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d005      	beq.n	8002d92 <HAL_RCC_OscConfig+0x152>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d001      	beq.n	8002d92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e1c7      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	4937      	ldr	r1, [pc, #220]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	e03a      	b.n	8002e1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCC_OscConfig+0x244>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f8a1 	bl	8000efc <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe f89d 	bl	8000efc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e1a8      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b28      	ldr	r3, [pc, #160]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	4925      	ldr	r1, [pc, #148]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	600b      	str	r3, [r1, #0]
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x244>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df8:	f7fe f880 	bl	8000efc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e00:	f7fe f87c 	bl	8000efc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e187      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e12:	4b1b      	ldr	r3, [pc, #108]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d036      	beq.n	8002e98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d016      	beq.n	8002e60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <HAL_RCC_OscConfig+0x248>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe f860 	bl	8000efc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe f85c 	bl	8000efc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e167      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e52:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <HAL_RCC_OscConfig+0x240>)
 8002e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x200>
 8002e5e:	e01b      	b.n	8002e98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e60:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_OscConfig+0x248>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f849 	bl	8000efc <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	e00e      	b.n	8002e8c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e6e:	f7fe f845 	bl	8000efc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d907      	bls.n	8002e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e150      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
 8002e88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e8c:	4b88      	ldr	r3, [pc, #544]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1ea      	bne.n	8002e6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	f000 8097 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4b81      	ldr	r3, [pc, #516]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	4b7d      	ldr	r3, [pc, #500]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	4a7c      	ldr	r2, [pc, #496]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec6:	4b7a      	ldr	r3, [pc, #488]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d118      	bne.n	8002f14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a73      	ldr	r2, [pc, #460]	; (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eee:	f7fe f805 	bl	8000efc <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	e008      	b.n	8002f08 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef6:	f7fe f801 	bl	8000efc <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e10c      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f08:	4b6a      	ldr	r3, [pc, #424]	; (80030b4 <HAL_RCC_OscConfig+0x474>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0f0      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x2ea>
 8002f1c:	4b64      	ldr	r3, [pc, #400]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	4a63      	ldr	r2, [pc, #396]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6713      	str	r3, [r2, #112]	; 0x70
 8002f28:	e01c      	b.n	8002f64 <HAL_RCC_OscConfig+0x324>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x30c>
 8002f32:	4b5f      	ldr	r3, [pc, #380]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f38:	f043 0304 	orr.w	r3, r3, #4
 8002f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f3e:	4b5c      	ldr	r3, [pc, #368]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6713      	str	r3, [r2, #112]	; 0x70
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0x324>
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	4a57      	ldr	r2, [pc, #348]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	6713      	str	r3, [r2, #112]	; 0x70
 8002f58:	4b55      	ldr	r3, [pc, #340]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	4a54      	ldr	r2, [pc, #336]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f5e:	f023 0304 	bic.w	r3, r3, #4
 8002f62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f6c:	f7fd ffc6 	bl	8000efc <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f72:	e00a      	b.n	8002f8a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f74:	f7fd ffc2 	bl	8000efc <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e0cb      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8a:	4b49      	ldr	r3, [pc, #292]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ee      	beq.n	8002f74 <HAL_RCC_OscConfig+0x334>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fd ffb0 	bl	8000efc <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f9e:	e00a      	b.n	8002fb6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ffac 	bl	8000efc <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e0b5      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ee      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc8:	4b39      	ldr	r3, [pc, #228]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	4a38      	ldr	r2, [pc, #224]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 80a1 	beq.w	8003120 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fde:	4b34      	ldr	r3, [pc, #208]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d05c      	beq.n	80030a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d141      	bne.n	8003076 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCC_OscConfig+0x478>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fd ff80 	bl	8000efc <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fd ff7c 	bl	8000efc <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e087      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	085b      	lsrs	r3, r3, #1
 8003036:	3b01      	subs	r3, #1
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	431a      	orrs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	491b      	ldr	r1, [pc, #108]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003048:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <HAL_RCC_OscConfig+0x478>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fd ff55 	bl	8000efc <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003056:	f7fd ff51 	bl	8000efc <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e05c      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x416>
 8003074:	e054      	b.n	8003120 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003076:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <HAL_RCC_OscConfig+0x478>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fd ff3e 	bl	8000efc <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fd ff3a 	bl	8000efc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e045      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_OscConfig+0x470>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x444>
 80030a2:	e03d      	b.n	8003120 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d107      	bne.n	80030bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e038      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40007000 	.word	0x40007000
 80030b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_RCC_OscConfig+0x4ec>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d028      	beq.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d121      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d11a      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030ec:	4013      	ands	r3, r2
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d111      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d107      	bne.n	800311c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e000      	b.n	8003122 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800

08003130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0cc      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d90c      	bls.n	800316c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0b8      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d020      	beq.n	80031ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003184:	4b59      	ldr	r3, [pc, #356]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800318e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800319c:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	494d      	ldr	r1, [pc, #308]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d044      	beq.n	8003250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d119      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e07f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d003      	beq.n	80031ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ee:	4b3f      	ldr	r3, [pc, #252]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e06f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	4b3b      	ldr	r3, [pc, #236]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e067      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800320e:	4b37      	ldr	r3, [pc, #220]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f023 0203 	bic.w	r2, r3, #3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	4934      	ldr	r1, [pc, #208]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	4313      	orrs	r3, r2
 800321e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003220:	f7fd fe6c 	bl	8000efc <HAL_GetTick>
 8003224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	e00a      	b.n	800323e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003228:	f7fd fe68 	bl	8000efc <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e04f      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	4b2b      	ldr	r3, [pc, #172]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 020c 	and.w	r2, r3, #12
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d1eb      	bne.n	8003228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003250:	4b25      	ldr	r3, [pc, #148]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d20c      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d001      	beq.n	8003278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e032      	b.n	80032de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4916      	ldr	r1, [pc, #88]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	490e      	ldr	r1, [pc, #56]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032b6:	f000 f821 	bl	80032fc <HAL_RCC_GetSysClockFreq>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 030f 	and.w	r3, r3, #15
 80032c6:	490a      	ldr	r1, [pc, #40]	; (80032f0 <HAL_RCC_ClockConfig+0x1c0>)
 80032c8:	5ccb      	ldrb	r3, [r1, r3]
 80032ca:	fa22 f303 	lsr.w	r3, r2, r3
 80032ce:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032d2:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x1c8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd fdcc 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023c00 	.word	0x40023c00
 80032ec:	40023800 	.word	0x40023800
 80032f0:	08008b4c 	.word	0x08008b4c
 80032f4:	20000000 	.word	0x20000000
 80032f8:	20000004 	.word	0x20000004

080032fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003300:	b090      	sub	sp, #64	; 0x40
 8003302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
 8003308:	2300      	movs	r3, #0
 800330a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330c:	2300      	movs	r3, #0
 800330e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b08      	cmp	r3, #8
 800331e:	d00d      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x40>
 8003320:	2b08      	cmp	r3, #8
 8003322:	f200 80a1 	bhi.w	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d002      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x34>
 800332a:	2b04      	cmp	r3, #4
 800332c:	d003      	beq.n	8003336 <HAL_RCC_GetSysClockFreq+0x3a>
 800332e:	e09b      	b.n	8003468 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003330:	4b53      	ldr	r3, [pc, #332]	; (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003334:	e09b      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003336:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333a:	e098      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003346:	4b4d      	ldr	r3, [pc, #308]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d028      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003352:	4b4a      	ldr	r3, [pc, #296]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	099b      	lsrs	r3, r3, #6
 8003358:	2200      	movs	r2, #0
 800335a:	623b      	str	r3, [r7, #32]
 800335c:	627a      	str	r2, [r7, #36]	; 0x24
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003364:	2100      	movs	r1, #0
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003368:	fb03 f201 	mul.w	r2, r3, r1
 800336c:	2300      	movs	r3, #0
 800336e:	fb00 f303 	mul.w	r3, r0, r3
 8003372:	4413      	add	r3, r2
 8003374:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_RCC_GetSysClockFreq+0x188>)
 8003376:	fba0 1202 	umull	r1, r2, r0, r2
 800337a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800337c:	460a      	mov	r2, r1
 800337e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003382:	4413      	add	r3, r2
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003388:	2200      	movs	r2, #0
 800338a:	61bb      	str	r3, [r7, #24]
 800338c:	61fa      	str	r2, [r7, #28]
 800338e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003392:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003396:	f7fc ff73 	bl	8000280 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4613      	mov	r3, r2
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a2:	e053      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a4:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	099b      	lsrs	r3, r3, #6
 80033aa:	2200      	movs	r2, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	617a      	str	r2, [r7, #20]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033b6:	f04f 0b00 	mov.w	fp, #0
 80033ba:	4652      	mov	r2, sl
 80033bc:	465b      	mov	r3, fp
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	ebb2 080a 	subs.w	r8, r2, sl
 80033d6:	eb63 090b 	sbc.w	r9, r3, fp
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ee:	ebb2 0408 	subs.w	r4, r2, r8
 80033f2:	eb63 0509 	sbc.w	r5, r3, r9
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	00eb      	lsls	r3, r5, #3
 8003400:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003404:	00e2      	lsls	r2, r4, #3
 8003406:	4614      	mov	r4, r2
 8003408:	461d      	mov	r5, r3
 800340a:	eb14 030a 	adds.w	r3, r4, sl
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	eb45 030b 	adc.w	r3, r5, fp
 8003414:	607b      	str	r3, [r7, #4]
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003422:	4629      	mov	r1, r5
 8003424:	028b      	lsls	r3, r1, #10
 8003426:	4621      	mov	r1, r4
 8003428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800342c:	4621      	mov	r1, r4
 800342e:	028a      	lsls	r2, r1, #10
 8003430:	4610      	mov	r0, r2
 8003432:	4619      	mov	r1, r3
 8003434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003436:	2200      	movs	r2, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	60fa      	str	r2, [r7, #12]
 800343c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003440:	f7fc ff1e 	bl	8000280 <__aeabi_uldivmod>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4613      	mov	r3, r2
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800344c:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_RCC_GetSysClockFreq+0x180>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	3301      	adds	r3, #1
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800345c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003466:	e002      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetSysClockFreq+0x184>)
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800346c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003470:	4618      	mov	r0, r3
 8003472:	3740      	adds	r7, #64	; 0x40
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347a:	bf00      	nop
 800347c:	40023800 	.word	0x40023800
 8003480:	00f42400 	.word	0x00f42400
 8003484:	017d7840 	.word	0x017d7840

08003488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_RCC_GetHCLKFreq+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff0 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	0a9b      	lsrs	r3, r3, #10
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	08008b5c 	.word	0x08008b5c

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffdc 	bl	8003488 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40023800 	.word	0x40023800
 80034ec:	08008b5c 	.word	0x08008b5c

080034f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e03f      	b.n	8003582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fb58 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fa6d 	bl	8003a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e057      	b.n	800364e <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fd fb0a 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2224      	movs	r2, #36	; 0x24
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fa1f 	bl	8003a14 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035f4:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003604:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0220 	bic.w	r2, r2, #32
 8003614:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6919      	ldr	r1, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003634:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	; 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d17c      	bne.n	8003770 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_UART_Transmit+0x2c>
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e075      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_UART_Transmit+0x3e>
 8003690:	2302      	movs	r3, #2
 8003692:	e06e      	b.n	8003772 <HAL_UART_Transmit+0x11c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036aa:	f7fd fc27 	bl	8000efc <HAL_GetTick>
 80036ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	88fa      	ldrh	r2, [r7, #6]
 80036b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	88fa      	ldrh	r2, [r7, #6]
 80036ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036c4:	d108      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036e8:	e02a      	b.n	8003740 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2180      	movs	r1, #128	; 0x80
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f91e 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e036      	b.n	8003772 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003718:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	3302      	adds	r3, #2
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	e007      	b.n	8003732 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	3301      	adds	r3, #1
 8003730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003736:	b29b      	uxth	r3, r3
 8003738:	3b01      	subs	r3, #1
 800373a:	b29a      	uxth	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cf      	bne.n	80036ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2200      	movs	r2, #0
 8003752:	2140      	movs	r1, #64	; 0x40
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f8ee 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e006      	b.n	8003772 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	4618      	mov	r0, r3
 8003774:	3720      	adds	r7, #32
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b08a      	sub	sp, #40	; 0x28
 800377e:	af02      	add	r7, sp, #8
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	603b      	str	r3, [r7, #0]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 808c 	bne.w	80038b4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_UART_Receive+0x2e>
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e084      	b.n	80038b6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Receive+0x40>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e07d      	b.n	80038b6 <HAL_UART_Receive+0x13c>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2222      	movs	r2, #34	; 0x22
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d6:	f7fd fb91 	bl	8000efc <HAL_GetTick>
 80037da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	88fa      	ldrh	r2, [r7, #6]
 80037e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f0:	d108      	bne.n	8003804 <HAL_UART_Receive+0x8a>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e003      	b.n	800380c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003814:	e043      	b.n	800389e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2120      	movs	r1, #32
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f888 	bl	8003936 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e042      	b.n	80038b6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10c      	bne.n	8003850 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003842:	b29a      	uxth	r2, r3
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	3302      	adds	r3, #2
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	e01f      	b.n	8003890 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003858:	d007      	beq.n	800386a <HAL_UART_Receive+0xf0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <HAL_UART_Receive+0xfe>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	701a      	strb	r2, [r3, #0]
 8003876:	e008      	b.n	800388a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003884:	b2da      	uxtb	r2, r3
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3301      	adds	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1b6      	bne.n	8003816 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3720      	adds	r7, #32
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 80038be:	b480      	push	{r7}
 80038c0:	b089      	sub	sp, #36	; 0x24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d101      	bne.n	80038d4 <HAL_LIN_SendBreak+0x16>
 80038d0:	2302      	movs	r3, #2
 80038d2:	e02a      	b.n	800392a <HAL_LIN_SendBreak+0x6c>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	61ba      	str	r2, [r7, #24]
 8003906:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6979      	ldr	r1, [r7, #20]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	613b      	str	r3, [r7, #16]
   return(result);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e5      	bne.n	80038e4 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	; 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b090      	sub	sp, #64	; 0x40
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	4613      	mov	r3, r2
 8003944:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003946:	e050      	b.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d04c      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x30>
 8003956:	f7fd fad1 	bl	8000efc <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003962:	429a      	cmp	r2, r3
 8003964:	d241      	bcs.n	80039ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	330c      	adds	r3, #12
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	330c      	adds	r3, #12
 8003984:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003986:	637a      	str	r2, [r7, #52]	; 0x34
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800398c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	613b      	str	r3, [r7, #16]
   return(result);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3314      	adds	r3, #20
 80039b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ba:	623a      	str	r2, [r7, #32]
 80039bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039be:	69f9      	ldr	r1, [r7, #28]
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	e841 2300 	strex	r3, r2, [r1]
 80039c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e5      	bne.n	800399a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e00f      	b.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4013      	ands	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	bf0c      	ite	eq
 80039fa:	2301      	moveq	r3, #1
 80039fc:	2300      	movne	r3, #0
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	461a      	mov	r2, r3
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d09f      	beq.n	8003948 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3740      	adds	r7, #64	; 0x40
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b0c0      	sub	sp, #256	; 0x100
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	ea40 0301 	orr.w	r3, r0, r1
 8003a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a6c:	f021 010c 	bic.w	r1, r1, #12
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	ea40 0301 	orr.w	r3, r0, r1
 8003a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b8f      	ldr	r3, [pc, #572]	; (8003ce0 <UART_SetConfig+0x2cc>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d005      	beq.n	8003ab4 <UART_SetConfig+0xa0>
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b8d      	ldr	r3, [pc, #564]	; (8003ce4 <UART_SetConfig+0x2d0>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d104      	bne.n	8003abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7ff fd08 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003abc:	e003      	b.n	8003ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff fcef 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad0:	f040 810c 	bne.w	8003cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8003aee:	415b      	adcs	r3, r3
 8003af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003af6:	4621      	mov	r1, r4
 8003af8:	eb12 0801 	adds.w	r8, r2, r1
 8003afc:	4629      	mov	r1, r5
 8003afe:	eb43 0901 	adc.w	r9, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b16:	4690      	mov	r8, r2
 8003b18:	4699      	mov	r9, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb18 0303 	adds.w	r3, r8, r3
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b24:	462b      	mov	r3, r5
 8003b26:	eb49 0303 	adc.w	r3, r9, r3
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b42:	460b      	mov	r3, r1
 8003b44:	18db      	adds	r3, r3, r3
 8003b46:	653b      	str	r3, [r7, #80]	; 0x50
 8003b48:	4613      	mov	r3, r2
 8003b4a:	eb42 0303 	adc.w	r3, r2, r3
 8003b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8003b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b58:	f7fc fb92 	bl	8000280 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b61      	ldr	r3, [pc, #388]	; (8003ce8 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8003b84:	415b      	adcs	r3, r3
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b92:	4649      	mov	r1, r9
 8003b94:	eb43 0b01 	adc.w	fp, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bac:	4692      	mov	sl, r2
 8003bae:	469b      	mov	fp, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	18db      	adds	r3, r3, r3
 8003bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8003bde:	4613      	mov	r3, r2
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
 8003be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003bee:	f7fc fb47 	bl	8000280 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	; (8003ce8 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2264      	movs	r2, #100	; 0x64
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	1acb      	subs	r3, r1, r3
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c0e:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 2302 	umull	r2, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6339      	str	r1, [r7, #48]	; 0x30
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c94:	460b      	mov	r3, r1
 8003c96:	18db      	adds	r3, r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003caa:	f7fc fae9 	bl	8000280 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	; 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	3332      	adds	r3, #50	; 0x32
 8003cc6:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <UART_SetConfig+0x2d4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4422      	add	r2, r4
 8003cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cdc:	e105      	b.n	8003eea <UART_SetConfig+0x4d6>
 8003cde:	bf00      	nop
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	6239      	str	r1, [r7, #32]
 8003d06:	415b      	adcs	r3, r3
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1854      	adds	r4, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0501 	adc.w	r5, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d34:	464b      	mov	r3, r9
 8003d36:	eb45 0303 	adc.w	r3, r5, r3
 8003d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	008b      	lsls	r3, r1, #2
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d64:	4621      	mov	r1, r4
 8003d66:	008a      	lsls	r2, r1, #2
 8003d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d6c:	f7fc fa88 	bl	8000280 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b60      	ldr	r3, [pc, #384]	; (8003ef8 <UART_SetConfig+0x4e4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011c      	lsls	r4, r3, #4
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	61b9      	str	r1, [r7, #24]
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	4641      	mov	r1, r8
 8003da2:	1851      	adds	r1, r2, r1
 8003da4:	6139      	str	r1, [r7, #16]
 8003da6:	4649      	mov	r1, r9
 8003da8:	414b      	adcs	r3, r1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db8:	4659      	mov	r1, fp
 8003dba:	00cb      	lsls	r3, r1, #3
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	00ca      	lsls	r2, r1, #3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003df8:	4649      	mov	r1, r9
 8003dfa:	008b      	lsls	r3, r1, #2
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e02:	4641      	mov	r1, r8
 8003e04:	008a      	lsls	r2, r1, #2
 8003e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e0a:	f7fc fa39 	bl	8000280 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <UART_SetConfig+0x4e4>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <UART_SetConfig+0x4e4>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e32:	441c      	add	r4, r3
 8003e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e38:	2200      	movs	r2, #0
 8003e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8003e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8003e3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e42:	4642      	mov	r2, r8
 8003e44:	464b      	mov	r3, r9
 8003e46:	1891      	adds	r1, r2, r2
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e52:	4641      	mov	r1, r8
 8003e54:	1851      	adds	r1, r2, r1
 8003e56:	6039      	str	r1, [r7, #0]
 8003e58:	4649      	mov	r1, r9
 8003e5a:	414b      	adcs	r3, r1
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e6a:	4659      	mov	r1, fp
 8003e6c:	00cb      	lsls	r3, r1, #3
 8003e6e:	4651      	mov	r1, sl
 8003e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e74:	4651      	mov	r1, sl
 8003e76:	00ca      	lsls	r2, r1, #3
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4642      	mov	r2, r8
 8003e80:	189b      	adds	r3, r3, r2
 8003e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e84:	464b      	mov	r3, r9
 8003e86:	460a      	mov	r2, r1
 8003e88:	eb42 0303 	adc.w	r3, r2, r3
 8003e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	663b      	str	r3, [r7, #96]	; 0x60
 8003e98:	667a      	str	r2, [r7, #100]	; 0x64
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	f04f 0300 	mov.w	r3, #0
 8003ea2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	008b      	lsls	r3, r1, #2
 8003eaa:	4641      	mov	r1, r8
 8003eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	008a      	lsls	r2, r1, #2
 8003eb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003eb8:	f7fc f9e2 	bl	8000280 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <UART_SetConfig+0x4e4>)
 8003ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2164      	movs	r1, #100	; 0x64
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <UART_SetConfig+0x4e4>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4422      	add	r2, r4
 8003ee8:	609a      	str	r2, [r3, #8]
}
 8003eea:	bf00      	nop
 8003eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef6:	bf00      	nop
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003efc:	b084      	sub	sp, #16
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	f107 001c 	add.w	r0, r7, #28
 8003f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d122      	bne.n	8003f5a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f001 fbee 	bl	8005730 <USB_CoreReset>
 8003f54:	4603      	mov	r3, r0
 8003f56:	73fb      	strb	r3, [r7, #15]
 8003f58:	e01a      	b.n	8003f90 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f001 fbe2 	bl	8005730 <USB_CoreReset>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d106      	bne.n	8003f84 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
 8003f82:	e005      	b.n	8003f90 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10b      	bne.n	8003fae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f043 0206 	orr.w	r2, r3, #6
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f043 0220 	orr.w	r2, r3, #32
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fba:	b004      	add	sp, #16
 8003fbc:	4770      	bx	lr
	...

08003fc0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d165      	bne.n	80040a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4a41      	ldr	r2, [pc, #260]	; (80040dc <USB_SetTurnaroundTime+0x11c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d906      	bls.n	8003fea <USB_SetTurnaroundTime+0x2a>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4a40      	ldr	r2, [pc, #256]	; (80040e0 <USB_SetTurnaroundTime+0x120>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d202      	bcs.n	8003fea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	e062      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	4a3c      	ldr	r2, [pc, #240]	; (80040e0 <USB_SetTurnaroundTime+0x120>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d306      	bcc.n	8004000 <USB_SetTurnaroundTime+0x40>
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	4a3b      	ldr	r2, [pc, #236]	; (80040e4 <USB_SetTurnaroundTime+0x124>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d202      	bcs.n	8004000 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ffa:	230e      	movs	r3, #14
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	e057      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4a38      	ldr	r2, [pc, #224]	; (80040e4 <USB_SetTurnaroundTime+0x124>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d306      	bcc.n	8004016 <USB_SetTurnaroundTime+0x56>
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4a37      	ldr	r2, [pc, #220]	; (80040e8 <USB_SetTurnaroundTime+0x128>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d202      	bcs.n	8004016 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004010:	230d      	movs	r3, #13
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e04c      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4a33      	ldr	r2, [pc, #204]	; (80040e8 <USB_SetTurnaroundTime+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d306      	bcc.n	800402c <USB_SetTurnaroundTime+0x6c>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4a32      	ldr	r2, [pc, #200]	; (80040ec <USB_SetTurnaroundTime+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d802      	bhi.n	800402c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004026:	230c      	movs	r3, #12
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e041      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <USB_SetTurnaroundTime+0x12c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d906      	bls.n	8004042 <USB_SetTurnaroundTime+0x82>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <USB_SetTurnaroundTime+0x130>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d802      	bhi.n	8004042 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800403c:	230b      	movs	r3, #11
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e036      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4a2a      	ldr	r2, [pc, #168]	; (80040f0 <USB_SetTurnaroundTime+0x130>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d906      	bls.n	8004058 <USB_SetTurnaroundTime+0x98>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <USB_SetTurnaroundTime+0x134>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d802      	bhi.n	8004058 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004052:	230a      	movs	r3, #10
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e02b      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <USB_SetTurnaroundTime+0x134>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d906      	bls.n	800406e <USB_SetTurnaroundTime+0xae>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <USB_SetTurnaroundTime+0x138>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d202      	bcs.n	800406e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004068:	2309      	movs	r3, #9
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e020      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <USB_SetTurnaroundTime+0x138>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d306      	bcc.n	8004084 <USB_SetTurnaroundTime+0xc4>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4a20      	ldr	r2, [pc, #128]	; (80040fc <USB_SetTurnaroundTime+0x13c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d802      	bhi.n	8004084 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800407e:	2308      	movs	r3, #8
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	e015      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4a1d      	ldr	r2, [pc, #116]	; (80040fc <USB_SetTurnaroundTime+0x13c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d906      	bls.n	800409a <USB_SetTurnaroundTime+0xda>
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <USB_SetTurnaroundTime+0x140>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d202      	bcs.n	800409a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004094:	2307      	movs	r3, #7
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e00a      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800409a:	2306      	movs	r3, #6
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e007      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d102      	bne.n	80040ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80040a6:	2309      	movs	r3, #9
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	e001      	b.n	80040b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040ac:	2309      	movs	r3, #9
 80040ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	029b      	lsls	r3, r3, #10
 80040c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040c8:	431a      	orrs	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	00d8acbf 	.word	0x00d8acbf
 80040e0:	00e4e1c0 	.word	0x00e4e1c0
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	01067380 	.word	0x01067380
 80040ec:	011a499f 	.word	0x011a499f
 80040f0:	01312cff 	.word	0x01312cff
 80040f4:	014ca43f 	.word	0x014ca43f
 80040f8:	016e3600 	.word	0x016e3600
 80040fc:	01a6ab1f 	.word	0x01a6ab1f
 8004100:	01e84800 	.word	0x01e84800

08004104 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f043 0201 	orr.w	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d115      	bne.n	8004196 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004176:	2001      	movs	r0, #1
 8004178:	f7fc fecc 	bl	8000f14 <HAL_Delay>
      ms++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f001 fa45 	bl	8005612 <USB_GetMode>
 8004188:	4603      	mov	r3, r0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d01e      	beq.n	80041cc <USB_SetCurrentMode+0x84>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b31      	cmp	r3, #49	; 0x31
 8004192:	d9f0      	bls.n	8004176 <USB_SetCurrentMode+0x2e>
 8004194:	e01a      	b.n	80041cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d115      	bne.n	80041c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041a8:	2001      	movs	r0, #1
 80041aa:	f7fc feb3 	bl	8000f14 <HAL_Delay>
      ms++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3301      	adds	r3, #1
 80041b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f001 fa2c 	bl	8005612 <USB_GetMode>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <USB_SetCurrentMode+0x84>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b31      	cmp	r3, #49	; 0x31
 80041c4:	d9f0      	bls.n	80041a8 <USB_SetCurrentMode+0x60>
 80041c6:	e001      	b.n	80041cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e005      	b.n	80041d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b32      	cmp	r3, #50	; 0x32
 80041d0:	d101      	bne.n	80041d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e0:	b084      	sub	sp, #16
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041fa:	2300      	movs	r3, #0
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e009      	b.n	8004214 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3340      	adds	r3, #64	; 0x40
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3301      	adds	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b0e      	cmp	r3, #14
 8004218:	d9f2      	bls.n	8004200 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800421a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11c      	bne.n	800425a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38
 8004258:	e00b      	b.n	8004272 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004278:	461a      	mov	r2, r3
 800427a:	2300      	movs	r3, #0
 800427c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	4619      	mov	r1, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	461a      	mov	r2, r3
 800428e:	680b      	ldr	r3, [r1, #0]
 8004290:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b01      	cmp	r3, #1
 8004296:	d10c      	bne.n	80042b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800429e:	2100      	movs	r1, #0
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f965 	bl	8004570 <USB_SetDevSpeed>
 80042a6:	e008      	b.n	80042ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042a8:	2101      	movs	r1, #1
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f960 	bl	8004570 <USB_SetDevSpeed>
 80042b0:	e003      	b.n	80042ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042b2:	2103      	movs	r1, #3
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f95b 	bl	8004570 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ba:	2110      	movs	r1, #16
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8f3 	bl	80044a8 <USB_FlushTxFifo>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f91f 	bl	8004510 <USB_FlushRxFifo>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	e043      	b.n	800438e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431c:	d118      	bne.n	8004350 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004330:	461a      	mov	r2, r3
 8004332:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e013      	b.n	8004362 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004346:	461a      	mov	r2, r3
 8004348:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	e008      	b.n	8004362 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4413      	add	r3, r2
 8004358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435c:	461a      	mov	r2, r3
 800435e:	2300      	movs	r3, #0
 8004360:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436e:	461a      	mov	r2, r3
 8004370:	2300      	movs	r3, #0
 8004372:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004380:	461a      	mov	r2, r3
 8004382:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004386:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	3301      	adds	r3, #1
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	429a      	cmp	r2, r3
 8004394:	d3b7      	bcc.n	8004306 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	e043      	b.n	8004424 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b2:	d118      	bne.n	80043e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10a      	bne.n	80043d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	461a      	mov	r2, r3
 80043c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e013      	b.n	80043f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043dc:	461a      	mov	r2, r3
 80043de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	e008      	b.n	80043f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	461a      	mov	r2, r3
 80043f4:	2300      	movs	r3, #0
 80043f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004404:	461a      	mov	r2, r3
 8004406:	2300      	movs	r3, #0
 8004408:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	461a      	mov	r2, r3
 8004418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800441c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	3301      	adds	r3, #1
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	429a      	cmp	r2, r3
 800442a:	d3b7      	bcc.n	800439c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800443a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800443e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800444c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f043 0210 	orr.w	r2, r3, #16
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <USB_DevInit+0x2c4>)
 8004466:	4313      	orrs	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800446c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f043 0208 	orr.w	r2, r3, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d107      	bne.n	8004494 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800448c:	f043 0304 	orr.w	r3, r3, #4
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044a0:	b004      	add	sp, #16
 80044a2:	4770      	bx	lr
 80044a4:	803c3800 	.word	0x803c3800

080044a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3301      	adds	r3, #1
 80044ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4a13      	ldr	r2, [pc, #76]	; (800450c <USB_FlushTxFifo+0x64>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d901      	bls.n	80044c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e01b      	b.n	8004500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	daf2      	bge.n	80044b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	019b      	lsls	r3, r3, #6
 80044d8:	f043 0220 	orr.w	r2, r3, #32
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3301      	adds	r3, #1
 80044e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a08      	ldr	r2, [pc, #32]	; (800450c <USB_FlushTxFifo+0x64>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e006      	b.n	8004500 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	d0f0      	beq.n	80044e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	00030d40 	.word	0x00030d40

08004510 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a11      	ldr	r2, [pc, #68]	; (800456c <USB_FlushRxFifo+0x5c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d901      	bls.n	800452e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e018      	b.n	8004560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	daf2      	bge.n	800451c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2210      	movs	r2, #16
 800453e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4a08      	ldr	r2, [pc, #32]	; (800456c <USB_FlushRxFifo+0x5c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e006      	b.n	8004560 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	f003 0310 	and.w	r3, r3, #16
 800455a:	2b10      	cmp	r3, #16
 800455c:	d0f0      	beq.n	8004540 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	00030d40 	.word	0x00030d40

08004570 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b087      	sub	sp, #28
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 0306 	and.w	r3, r3, #6
 80045ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045c2:	2300      	movs	r3, #0
 80045c4:	75fb      	strb	r3, [r7, #23]
 80045c6:	e00a      	b.n	80045de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d002      	beq.n	80045d4 <USB_GetDevSpeed+0x32>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2b06      	cmp	r3, #6
 80045d2:	d102      	bne.n	80045da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045d4:	2302      	movs	r3, #2
 80045d6:	75fb      	strb	r3, [r7, #23]
 80045d8:	e001      	b.n	80045de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045da:	230f      	movs	r3, #15
 80045dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045de:	7dfb      	ldrb	r3, [r7, #23]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d13a      	bne.n	800467e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	2101      	movs	r1, #1
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	b29b      	uxth	r3, r3
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004626:	4313      	orrs	r3, r2
 8004628:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d155      	bne.n	80046ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	791b      	ldrb	r3, [r3, #4]
 800465a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800465c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	059b      	lsls	r3, r3, #22
 8004662:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004664:	4313      	orrs	r3, r2
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e036      	b.n	80046ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	2101      	movs	r1, #1
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	041b      	lsls	r3, r3, #16
 8004696:	68f9      	ldr	r1, [r7, #12]
 8004698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800469c:	4313      	orrs	r3, r2
 800469e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11a      	bne.n	80046ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	015a      	lsls	r2, r3, #5
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4413      	add	r3, r2
 80046be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046d2:	430b      	orrs	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	0151      	lsls	r1, r2, #5
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	440a      	add	r2, r1
 80046de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	785b      	ldrb	r3, [r3, #1]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d161      	bne.n	80047dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800472a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800472e:	d11f      	bne.n	8004770 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800474e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	0151      	lsls	r1, r2, #5
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	440a      	add	r2, r1
 8004766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800476e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	2101      	movs	r1, #1
 8004782:	fa01 f303 	lsl.w	r3, r1, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	68f9      	ldr	r1, [r7, #12]
 800478c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004790:	4013      	ands	r3, r2
 8004792:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	2101      	movs	r1, #1
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	68f9      	ldr	r1, [r7, #12]
 80047b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047b4:	4013      	ands	r3, r2
 80047b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	0159      	lsls	r1, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	440b      	add	r3, r1
 80047ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d2:	4619      	mov	r1, r3
 80047d4:	4b35      	ldr	r3, [pc, #212]	; (80048ac <USB_DeactivateEndpoint+0x1b0>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	600b      	str	r3, [r1, #0]
 80047da:	e060      	b.n	800489e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f2:	d11f      	bne.n	8004834 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004812:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004832:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	43db      	mvns	r3, r3
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004854:	4013      	ands	r3, r2
 8004856:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	041b      	lsls	r3, r3, #16
 8004870:	43db      	mvns	r3, r3
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004878:	4013      	ands	r3, r2
 800487a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	0159      	lsls	r1, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	440b      	add	r3, r1
 8004892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004896:	4619      	mov	r1, r3
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <USB_DeactivateEndpoint+0x1b4>)
 800489a:	4013      	ands	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	ec337800 	.word	0xec337800
 80048b0:	eff37800 	.word	0xeff37800

080048b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	; 0x28
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	f040 815c 	bne.w	8004b8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d132      	bne.n	8004944 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	0cdb      	lsrs	r3, r3, #19
 800493e:	04db      	lsls	r3, r3, #19
 8004940:	6113      	str	r3, [r2, #16]
 8004942:	e074      	b.n	8004a2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495e:	0cdb      	lsrs	r3, r3, #19
 8004960:	04db      	lsls	r3, r3, #19
 8004962:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004982:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004986:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	440b      	add	r3, r1
 80049a0:	1e59      	subs	r1, r3, #1
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049aa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049ac:	4b9d      	ldr	r3, [pc, #628]	; (8004c24 <USB_EPStartXfer+0x370>)
 80049ae:	400b      	ands	r3, r1
 80049b0:	69b9      	ldr	r1, [r7, #24]
 80049b2:	0148      	lsls	r0, r1, #5
 80049b4:	69f9      	ldr	r1, [r7, #28]
 80049b6:	4401      	add	r1, r0
 80049b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049bc:	4313      	orrs	r3, r2
 80049be:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049cc:	691a      	ldr	r2, [r3, #16]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	0148      	lsls	r0, r1, #5
 80049da:	69f9      	ldr	r1, [r7, #28]
 80049dc:	4401      	add	r1, r0
 80049de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049e2:	4313      	orrs	r3, r2
 80049e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	791b      	ldrb	r3, [r3, #4]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d11f      	bne.n	8004a2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	0151      	lsls	r1, r2, #5
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	440a      	add	r2, r1
 8004a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d14b      	bne.n	8004acc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	695b      	ldr	r3, [r3, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d009      	beq.n	8004a50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d128      	bne.n	8004aaa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d110      	bne.n	8004a8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e00f      	b.n	8004aaa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	69fa      	ldr	r2, [r7, #28]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e133      	b.n	8004d34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	0151      	lsls	r1, r2, #5
 8004ade:	69fa      	ldr	r2, [r7, #28]
 8004ae0:	440a      	add	r2, r1
 8004ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d015      	beq.n	8004b20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 811b 	beq.w	8004d34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	2101      	movs	r1, #1
 8004b10:	fa01 f303 	lsl.w	r3, r1, r3
 8004b14:	69f9      	ldr	r1, [r7, #28]
 8004b16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	634b      	str	r3, [r1, #52]	; 0x34
 8004b1e:	e109      	b.n	8004d34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d110      	bne.n	8004b52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	0151      	lsls	r1, r2, #5
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	440a      	add	r2, r1
 8004b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	e00f      	b.n	8004b72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	69fa      	ldr	r2, [r7, #28]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6919      	ldr	r1, [r3, #16]
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	781a      	ldrb	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	b298      	uxth	r0, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4603      	mov	r3, r0
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fade 	bl	8005148 <USB_WritePacket>
 8004b8c:	e0d2      	b.n	8004d34 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	0cdb      	lsrs	r3, r3, #19
 8004baa:	04db      	lsls	r3, r3, #19
 8004bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	69fa      	ldr	r2, [r7, #28]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d126      	bne.n	8004c28 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be6:	691a      	ldr	r2, [r3, #16]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf0:	69b9      	ldr	r1, [r7, #24]
 8004bf2:	0148      	lsls	r0, r1, #5
 8004bf4:	69f9      	ldr	r1, [r7, #28]
 8004bf6:	4401      	add	r1, r0
 8004bf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c1e:	6113      	str	r3, [r2, #16]
 8004c20:	e03a      	b.n	8004c98 <USB_EPStartXfer+0x3e4>
 8004c22:	bf00      	nop
 8004c24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	8afa      	ldrh	r2, [r7, #22]
 8004c44:	fb03 f202 	mul.w	r2, r3, r2
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	691a      	ldr	r2, [r3, #16]
 8004c5a:	8afb      	ldrh	r3, [r7, #22]
 8004c5c:	04d9      	lsls	r1, r3, #19
 8004c5e:	4b38      	ldr	r3, [pc, #224]	; (8004d40 <USB_EPStartXfer+0x48c>)
 8004c60:	400b      	ands	r3, r1
 8004c62:	69b9      	ldr	r1, [r7, #24]
 8004c64:	0148      	lsls	r0, r1, #5
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	4401      	add	r1, r0
 8004c6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c88:	69b9      	ldr	r1, [r7, #24]
 8004c8a:	0148      	lsls	r0, r1, #5
 8004c8c:	69f9      	ldr	r1, [r7, #28]
 8004c8e:	4401      	add	r1, r0
 8004c90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c98:	79fb      	ldrb	r3, [r7, #7]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d10d      	bne.n	8004cba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d009      	beq.n	8004cba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6919      	ldr	r1, [r3, #16]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	791b      	ldrb	r3, [r3, #4]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d128      	bne.n	8004d14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d110      	bne.n	8004cf4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	e00f      	b.n	8004d14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69ba      	ldr	r2, [r7, #24]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3720      	adds	r7, #32
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	1ff80000 	.word	0x1ff80000

08004d44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	785b      	ldrb	r3, [r3, #1]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 80ce 	bne.w	8004f02 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d132      	bne.n	8004dd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	0151      	lsls	r1, r2, #5
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	440a      	add	r2, r1
 8004d84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004db0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dcc:	0cdb      	lsrs	r3, r3, #19
 8004dce:	04db      	lsls	r3, r3, #19
 8004dd0:	6113      	str	r3, [r2, #16]
 8004dd2:	e04e      	b.n	8004e72 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	0cdb      	lsrs	r3, r3, #19
 8004df0:	04db      	lsls	r3, r3, #19
 8004df2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e0e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e12:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e16:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	699a      	ldr	r2, [r3, #24]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d903      	bls.n	8004e2c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	0148      	lsls	r0, r1, #5
 8004e66:	6979      	ldr	r1, [r7, #20]
 8004e68:	4401      	add	r1, r0
 8004e6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d11e      	bne.n	8004eb6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	e097      	b.n	8004fe6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8083 	beq.w	8004fe6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004efc:	4313      	orrs	r3, r2
 8004efe:	634b      	str	r3, [r1, #52]	; 0x34
 8004f00:	e071      	b.n	8004fe6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	0cdb      	lsrs	r3, r3, #19
 8004f1e:	04db      	lsls	r3, r3, #19
 8004f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f44:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f94:	6939      	ldr	r1, [r7, #16]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	6979      	ldr	r1, [r7, #20]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d10d      	bne.n	8004fc6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6919      	ldr	r1, [r3, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fe4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	371c      	adds	r7, #28
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d14a      	bne.n	80050a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502a:	f040 8086 	bne.w	800513a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	7812      	ldrb	r2, [r2, #0]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005050:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	7812      	ldrb	r2, [r2, #0]
 8005066:	0151      	lsls	r1, r2, #5
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	440a      	add	r2, r1
 800506c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005074:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005082:	4293      	cmp	r3, r2
 8005084:	d902      	bls.n	800508c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
          break;
 800508a:	e056      	b.n	800513a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a4:	d0e7      	beq.n	8005076 <USB_EPStopXfer+0x82>
 80050a6:	e048      	b.n	800513a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c0:	d13b      	bne.n	800513a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	7812      	ldrb	r2, [r2, #0]
 80050d6:	0151      	lsls	r1, r2, #5
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	440a      	add	r2, r1
 80050dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005108:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f242 7210 	movw	r2, #10000	; 0x2710
 8005116:	4293      	cmp	r3, r2
 8005118:	d902      	bls.n	8005120 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
          break;
 800511e:	e00c      	b.n	800513a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005138:	d0e7      	beq.n	800510a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005148:	b480      	push	{r7}
 800514a:	b089      	sub	sp, #36	; 0x24
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	4611      	mov	r1, r2
 8005154:	461a      	mov	r2, r3
 8005156:	460b      	mov	r3, r1
 8005158:	71fb      	strb	r3, [r7, #7]
 800515a:	4613      	mov	r3, r2
 800515c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005166:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d123      	bne.n	80051b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800516e:	88bb      	ldrh	r3, [r7, #4]
 8005170:	3303      	adds	r3, #3
 8005172:	089b      	lsrs	r3, r3, #2
 8005174:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	e018      	b.n	80051ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	031a      	lsls	r2, r3, #12
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	4413      	add	r3, r2
 8005184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005188:	461a      	mov	r2, r3
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3301      	adds	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3301      	adds	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3301      	adds	r3, #1
 80051a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d3e2      	bcc.n	800517c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3724      	adds	r7, #36	; 0x24
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b08b      	sub	sp, #44	; 0x2c
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051da:	88fb      	ldrh	r3, [r7, #6]
 80051dc:	089b      	lsrs	r3, r3, #2
 80051de:	b29b      	uxth	r3, r3
 80051e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	623b      	str	r3, [r7, #32]
 80051ee:	e014      	b.n	800521a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	3301      	adds	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	3301      	adds	r3, #1
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	3301      	adds	r3, #1
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	3301      	adds	r3, #1
 8005218:	623b      	str	r3, [r7, #32]
 800521a:	6a3a      	ldr	r2, [r7, #32]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	429a      	cmp	r2, r3
 8005220:	d3e6      	bcc.n	80051f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005222:	8bfb      	ldrh	r3, [r7, #30]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01e      	beq.n	8005266 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005232:	461a      	mov	r2, r3
 8005234:	f107 0310 	add.w	r3, r7, #16
 8005238:	6812      	ldr	r2, [r2, #0]
 800523a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	b2da      	uxtb	r2, r3
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	701a      	strb	r2, [r3, #0]
      i++;
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	3301      	adds	r3, #1
 8005252:	623b      	str	r3, [r7, #32]
      pDest++;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	3301      	adds	r3, #1
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800525a:	8bfb      	ldrh	r3, [r7, #30]
 800525c:	3b01      	subs	r3, #1
 800525e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005260:	8bfb      	ldrh	r3, [r7, #30]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1ea      	bne.n	800523c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005268:	4618      	mov	r0, r3
 800526a:	372c      	adds	r7, #44	; 0x2c
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d12c      	bne.n	80052ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	db12      	blt.n	80052c8 <USB_EPSetStall+0x54>
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	e02b      	b.n	8005342 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	db12      	blt.n	8005322 <USB_EPSetStall+0xae>
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00f      	beq.n	8005322 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005320:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	440a      	add	r2, r1
 8005338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800533c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005340:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d128      	bne.n	80053be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800538a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	791b      	ldrb	r3, [r3, #4]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d003      	beq.n	800539c <USB_EPClearStall+0x4c>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	2b02      	cmp	r3, #2
 800539a:	d138      	bne.n	800540e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e027      	b.n	800540e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	791b      	ldrb	r3, [r3, #4]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d003      	beq.n	80053ee <USB_EPClearStall+0x9e>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	791b      	ldrb	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d10f      	bne.n	800540e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800540c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800543a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800543e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005450:	68f9      	ldr	r1, [r7, #12]
 8005452:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005456:	4313      	orrs	r3, r2
 8005458:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005482:	f023 0303 	bic.w	r3, r3, #3
 8005486:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005496:	f023 0302 	bic.w	r3, r3, #2
 800549a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054c4:	f023 0303 	bic.w	r3, r3, #3
 80054c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4013      	ands	r3, r2
 8005502:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	4013      	ands	r3, r2
 8005534:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0c1b      	lsrs	r3, r3, #16
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005562:	69db      	ldr	r3, [r3, #28]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	4013      	ands	r3, r2
 8005568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	b29b      	uxth	r3, r3
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055a8:	68bb      	ldr	r3, [r7, #8]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	fa22 f303 	lsr.w	r3, r2, r3
 80055e6:	01db      	lsls	r3, r3, #7
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	4013      	ands	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005604:	68bb      	ldr	r3, [r7, #8]
}
 8005606:	4618      	mov	r0, r3
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0301 	and.w	r3, r3, #1
}
 8005622:	4618      	mov	r0, r3
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005664:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	460b      	mov	r3, r1
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	333c      	adds	r3, #60	; 0x3c
 800568a:	3304      	adds	r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4a26      	ldr	r2, [pc, #152]	; (800572c <USB_EP0_OutStart+0xb8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d90a      	bls.n	80056ae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a8:	d101      	bne.n	80056ae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e037      	b.n	800571e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	461a      	mov	r2, r3
 80056b6:	2300      	movs	r3, #0
 80056b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056dc:	f043 0318 	orr.w	r3, r3, #24
 80056e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056f4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056f6:	7afb      	ldrb	r3, [r7, #11]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d10f      	bne.n	800571c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	461a      	mov	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005716:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800571a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	4f54300a 	.word	0x4f54300a

08005730 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <USB_CoreReset+0x64>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e01b      	b.n	8005786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	daf2      	bge.n	800573c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f043 0201 	orr.w	r2, r3, #1
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3301      	adds	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4a09      	ldr	r2, [pc, #36]	; (8005794 <USB_CoreReset+0x64>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d901      	bls.n	8005778 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e006      	b.n	8005786 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b01      	cmp	r3, #1
 8005782:	d0f0      	beq.n	8005766 <USB_CoreReset+0x36>

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	00030d40 	.word	0x00030d40

08005798 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80057a4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80057a8:	f002 fc8a 	bl	80080c0 <USBD_static_malloc>
 80057ac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d109      	bne.n	80057c8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	2100      	movs	r1, #0
 80057c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057c4:	2302      	movs	r3, #2
 80057c6:	e0d4      	b.n	8005972 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057c8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057cc:	2100      	movs	r1, #0
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f002 fce4 	bl	800819c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	32b0      	adds	r2, #176	; 0xb0
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	32b0      	adds	r2, #176	; 0xb0
 80057ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7c1b      	ldrb	r3, [r3, #16]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d138      	bne.n	8005872 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005800:	4b5e      	ldr	r3, [pc, #376]	; (800597c <USBD_CDC_Init+0x1e4>)
 8005802:	7819      	ldrb	r1, [r3, #0]
 8005804:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005808:	2202      	movs	r2, #2
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f002 fb35 	bl	8007e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005810:	4b5a      	ldr	r3, [pc, #360]	; (800597c <USBD_CDC_Init+0x1e4>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	f003 020f 	and.w	r2, r3, #15
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	3324      	adds	r3, #36	; 0x24
 8005826:	2201      	movs	r2, #1
 8005828:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800582a:	4b55      	ldr	r3, [pc, #340]	; (8005980 <USBD_CDC_Init+0x1e8>)
 800582c:	7819      	ldrb	r1, [r3, #0]
 800582e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005832:	2202      	movs	r2, #2
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f002 fb20 	bl	8007e7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800583a:	4b51      	ldr	r3, [pc, #324]	; (8005980 <USBD_CDC_Init+0x1e8>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	f003 020f 	and.w	r2, r3, #15
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005852:	2201      	movs	r2, #1
 8005854:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005856:	4b4b      	ldr	r3, [pc, #300]	; (8005984 <USBD_CDC_Init+0x1ec>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	3326      	adds	r3, #38	; 0x26
 800586c:	2210      	movs	r2, #16
 800586e:	801a      	strh	r2, [r3, #0]
 8005870:	e035      	b.n	80058de <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005872:	4b42      	ldr	r3, [pc, #264]	; (800597c <USBD_CDC_Init+0x1e4>)
 8005874:	7819      	ldrb	r1, [r3, #0]
 8005876:	2340      	movs	r3, #64	; 0x40
 8005878:	2202      	movs	r2, #2
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f002 fafd 	bl	8007e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005880:	4b3e      	ldr	r3, [pc, #248]	; (800597c <USBD_CDC_Init+0x1e4>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3324      	adds	r3, #36	; 0x24
 8005896:	2201      	movs	r2, #1
 8005898:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800589a:	4b39      	ldr	r3, [pc, #228]	; (8005980 <USBD_CDC_Init+0x1e8>)
 800589c:	7819      	ldrb	r1, [r3, #0]
 800589e:	2340      	movs	r3, #64	; 0x40
 80058a0:	2202      	movs	r2, #2
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f002 fae9 	bl	8007e7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058a8:	4b35      	ldr	r3, [pc, #212]	; (8005980 <USBD_CDC_Init+0x1e8>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	f003 020f 	and.w	r2, r3, #15
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	4613      	mov	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	4413      	add	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058c0:	2201      	movs	r2, #1
 80058c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058c4:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <USBD_CDC_Init+0x1ec>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	6879      	ldr	r1, [r7, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	3326      	adds	r3, #38	; 0x26
 80058da:	2210      	movs	r2, #16
 80058dc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058de:	4b29      	ldr	r3, [pc, #164]	; (8005984 <USBD_CDC_Init+0x1ec>)
 80058e0:	7819      	ldrb	r1, [r3, #0]
 80058e2:	2308      	movs	r3, #8
 80058e4:	2203      	movs	r2, #3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f002 fac7 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058ec:	4b25      	ldr	r3, [pc, #148]	; (8005984 <USBD_CDC_Init+0x1ec>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	440b      	add	r3, r1
 8005900:	3324      	adds	r3, #36	; 0x24
 8005902:	2201      	movs	r2, #1
 8005904:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	33b0      	adds	r3, #176	; 0xb0
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800593c:	2302      	movs	r3, #2
 800593e:	e018      	b.n	8005972 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	7c1b      	ldrb	r3, [r3, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10a      	bne.n	800595e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005948:	4b0d      	ldr	r3, [pc, #52]	; (8005980 <USBD_CDC_Init+0x1e8>)
 800594a:	7819      	ldrb	r1, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f002 fb7e 	bl	8008058 <USBD_LL_PrepareReceive>
 800595c:	e008      	b.n	8005970 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800595e:	4b08      	ldr	r3, [pc, #32]	; (8005980 <USBD_CDC_Init+0x1e8>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005968:	2340      	movs	r3, #64	; 0x40
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f002 fb74 	bl	8008058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000093 	.word	0x20000093
 8005980:	20000094 	.word	0x20000094
 8005984:	20000095 	.word	0x20000095

08005988 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005994:	4b3a      	ldr	r3, [pc, #232]	; (8005a80 <USBD_CDC_DeInit+0xf8>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f002 fa93 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80059a0:	4b37      	ldr	r3, [pc, #220]	; (8005a80 <USBD_CDC_DeInit+0xf8>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	f003 020f 	and.w	r2, r3, #15
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2200      	movs	r2, #0
 80059b8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059ba:	4b32      	ldr	r3, [pc, #200]	; (8005a84 <USBD_CDC_DeInit+0xfc>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	4619      	mov	r1, r3
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f002 fa80 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059c6:	4b2f      	ldr	r3, [pc, #188]	; (8005a84 <USBD_CDC_DeInit+0xfc>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	f003 020f 	and.w	r2, r3, #15
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	440b      	add	r3, r1
 80059da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059de:	2200      	movs	r2, #0
 80059e0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059e2:	4b29      	ldr	r3, [pc, #164]	; (8005a88 <USBD_CDC_DeInit+0x100>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f002 fa6c 	bl	8007ec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059ee:	4b26      	ldr	r3, [pc, #152]	; (8005a88 <USBD_CDC_DeInit+0x100>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f003 020f 	and.w	r2, r3, #15
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	440b      	add	r3, r1
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	2200      	movs	r2, #0
 8005a06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <USBD_CDC_DeInit+0x100>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3326      	adds	r3, #38	; 0x26
 8005a1e:	2200      	movs	r2, #0
 8005a20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	32b0      	adds	r2, #176	; 0xb0
 8005a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01f      	beq.n	8005a74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	33b0      	adds	r3, #176	; 0xb0
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	32b0      	adds	r2, #176	; 0xb0
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f002 fb40 	bl	80080dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	32b0      	adds	r2, #176	; 0xb0
 8005a66:	2100      	movs	r1, #0
 8005a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000093 	.word	0x20000093
 8005a84:	20000094 	.word	0x20000094
 8005a88:	20000095 	.word	0x20000095

08005a8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	32b0      	adds	r2, #176	; 0xb0
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e0bf      	b.n	8005c3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d050      	beq.n	8005b6a <USBD_CDC_Setup+0xde>
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	f040 80af 	bne.w	8005c2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	88db      	ldrh	r3, [r3, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d03a      	beq.n	8005b4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	da1b      	bge.n	8005b18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	33b0      	adds	r3, #176	; 0xb0
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005af6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	88d2      	ldrh	r2, [r2, #6]
 8005afc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	88db      	ldrh	r3, [r3, #6]
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	bf28      	it	cs
 8005b06:	2307      	movcs	r3, #7
 8005b08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	89fa      	ldrh	r2, [r7, #14]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 fd89 	bl	8007628 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b16:	e090      	b.n	8005c3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785a      	ldrb	r2, [r3, #1]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	88db      	ldrh	r3, [r3, #6]
 8005b26:	2b3f      	cmp	r3, #63	; 0x3f
 8005b28:	d803      	bhi.n	8005b32 <USBD_CDC_Setup+0xa6>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	88db      	ldrh	r3, [r3, #6]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	e000      	b.n	8005b34 <USBD_CDC_Setup+0xa8>
 8005b32:	2240      	movs	r2, #64	; 0x40
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b3a:	6939      	ldr	r1, [r7, #16]
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b42:	461a      	mov	r2, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f001 fd9b 	bl	8007680 <USBD_CtlPrepareRx>
      break;
 8005b4a:	e076      	b.n	8005c3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	33b0      	adds	r3, #176	; 0xb0
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	7850      	ldrb	r0, [r2, #1]
 8005b62:	2200      	movs	r2, #0
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4798      	blx	r3
      break;
 8005b68:	e067      	b.n	8005c3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	2b0b      	cmp	r3, #11
 8005b70:	d851      	bhi.n	8005c16 <USBD_CDC_Setup+0x18a>
 8005b72:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <USBD_CDC_Setup+0xec>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005ba9 	.word	0x08005ba9
 8005b7c:	08005c25 	.word	0x08005c25
 8005b80:	08005c17 	.word	0x08005c17
 8005b84:	08005c17 	.word	0x08005c17
 8005b88:	08005c17 	.word	0x08005c17
 8005b8c:	08005c17 	.word	0x08005c17
 8005b90:	08005c17 	.word	0x08005c17
 8005b94:	08005c17 	.word	0x08005c17
 8005b98:	08005c17 	.word	0x08005c17
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005bd3 	.word	0x08005bd3
 8005ba4:	08005bfd 	.word	0x08005bfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d107      	bne.n	8005bc4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005bb4:	f107 030a 	add.w	r3, r7, #10
 8005bb8:	2202      	movs	r2, #2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 fd33 	bl	8007628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bc2:	e032      	b.n	8005c2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fcbd 	bl	8007546 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd0:	e02b      	b.n	8005c2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	d107      	bne.n	8005bee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bde:	f107 030d 	add.w	r3, r7, #13
 8005be2:	2201      	movs	r2, #1
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f001 fd1e 	bl	8007628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bec:	e01d      	b.n	8005c2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 fca8 	bl	8007546 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bfa:	e016      	b.n	8005c2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b03      	cmp	r3, #3
 8005c06:	d00f      	beq.n	8005c28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fc9b 	bl	8007546 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c10:	2303      	movs	r3, #3
 8005c12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c14:	e008      	b.n	8005c28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f001 fc94 	bl	8007546 <USBD_CtlError>
          ret = USBD_FAIL;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	75fb      	strb	r3, [r7, #23]
          break;
 8005c22:	e002      	b.n	8005c2a <USBD_CDC_Setup+0x19e>
          break;
 8005c24:	bf00      	nop
 8005c26:	e008      	b.n	8005c3a <USBD_CDC_Setup+0x1ae>
          break;
 8005c28:	bf00      	nop
      }
      break;
 8005c2a:	e006      	b.n	8005c3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c2c:	6839      	ldr	r1, [r7, #0]
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f001 fc89 	bl	8007546 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c34:	2303      	movs	r3, #3
 8005c36:	75fb      	strb	r3, [r7, #23]
      break;
 8005c38:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	32b0      	adds	r2, #176	; 0xb0
 8005c62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e065      	b.n	8005d3a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	32b0      	adds	r2, #176	; 0xb0
 8005c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c7e:	78fb      	ldrb	r3, [r7, #3]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	4613      	mov	r3, r2
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	3318      	adds	r3, #24
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d02f      	beq.n	8005cf8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c98:	78fb      	ldrb	r3, [r7, #3]
 8005c9a:	f003 020f 	and.w	r2, r3, #15
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	440b      	add	r3, r1
 8005caa:	3318      	adds	r3, #24
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	f003 010f 	and.w	r1, r3, #15
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	00db      	lsls	r3, r3, #3
 8005cba:	440b      	add	r3, r1
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4403      	add	r3, r0
 8005cc0:	3348      	adds	r3, #72	; 0x48
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d112      	bne.n	8005cf8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cd2:	78fb      	ldrb	r3, [r7, #3]
 8005cd4:	f003 020f 	and.w	r2, r3, #15
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cea:	78f9      	ldrb	r1, [r7, #3]
 8005cec:	2300      	movs	r3, #0
 8005cee:	2200      	movs	r2, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f002 f990 	bl	8008016 <USBD_LL_Transmit>
 8005cf6:	e01f      	b.n	8005d38 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	33b0      	adds	r3, #176	; 0xb0
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d010      	beq.n	8005d38 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	33b0      	adds	r3, #176	; 0xb0
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d34:	78fa      	ldrb	r2, [r7, #3]
 8005d36:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	32b0      	adds	r2, #176	; 0xb0
 8005d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	32b0      	adds	r2, #176	; 0xb0
 8005d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d101      	bne.n	8005d74 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e01a      	b.n	8005daa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f002 f98e 	bl	800809a <USBD_LL_GetRxDataSize>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	33b0      	adds	r3, #176	; 0xb0
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005da4:	4611      	mov	r1, r2
 8005da6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005db2:	b580      	push	{r7, lr}
 8005db4:	b084      	sub	sp, #16
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	32b0      	adds	r2, #176	; 0xb0
 8005dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e025      	b.n	8005e20 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	33b0      	adds	r3, #176	; 0xb0
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01a      	beq.n	8005e1e <USBD_CDC_EP0_RxReady+0x6c>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dee:	2bff      	cmp	r3, #255	; 0xff
 8005df0:	d015      	beq.n	8005e1e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	33b0      	adds	r3, #176	; 0xb0
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005e0a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e12:	b292      	uxth	r2, r2
 8005e14:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	22ff      	movs	r2, #255	; 0xff
 8005e1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e30:	2182      	movs	r1, #130	; 0x82
 8005e32:	4818      	ldr	r0, [pc, #96]	; (8005e94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e34:	f000 fd4f 	bl	80068d6 <USBD_GetEpDesc>
 8005e38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	4815      	ldr	r0, [pc, #84]	; (8005e94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e3e:	f000 fd4a 	bl	80068d6 <USBD_GetEpDesc>
 8005e42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e44:	2181      	movs	r1, #129	; 0x81
 8005e46:	4813      	ldr	r0, [pc, #76]	; (8005e94 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e48:	f000 fd45 	bl	80068d6 <USBD_GetEpDesc>
 8005e4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2210      	movs	r2, #16
 8005e58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e68:	711a      	strb	r2, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d006      	beq.n	8005e82 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7c:	711a      	strb	r2, [r3, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2243      	movs	r2, #67	; 0x43
 8005e86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e88:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000050 	.word	0x20000050

08005e98 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ea0:	2182      	movs	r1, #130	; 0x82
 8005ea2:	4818      	ldr	r0, [pc, #96]	; (8005f04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ea4:	f000 fd17 	bl	80068d6 <USBD_GetEpDesc>
 8005ea8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005eaa:	2101      	movs	r1, #1
 8005eac:	4815      	ldr	r0, [pc, #84]	; (8005f04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005eae:	f000 fd12 	bl	80068d6 <USBD_GetEpDesc>
 8005eb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005eb4:	2181      	movs	r1, #129	; 0x81
 8005eb6:	4813      	ldr	r0, [pc, #76]	; (8005f04 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005eb8:	f000 fd0d 	bl	80068d6 <USBD_GetEpDesc>
 8005ebc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2210      	movs	r2, #16
 8005ec8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d006      	beq.n	8005ede <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	711a      	strb	r2, [r3, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f042 0202 	orr.w	r2, r2, #2
 8005edc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d006      	beq.n	8005ef2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	711a      	strb	r2, [r3, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f042 0202 	orr.w	r2, r2, #2
 8005ef0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2243      	movs	r2, #67	; 0x43
 8005ef6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ef8:	4b02      	ldr	r3, [pc, #8]	; (8005f04 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	20000050 	.word	0x20000050

08005f08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f10:	2182      	movs	r1, #130	; 0x82
 8005f12:	4818      	ldr	r0, [pc, #96]	; (8005f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f14:	f000 fcdf 	bl	80068d6 <USBD_GetEpDesc>
 8005f18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4815      	ldr	r0, [pc, #84]	; (8005f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f1e:	f000 fcda 	bl	80068d6 <USBD_GetEpDesc>
 8005f22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f24:	2181      	movs	r1, #129	; 0x81
 8005f26:	4813      	ldr	r0, [pc, #76]	; (8005f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f28:	f000 fcd5 	bl	80068d6 <USBD_GetEpDesc>
 8005f2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2210      	movs	r2, #16
 8005f38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d006      	beq.n	8005f4e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f48:	711a      	strb	r2, [r3, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d006      	beq.n	8005f62 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5c:	711a      	strb	r2, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2243      	movs	r2, #67	; 0x43
 8005f66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000050 	.word	0x20000050

08005f78 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	220a      	movs	r2, #10
 8005f84:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f86:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr
 8005f94:	2000000c 	.word	0x2000000c

08005f98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e009      	b.n	8005fc0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	33b0      	adds	r3, #176	; 0xb0
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	32b0      	adds	r2, #176	; 0xb0
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e008      	b.n	8006004 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	32b0      	adds	r2, #176	; 0xb0
 8006024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006028:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006030:	2303      	movs	r3, #3
 8006032:	e004      	b.n	800603e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	; 0xb0
 800605e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006062:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	32b0      	adds	r2, #176	; 0xb0
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800607a:	2303      	movs	r3, #3
 800607c:	e025      	b.n	80060ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11f      	bne.n	80060c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2201      	movs	r2, #1
 800608c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006090:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <USBD_CDC_TransmitPacket+0x88>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4613      	mov	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4403      	add	r3, r0
 80060aa:	3318      	adds	r3, #24
 80060ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060ae:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <USBD_CDC_TransmitPacket+0x88>)
 80060b0:	7819      	ldrb	r1, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f001 ffa9 	bl	8008016 <USBD_LL_Transmit>

    ret = USBD_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000093 	.word	0x20000093

080060d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	32b0      	adds	r2, #176	; 0xb0
 80060ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32b0      	adds	r2, #176	; 0xb0
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006102:	2303      	movs	r3, #3
 8006104:	e018      	b.n	8006138 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7c1b      	ldrb	r3, [r3, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800610e:	4b0c      	ldr	r3, [pc, #48]	; (8006140 <USBD_CDC_ReceivePacket+0x68>)
 8006110:	7819      	ldrb	r1, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 ff9b 	bl	8008058 <USBD_LL_PrepareReceive>
 8006122:	e008      	b.n	8006136 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <USBD_CDC_ReceivePacket+0x68>)
 8006126:	7819      	ldrb	r1, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800612e:	2340      	movs	r3, #64	; 0x40
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f001 ff91 	bl	8008058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000094 	.word	0x20000094

08006144 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	e01f      	b.n	800619c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	79fa      	ldrb	r2, [r7, #7]
 800618e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f001 fe0b 	bl	8007dac <USBD_LL_Init>
 8006196:	4603      	mov	r3, r0
 8006198:	75fb      	strb	r3, [r7, #23]

  return ret;
 800619a:	7dfb      	ldrb	r3, [r7, #23]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d101      	bne.n	80061bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e025      	b.n	8006208 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	32ae      	adds	r2, #174	; 0xae
 80061ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	32ae      	adds	r2, #174	; 0xae
 80061e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	f107 020e 	add.w	r2, r7, #14
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	4602      	mov	r2, r0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 fe13 	bl	8007e44 <USBD_LL_Start>
 800621e:	4603      	mov	r3, r0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006230:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	4611      	mov	r1, r2
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
 8006268:	4603      	mov	r3, r0
 800626a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	4611      	mov	r1, r2
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	4798      	blx	r3
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f908 	bl	80074d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d01a      	beq.n	800631c <USBD_LL_SetupStage+0x72>
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d822      	bhi.n	8006330 <USBD_LL_SetupStage+0x86>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <USBD_LL_SetupStage+0x4a>
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d00a      	beq.n	8006308 <USBD_LL_SetupStage+0x5e>
 80062f2:	e01d      	b.n	8006330 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fb5f 	bl	80069c0 <USBD_StdDevReq>
 8006302:	4603      	mov	r3, r0
 8006304:	73fb      	strb	r3, [r7, #15]
      break;
 8006306:	e020      	b.n	800634a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fbc7 	bl	8006aa4 <USBD_StdItfReq>
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
      break;
 800631a:	e016      	b.n	800634a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fc29 	bl	8006b7c <USBD_StdEPReq>
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e00c      	b.n	800634a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006336:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800633a:	b2db      	uxtb	r3, r3
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fde0 	bl	8007f04 <USBD_LL_StallEP>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
      break;
 8006348:	bf00      	nop
  }

  return ret;
 800634a:	7bfb      	ldrb	r3, [r7, #15]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	460b      	mov	r3, r1
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d16e      	bne.n	800644a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006372:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800637a:	2b03      	cmp	r3, #3
 800637c:	f040 8098 	bne.w	80064b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	429a      	cmp	r2, r3
 800638a:	d913      	bls.n	80063b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	1ad2      	subs	r2, r2, r3
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bf28      	it	cs
 80063a6:	4613      	movcs	r3, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f001 f984 	bl	80076ba <USBD_CtlContinueRx>
 80063b2:	e07d      	b.n	80064b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ba:	f003 031f 	and.w	r3, r3, #31
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d014      	beq.n	80063ec <USBD_LL_DataOutStage+0x98>
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d81d      	bhi.n	8006402 <USBD_LL_DataOutStage+0xae>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d002      	beq.n	80063d0 <USBD_LL_DataOutStage+0x7c>
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d003      	beq.n	80063d6 <USBD_LL_DataOutStage+0x82>
 80063ce:	e018      	b.n	8006402 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	75bb      	strb	r3, [r7, #22]
            break;
 80063d4:	e018      	b.n	8006408 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	4619      	mov	r1, r3
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fa5e 	bl	80068a2 <USBD_CoreFindIF>
 80063e6:	4603      	mov	r3, r0
 80063e8:	75bb      	strb	r3, [r7, #22]
            break;
 80063ea:	e00d      	b.n	8006408 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	4619      	mov	r1, r3
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fa60 	bl	80068bc <USBD_CoreFindEP>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75bb      	strb	r3, [r7, #22]
            break;
 8006400:	e002      	b.n	8006408 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	75bb      	strb	r3, [r7, #22]
            break;
 8006406:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006408:	7dbb      	ldrb	r3, [r7, #22]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d119      	bne.n	8006442 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b03      	cmp	r3, #3
 8006418:	d113      	bne.n	8006442 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800641a:	7dba      	ldrb	r2, [r7, #22]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	32ae      	adds	r2, #174	; 0xae
 8006420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800642a:	7dba      	ldrb	r2, [r7, #22]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006432:	7dba      	ldrb	r2, [r7, #22]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	32ae      	adds	r2, #174	; 0xae
 8006438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f001 f94a 	bl	80076dc <USBD_CtlSendStatus>
 8006448:	e032      	b.n	80064b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800644a:	7afb      	ldrb	r3, [r7, #11]
 800644c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006450:	b2db      	uxtb	r3, r3
 8006452:	4619      	mov	r1, r3
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fa31 	bl	80068bc <USBD_CoreFindEP>
 800645a:	4603      	mov	r3, r0
 800645c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800645e:	7dbb      	ldrb	r3, [r7, #22]
 8006460:	2bff      	cmp	r3, #255	; 0xff
 8006462:	d025      	beq.n	80064b0 <USBD_LL_DataOutStage+0x15c>
 8006464:	7dbb      	ldrb	r3, [r7, #22]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d122      	bne.n	80064b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b03      	cmp	r3, #3
 8006474:	d117      	bne.n	80064a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006476:	7dba      	ldrb	r2, [r7, #22]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	32ae      	adds	r2, #174	; 0xae
 800647c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00f      	beq.n	80064a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006486:	7dba      	ldrb	r2, [r7, #22]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800648e:	7dba      	ldrb	r2, [r7, #22]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	32ae      	adds	r2, #174	; 0xae
 8006494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	7afa      	ldrb	r2, [r7, #11]
 800649c:	4611      	mov	r1, r2
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	4798      	blx	r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064a6:	7dfb      	ldrb	r3, [r7, #23]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	e000      	b.n	80064b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	460b      	mov	r3, r1
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064c8:	7afb      	ldrb	r3, [r7, #11]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d16f      	bne.n	80065ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3314      	adds	r3, #20
 80064d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d15a      	bne.n	8006594 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d914      	bls.n	8006514 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	689a      	ldr	r2, [r3, #8]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	1ad2      	subs	r2, r2, r3
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	461a      	mov	r2, r3
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 f8ac 	bl	800765e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006506:	2300      	movs	r3, #0
 8006508:	2200      	movs	r2, #0
 800650a:	2100      	movs	r1, #0
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fda3 	bl	8008058 <USBD_LL_PrepareReceive>
 8006512:	e03f      	b.n	8006594 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	68da      	ldr	r2, [r3, #12]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	429a      	cmp	r2, r3
 800651e:	d11c      	bne.n	800655a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006528:	429a      	cmp	r2, r3
 800652a:	d316      	bcc.n	800655a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006536:	429a      	cmp	r2, r3
 8006538:	d20f      	bcs.n	800655a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800653a:	2200      	movs	r2, #0
 800653c:	2100      	movs	r1, #0
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f001 f88d 	bl	800765e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800654c:	2300      	movs	r3, #0
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f001 fd80 	bl	8008058 <USBD_LL_PrepareReceive>
 8006558:	e01c      	b.n	8006594 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b03      	cmp	r3, #3
 8006564:	d10f      	bne.n	8006586 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006586:	2180      	movs	r1, #128	; 0x80
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f001 fcbb 	bl	8007f04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 f8b7 	bl	8007702 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d03a      	beq.n	8006614 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f7ff fe42 	bl	8006228 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065ac:	e032      	b.n	8006614 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065ae:	7afb      	ldrb	r3, [r7, #11]
 80065b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f97f 	bl	80068bc <USBD_CoreFindEP>
 80065be:	4603      	mov	r3, r0
 80065c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2bff      	cmp	r3, #255	; 0xff
 80065c6:	d025      	beq.n	8006614 <USBD_LL_DataInStage+0x15a>
 80065c8:	7dfb      	ldrb	r3, [r7, #23]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d122      	bne.n	8006614 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d11c      	bne.n	8006614 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065da:	7dfa      	ldrb	r2, [r7, #23]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	32ae      	adds	r2, #174	; 0xae
 80065e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d014      	beq.n	8006614 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80065ea:	7dfa      	ldrb	r2, [r7, #23]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065f2:	7dfa      	ldrb	r2, [r7, #23]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	32ae      	adds	r2, #174	; 0xae
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	7afa      	ldrb	r2, [r7, #11]
 8006600:	4611      	mov	r1, r2
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	4798      	blx	r3
 8006606:	4603      	mov	r3, r0
 8006608:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800660a:	7dbb      	ldrb	r3, [r7, #22]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006610:	7dbb      	ldrb	r3, [r7, #22]
 8006612:	e000      	b.n	8006616 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}

0800661e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d014      	beq.n	8006684 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	4611      	mov	r1, r2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	2200      	movs	r2, #0
 8006688:	2100      	movs	r1, #0
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fbf5 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2240      	movs	r2, #64	; 0x40
 800669c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066a0:	2340      	movs	r3, #64	; 0x40
 80066a2:	2200      	movs	r2, #0
 80066a4:	2180      	movs	r1, #128	; 0x80
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fbe7 	bl	8007e7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2240      	movs	r2, #64	; 0x40
 80066b6:	621a      	str	r2, [r3, #32]

  return ret;
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	78fa      	ldrb	r2, [r7, #3]
 80066d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2204      	movs	r2, #4
 80066fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b04      	cmp	r3, #4
 8006720:	d106      	bne.n	8006730 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b03      	cmp	r3, #3
 8006750:	d110      	bne.n	8006774 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676e:	69db      	ldr	r3, [r3, #28]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b082      	sub	sp, #8
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	32ae      	adds	r2, #174	; 0xae
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e01c      	b.n	80067da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d115      	bne.n	80067d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	32ae      	adds	r2, #174	; 0xae
 80067b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00b      	beq.n	80067d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	32ae      	adds	r2, #174	; 0xae
 80067ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4611      	mov	r1, r2
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	32ae      	adds	r2, #174	; 0xae
 80067f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006800:	2303      	movs	r3, #3
 8006802:	e01c      	b.n	800683e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b03      	cmp	r3, #3
 800680e:	d115      	bne.n	800683c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	32ae      	adds	r2, #174	; 0xae
 800681a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00b      	beq.n	800683c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	32ae      	adds	r2, #174	; 0xae
 800682e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006834:	78fa      	ldrb	r2, [r7, #3]
 8006836:	4611      	mov	r1, r2
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00e      	beq.n	8006898 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6852      	ldr	r2, [r2, #4]
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	4611      	mov	r1, r2
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	4798      	blx	r3
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006894:	2303      	movs	r3, #3
 8006896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006898:	7bfb      	ldrb	r3, [r7, #15]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b083      	sub	sp, #12
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d920      	bls.n	8006940 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	b29b      	uxth	r3, r3
 8006904:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006906:	e013      	b.n	8006930 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006908:	f107 030a 	add.w	r3, r7, #10
 800690c:	4619      	mov	r1, r3
 800690e:	6978      	ldr	r0, [r7, #20]
 8006910:	f000 f81b 	bl	800694a <USBD_GetNextDesc>
 8006914:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	785b      	ldrb	r3, [r3, #1]
 800691a:	2b05      	cmp	r3, #5
 800691c:	d108      	bne.n	8006930 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	789b      	ldrb	r3, [r3, #2]
 8006926:	78fa      	ldrb	r2, [r7, #3]
 8006928:	429a      	cmp	r2, r3
 800692a:	d008      	beq.n	800693e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	b29a      	uxth	r2, r3
 8006936:	897b      	ldrh	r3, [r7, #10]
 8006938:	429a      	cmp	r2, r3
 800693a:	d8e5      	bhi.n	8006908 <USBD_GetEpDesc+0x32>
 800693c:	e000      	b.n	8006940 <USBD_GetEpDesc+0x6a>
          break;
 800693e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006940:	693b      	ldr	r3, [r7, #16]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800694a:	b480      	push	{r7}
 800694c:	b085      	sub	sp, #20
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b29b      	uxth	r3, r3
 8006962:	4413      	add	r3, r2
 8006964:	b29a      	uxth	r2, r3
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006976:	68fb      	ldr	r3, [r7, #12]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	3301      	adds	r3, #1
 800699a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80069a2:	8a3b      	ldrh	r3, [r7, #16]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	b21a      	sxth	r2, r3
 80069a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	b21b      	sxth	r3, r3
 80069b0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069b2:	89fb      	ldrh	r3, [r7, #14]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d6:	2b40      	cmp	r3, #64	; 0x40
 80069d8:	d005      	beq.n	80069e6 <USBD_StdDevReq+0x26>
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d857      	bhi.n	8006a8e <USBD_StdDevReq+0xce>
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <USBD_StdDevReq+0x42>
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d153      	bne.n	8006a8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	32ae      	adds	r2, #174	; 0xae
 80069f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	4798      	blx	r3
 80069fc:	4603      	mov	r3, r0
 80069fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006a00:	e04a      	b.n	8006a98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	2b09      	cmp	r3, #9
 8006a08:	d83b      	bhi.n	8006a82 <USBD_StdDevReq+0xc2>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <USBD_StdDevReq+0x50>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a65 	.word	0x08006a65
 8006a14:	08006a79 	.word	0x08006a79
 8006a18:	08006a83 	.word	0x08006a83
 8006a1c:	08006a6f 	.word	0x08006a6f
 8006a20:	08006a83 	.word	0x08006a83
 8006a24:	08006a43 	.word	0x08006a43
 8006a28:	08006a39 	.word	0x08006a39
 8006a2c:	08006a83 	.word	0x08006a83
 8006a30:	08006a5b 	.word	0x08006a5b
 8006a34:	08006a4d 	.word	0x08006a4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa3c 	bl	8006eb8 <USBD_GetDescriptor>
          break;
 8006a40:	e024      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fba1 	bl	800718c <USBD_SetAddress>
          break;
 8006a4a:	e01f      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fbe0 	bl	8007214 <USBD_SetConfig>
 8006a54:	4603      	mov	r3, r0
 8006a56:	73fb      	strb	r3, [r7, #15]
          break;
 8006a58:	e018      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fc83 	bl	8007368 <USBD_GetConfig>
          break;
 8006a62:	e013      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fcb4 	bl	80073d4 <USBD_GetStatus>
          break;
 8006a6c:	e00e      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fce3 	bl	800743c <USBD_SetFeature>
          break;
 8006a76:	e009      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fd07 	bl	800748e <USBD_ClrFeature>
          break;
 8006a80:	e004      	b.n	8006a8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fd5e 	bl	8007546 <USBD_CtlError>
          break;
 8006a8a:	bf00      	nop
      }
      break;
 8006a8c:	e004      	b.n	8006a98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a8e:	6839      	ldr	r1, [r7, #0]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fd58 	bl	8007546 <USBD_CtlError>
      break;
 8006a96:	bf00      	nop
  }

  return ret;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aba:	2b40      	cmp	r3, #64	; 0x40
 8006abc:	d005      	beq.n	8006aca <USBD_StdItfReq+0x26>
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d852      	bhi.n	8006b68 <USBD_StdItfReq+0xc4>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <USBD_StdItfReq+0x26>
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d14e      	bne.n	8006b68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d840      	bhi.n	8006b5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	889b      	ldrh	r3, [r3, #4]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d836      	bhi.n	8006b50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff fed9 	bl	80068a2 <USBD_CoreFindIF>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2bff      	cmp	r3, #255	; 0xff
 8006af8:	d01d      	beq.n	8006b36 <USBD_StdItfReq+0x92>
 8006afa:	7bbb      	ldrb	r3, [r7, #14]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d11a      	bne.n	8006b36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006b00:	7bba      	ldrb	r2, [r7, #14]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	32ae      	adds	r2, #174	; 0xae
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00f      	beq.n	8006b30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b10:	7bba      	ldrb	r2, [r7, #14]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b18:	7bba      	ldrb	r2, [r7, #14]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32ae      	adds	r2, #174	; 0xae
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	4798      	blx	r3
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b2e:	e004      	b.n	8006b3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b34:	e001      	b.n	8006b3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b36:	2303      	movs	r3, #3
 8006b38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d110      	bne.n	8006b64 <USBD_StdItfReq+0xc0>
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10d      	bne.n	8006b64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fdc7 	bl	80076dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b4e:	e009      	b.n	8006b64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fcf7 	bl	8007546 <USBD_CtlError>
          break;
 8006b58:	e004      	b.n	8006b64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fcf2 	bl	8007546 <USBD_CtlError>
          break;
 8006b62:	e000      	b.n	8006b66 <USBD_StdItfReq+0xc2>
          break;
 8006b64:	bf00      	nop
      }
      break;
 8006b66:	e004      	b.n	8006b72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fceb 	bl	8007546 <USBD_CtlError>
      break;
 8006b70:	bf00      	nop
  }

  return ret;
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	889b      	ldrh	r3, [r3, #4]
 8006b8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d007      	beq.n	8006bac <USBD_StdEPReq+0x30>
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	f200 817f 	bhi.w	8006ea0 <USBD_StdEPReq+0x324>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d02a      	beq.n	8006bfc <USBD_StdEPReq+0x80>
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	f040 817a 	bne.w	8006ea0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fe83 	bl	80068bc <USBD_CoreFindEP>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bba:	7b7b      	ldrb	r3, [r7, #13]
 8006bbc:	2bff      	cmp	r3, #255	; 0xff
 8006bbe:	f000 8174 	beq.w	8006eaa <USBD_StdEPReq+0x32e>
 8006bc2:	7b7b      	ldrb	r3, [r7, #13]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 8170 	bne.w	8006eaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bca:	7b7a      	ldrb	r2, [r7, #13]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bd2:	7b7a      	ldrb	r2, [r7, #13]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	32ae      	adds	r2, #174	; 0xae
 8006bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 8163 	beq.w	8006eaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006be4:	7b7a      	ldrb	r2, [r7, #13]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	32ae      	adds	r2, #174	; 0xae
 8006bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	4798      	blx	r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bfa:	e156      	b.n	8006eaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	785b      	ldrb	r3, [r3, #1]
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d008      	beq.n	8006c16 <USBD_StdEPReq+0x9a>
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	f300 8145 	bgt.w	8006e94 <USBD_StdEPReq+0x318>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 809b 	beq.w	8006d46 <USBD_StdEPReq+0x1ca>
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d03c      	beq.n	8006c8e <USBD_StdEPReq+0x112>
 8006c14:	e13e      	b.n	8006e94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d002      	beq.n	8006c28 <USBD_StdEPReq+0xac>
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d016      	beq.n	8006c54 <USBD_StdEPReq+0xd8>
 8006c26:	e02c      	b.n	8006c82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00d      	beq.n	8006c4a <USBD_StdEPReq+0xce>
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d00a      	beq.n	8006c4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f001 f963 	bl	8007f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c3e:	2180      	movs	r1, #128	; 0x80
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f001 f95f 	bl	8007f04 <USBD_LL_StallEP>
 8006c46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c48:	e020      	b.n	8006c8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fc7a 	bl	8007546 <USBD_CtlError>
              break;
 8006c52:	e01b      	b.n	8006c8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	885b      	ldrh	r3, [r3, #2]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10e      	bne.n	8006c7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00b      	beq.n	8006c7a <USBD_StdEPReq+0xfe>
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b80      	cmp	r3, #128	; 0x80
 8006c66:	d008      	beq.n	8006c7a <USBD_StdEPReq+0xfe>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	88db      	ldrh	r3, [r3, #6]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 f945 	bl	8007f04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fd2e 	bl	80076dc <USBD_CtlSendStatus>

              break;
 8006c80:	e004      	b.n	8006c8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 fc5e 	bl	8007546 <USBD_CtlError>
              break;
 8006c8a:	bf00      	nop
          }
          break;
 8006c8c:	e107      	b.n	8006e9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d002      	beq.n	8006ca0 <USBD_StdEPReq+0x124>
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d016      	beq.n	8006ccc <USBD_StdEPReq+0x150>
 8006c9e:	e04b      	b.n	8006d38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00d      	beq.n	8006cc2 <USBD_StdEPReq+0x146>
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b80      	cmp	r3, #128	; 0x80
 8006caa:	d00a      	beq.n	8006cc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 f927 	bl	8007f04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f001 f923 	bl	8007f04 <USBD_LL_StallEP>
 8006cbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cc0:	e040      	b.n	8006d44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fc3e 	bl	8007546 <USBD_CtlError>
              break;
 8006cca:	e03b      	b.n	8006d44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	885b      	ldrh	r3, [r3, #2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d136      	bne.n	8006d42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cd4:	7bbb      	ldrb	r3, [r7, #14]
 8006cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f001 f92d 	bl	8007f42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fcf7 	bl	80076dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff fde2 	bl	80068bc <USBD_CoreFindEP>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cfc:	7b7b      	ldrb	r3, [r7, #13]
 8006cfe:	2bff      	cmp	r3, #255	; 0xff
 8006d00:	d01f      	beq.n	8006d42 <USBD_StdEPReq+0x1c6>
 8006d02:	7b7b      	ldrb	r3, [r7, #13]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11c      	bne.n	8006d42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006d08:	7b7a      	ldrb	r2, [r7, #13]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d10:	7b7a      	ldrb	r2, [r7, #13]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	32ae      	adds	r2, #174	; 0xae
 8006d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d20:	7b7a      	ldrb	r2, [r7, #13]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32ae      	adds	r2, #174	; 0xae
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d36:	e004      	b.n	8006d42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fc03 	bl	8007546 <USBD_CtlError>
              break;
 8006d40:	e000      	b.n	8006d44 <USBD_StdEPReq+0x1c8>
              break;
 8006d42:	bf00      	nop
          }
          break;
 8006d44:	e0ab      	b.n	8006e9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d002      	beq.n	8006d58 <USBD_StdEPReq+0x1dc>
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d032      	beq.n	8006dbc <USBD_StdEPReq+0x240>
 8006d56:	e097      	b.n	8006e88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <USBD_StdEPReq+0x1f2>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d004      	beq.n	8006d6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d64:	6839      	ldr	r1, [r7, #0]
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fbed 	bl	8007546 <USBD_CtlError>
                break;
 8006d6c:	e091      	b.n	8006e92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da0b      	bge.n	8006d8e <USBD_StdEPReq+0x212>
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3310      	adds	r3, #16
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	e00b      	b.n	8006da6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d8e:	7bbb      	ldrb	r3, [r7, #14]
 8006d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	4413      	add	r3, r2
 8006da4:	3304      	adds	r3, #4
 8006da6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	2200      	movs	r2, #0
 8006dac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2202      	movs	r2, #2
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc37 	bl	8007628 <USBD_CtlSendData>
              break;
 8006dba:	e06a      	b.n	8006e92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006dbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	da11      	bge.n	8006de8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	f003 020f 	and.w	r2, r3, #15
 8006dca:	6879      	ldr	r1, [r7, #4]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	3324      	adds	r3, #36	; 0x24
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d117      	bne.n	8006e0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fbb0 	bl	8007546 <USBD_CtlError>
                  break;
 8006de6:	e054      	b.n	8006e92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006de8:	7bbb      	ldrb	r3, [r7, #14]
 8006dea:	f003 020f 	and.w	r2, r3, #15
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 fb9d 	bl	8007546 <USBD_CtlError>
                  break;
 8006e0c:	e041      	b.n	8006e92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	da0b      	bge.n	8006e2e <USBD_StdEPReq+0x2b2>
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	3310      	adds	r3, #16
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	4413      	add	r3, r2
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	e00b      	b.n	8006e46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	4413      	add	r3, r2
 8006e44:	3304      	adds	r3, #4
 8006e46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <USBD_StdEPReq+0x2d8>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d103      	bne.n	8006e5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e00e      	b.n	8006e7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f001 f88d 	bl	8007f80 <USBD_LL_IsStallEP>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2202      	movs	r2, #2
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fbd1 	bl	8007628 <USBD_CtlSendData>
              break;
 8006e86:	e004      	b.n	8006e92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb5b 	bl	8007546 <USBD_CtlError>
              break;
 8006e90:	bf00      	nop
          }
          break;
 8006e92:	e004      	b.n	8006e9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb55 	bl	8007546 <USBD_CtlError>
          break;
 8006e9c:	bf00      	nop
      }
      break;
 8006e9e:	e005      	b.n	8006eac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006ea0:	6839      	ldr	r1, [r7, #0]
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fb4f 	bl	8007546 <USBD_CtlError>
      break;
 8006ea8:	e000      	b.n	8006eac <USBD_StdEPReq+0x330>
      break;
 8006eaa:	bf00      	nop
  }

  return ret;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	885b      	ldrh	r3, [r3, #2]
 8006ed2:	0a1b      	lsrs	r3, r3, #8
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	2b06      	cmp	r3, #6
 8006eda:	f200 8128 	bhi.w	800712e <USBD_GetDescriptor+0x276>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <USBD_GetDescriptor+0x2c>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006f01 	.word	0x08006f01
 8006ee8:	08006f19 	.word	0x08006f19
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	0800712f 	.word	0x0800712f
 8006ef4:	0800712f 	.word	0x0800712f
 8006ef8:	080070cf 	.word	0x080070cf
 8006efc:	080070fb 	.word	0x080070fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	7c12      	ldrb	r2, [r2, #16]
 8006f0c:	f107 0108 	add.w	r1, r7, #8
 8006f10:	4610      	mov	r0, r2
 8006f12:	4798      	blx	r3
 8006f14:	60f8      	str	r0, [r7, #12]
      break;
 8006f16:	e112      	b.n	800713e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	7c1b      	ldrb	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10d      	bne.n	8006f3c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	f107 0208 	add.w	r2, r7, #8
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	2202      	movs	r2, #2
 8006f38:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f3a:	e100      	b.n	800713e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f107 0208 	add.w	r2, r7, #8
 8006f48:	4610      	mov	r0, r2
 8006f4a:	4798      	blx	r3
 8006f4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	2202      	movs	r2, #2
 8006f54:	701a      	strb	r2, [r3, #0]
      break;
 8006f56:	e0f2      	b.n	800713e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	885b      	ldrh	r3, [r3, #2]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	f200 80ac 	bhi.w	80070bc <USBD_GetDescriptor+0x204>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBD_GetDescriptor+0xb4>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f85 	.word	0x08006f85
 8006f70:	08006fb9 	.word	0x08006fb9
 8006f74:	08006fed 	.word	0x08006fed
 8006f78:	08007021 	.word	0x08007021
 8006f7c:	08007055 	.word	0x08007055
 8006f80:	08007089 	.word	0x08007089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	7c12      	ldrb	r2, [r2, #16]
 8006f9c:	f107 0108 	add.w	r1, r7, #8
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4798      	blx	r3
 8006fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fa6:	e091      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 facb 	bl	8007546 <USBD_CtlError>
            err++;
 8006fb0:	7afb      	ldrb	r3, [r7, #11]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006fb6:	e089      	b.n	80070cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00b      	beq.n	8006fdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	f107 0108 	add.w	r1, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fda:	e077      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fab1 	bl	8007546 <USBD_CtlError>
            err++;
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fea:	e06f      	b.n	80070cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00b      	beq.n	8007010 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	7c12      	ldrb	r2, [r2, #16]
 8007004:	f107 0108 	add.w	r1, r7, #8
 8007008:	4610      	mov	r0, r2
 800700a:	4798      	blx	r3
 800700c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800700e:	e05d      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa97 	bl	8007546 <USBD_CtlError>
            err++;
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	3301      	adds	r3, #1
 800701c:	72fb      	strb	r3, [r7, #11]
          break;
 800701e:	e055      	b.n	80070cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00b      	beq.n	8007044 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	7c12      	ldrb	r2, [r2, #16]
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007042:	e043      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa7d 	bl	8007546 <USBD_CtlError>
            err++;
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	3301      	adds	r3, #1
 8007050:	72fb      	strb	r3, [r7, #11]
          break;
 8007052:	e03b      	b.n	80070cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00b      	beq.n	8007078 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	7c12      	ldrb	r2, [r2, #16]
 800706c:	f107 0108 	add.w	r1, r7, #8
 8007070:	4610      	mov	r0, r2
 8007072:	4798      	blx	r3
 8007074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007076:	e029      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fa63 	bl	8007546 <USBD_CtlError>
            err++;
 8007080:	7afb      	ldrb	r3, [r7, #11]
 8007082:	3301      	adds	r3, #1
 8007084:	72fb      	strb	r3, [r7, #11]
          break;
 8007086:	e021      	b.n	80070cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00b      	beq.n	80070ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	7c12      	ldrb	r2, [r2, #16]
 80070a0:	f107 0108 	add.w	r1, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070aa:	e00f      	b.n	80070cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fa49 	bl	8007546 <USBD_CtlError>
            err++;
 80070b4:	7afb      	ldrb	r3, [r7, #11]
 80070b6:	3301      	adds	r3, #1
 80070b8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ba:	e007      	b.n	80070cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa41 	bl	8007546 <USBD_CtlError>
          err++;
 80070c4:	7afb      	ldrb	r3, [r7, #11]
 80070c6:	3301      	adds	r3, #1
 80070c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070ca:	bf00      	nop
      }
      break;
 80070cc:	e037      	b.n	800713e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7c1b      	ldrb	r3, [r3, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	f107 0208 	add.w	r2, r7, #8
 80070e2:	4610      	mov	r0, r2
 80070e4:	4798      	blx	r3
 80070e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070e8:	e029      	b.n	800713e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fa2a 	bl	8007546 <USBD_CtlError>
        err++;
 80070f2:	7afb      	ldrb	r3, [r7, #11]
 80070f4:	3301      	adds	r3, #1
 80070f6:	72fb      	strb	r3, [r7, #11]
      break;
 80070f8:	e021      	b.n	800713e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	7c1b      	ldrb	r3, [r3, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710a:	f107 0208 	add.w	r2, r7, #8
 800710e:	4610      	mov	r0, r2
 8007110:	4798      	blx	r3
 8007112:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	2207      	movs	r2, #7
 800711a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800711c:	e00f      	b.n	800713e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa10 	bl	8007546 <USBD_CtlError>
        err++;
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	3301      	adds	r3, #1
 800712a:	72fb      	strb	r3, [r7, #11]
      break;
 800712c:	e007      	b.n	800713e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 fa08 	bl	8007546 <USBD_CtlError>
      err++;
 8007136:	7afb      	ldrb	r3, [r7, #11]
 8007138:	3301      	adds	r3, #1
 800713a:	72fb      	strb	r3, [r7, #11]
      break;
 800713c:	bf00      	nop
  }

  if (err != 0U)
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d11e      	bne.n	8007182 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	88db      	ldrh	r3, [r3, #6]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d016      	beq.n	800717a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800714c:	893b      	ldrh	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00e      	beq.n	8007170 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88da      	ldrh	r2, [r3, #6]
 8007156:	893b      	ldrh	r3, [r7, #8]
 8007158:	4293      	cmp	r3, r2
 800715a:	bf28      	it	cs
 800715c:	4613      	movcs	r3, r2
 800715e:	b29b      	uxth	r3, r3
 8007160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007162:	893b      	ldrh	r3, [r7, #8]
 8007164:	461a      	mov	r2, r3
 8007166:	68f9      	ldr	r1, [r7, #12]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa5d 	bl	8007628 <USBD_CtlSendData>
 800716e:	e009      	b.n	8007184 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f9e7 	bl	8007546 <USBD_CtlError>
 8007178:	e004      	b.n	8007184 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 faae 	bl	80076dc <USBD_CtlSendStatus>
 8007180:	e000      	b.n	8007184 <USBD_GetDescriptor+0x2cc>
    return;
 8007182:	bf00      	nop
  }
}
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop

0800718c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	889b      	ldrh	r3, [r3, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d131      	bne.n	8007202 <USBD_SetAddress+0x76>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	88db      	ldrh	r3, [r3, #6]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d12d      	bne.n	8007202 <USBD_SetAddress+0x76>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	885b      	ldrh	r3, [r3, #2]
 80071aa:	2b7f      	cmp	r3, #127	; 0x7f
 80071ac:	d829      	bhi.n	8007202 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d104      	bne.n	80071d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9bc 	bl	8007546 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ce:	e01d      	b.n	800720c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fefb 	bl	8007fd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa7a 	bl	80076dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f6:	e009      	b.n	800720c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007200:	e004      	b.n	800720c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f99e 	bl	8007546 <USBD_CtlError>
  }
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	885b      	ldrh	r3, [r3, #2]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	4b4e      	ldr	r3, [pc, #312]	; (8007364 <USBD_SetConfig+0x150>)
 800722a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800722c:	4b4d      	ldr	r3, [pc, #308]	; (8007364 <USBD_SetConfig+0x150>)
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d905      	bls.n	8007240 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f985 	bl	8007546 <USBD_CtlError>
    return USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	e08c      	b.n	800735a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d002      	beq.n	8007252 <USBD_SetConfig+0x3e>
 800724c:	2b03      	cmp	r3, #3
 800724e:	d029      	beq.n	80072a4 <USBD_SetConfig+0x90>
 8007250:	e075      	b.n	800733e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007252:	4b44      	ldr	r3, [pc, #272]	; (8007364 <USBD_SetConfig+0x150>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d020      	beq.n	800729c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800725a:	4b42      	ldr	r3, [pc, #264]	; (8007364 <USBD_SetConfig+0x150>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007264:	4b3f      	ldr	r3, [pc, #252]	; (8007364 <USBD_SetConfig+0x150>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7fe ffe7 	bl	800623e <USBD_SetClassConfig>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d008      	beq.n	800728c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f962 	bl	8007546 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800728a:	e065      	b.n	8007358 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa25 	bl	80076dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2203      	movs	r2, #3
 8007296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800729a:	e05d      	b.n	8007358 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fa1d 	bl	80076dc <USBD_CtlSendStatus>
      break;
 80072a2:	e059      	b.n	8007358 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <USBD_SetConfig+0x150>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d112      	bne.n	80072d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072b4:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <USBD_SetConfig+0x150>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072be:	4b29      	ldr	r3, [pc, #164]	; (8007364 <USBD_SetConfig+0x150>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7fe ffd6 	bl	8006276 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fa06 	bl	80076dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072d0:	e042      	b.n	8007358 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <USBD_SetConfig+0x150>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d02a      	beq.n	8007336 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7fe ffc4 	bl	8006276 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <USBD_SetConfig+0x150>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072f8:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <USBD_SetConfig+0x150>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fe ff9d 	bl	800623e <USBD_SetClassConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f918 	bl	8007546 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fe ffa9 	bl	8006276 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800732c:	e014      	b.n	8007358 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9d4 	bl	80076dc <USBD_CtlSendStatus>
      break;
 8007334:	e010      	b.n	8007358 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9d0 	bl	80076dc <USBD_CtlSendStatus>
      break;
 800733c:	e00c      	b.n	8007358 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f900 	bl	8007546 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <USBD_SetConfig+0x150>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe ff92 	bl	8006276 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007352:	2303      	movs	r3, #3
 8007354:	73fb      	strb	r3, [r7, #15]
      break;
 8007356:	bf00      	nop
  }

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000260 	.word	0x20000260

08007368 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88db      	ldrh	r3, [r3, #6]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d004      	beq.n	8007384 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f8e2 	bl	8007546 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007382:	e023      	b.n	80073cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	dc02      	bgt.n	8007396 <USBD_GetConfig+0x2e>
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc03      	bgt.n	800739c <USBD_GetConfig+0x34>
 8007394:	e015      	b.n	80073c2 <USBD_GetConfig+0x5a>
 8007396:	2b03      	cmp	r3, #3
 8007398:	d00b      	beq.n	80073b2 <USBD_GetConfig+0x4a>
 800739a:	e012      	b.n	80073c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3308      	adds	r3, #8
 80073a6:	2201      	movs	r2, #1
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f93c 	bl	8007628 <USBD_CtlSendData>
        break;
 80073b0:	e00c      	b.n	80073cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3304      	adds	r3, #4
 80073b6:	2201      	movs	r2, #1
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f934 	bl	8007628 <USBD_CtlSendData>
        break;
 80073c0:	e004      	b.n	80073cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8be 	bl	8007546 <USBD_CtlError>
        break;
 80073ca:	bf00      	nop
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d81e      	bhi.n	800742a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	88db      	ldrh	r3, [r3, #6]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d004      	beq.n	80073fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f8a5 	bl	8007546 <USBD_CtlError>
        break;
 80073fc:	e01a      	b.n	8007434 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f043 0202 	orr.w	r2, r3, #2
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	330c      	adds	r3, #12
 800741e:	2202      	movs	r2, #2
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f900 	bl	8007628 <USBD_CtlSendData>
      break;
 8007428:	e004      	b.n	8007434 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f88a 	bl	8007546 <USBD_CtlError>
      break;
 8007432:	bf00      	nop
  }
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d107      	bne.n	800745e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f940 	bl	80076dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800745c:	e013      	b.n	8007486 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	885b      	ldrh	r3, [r3, #2]
 8007462:	2b02      	cmp	r3, #2
 8007464:	d10b      	bne.n	800747e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	889b      	ldrh	r3, [r3, #4]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	b29b      	uxth	r3, r3
 800746e:	b2da      	uxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f000 f930 	bl	80076dc <USBD_CtlSendStatus>
}
 800747c:	e003      	b.n	8007486 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 f860 	bl	8007546 <USBD_CtlError>
}
 8007486:	bf00      	nop
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	3b01      	subs	r3, #1
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d80b      	bhi.n	80074be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	885b      	ldrh	r3, [r3, #2]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d10c      	bne.n	80074c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f910 	bl	80076dc <USBD_CtlSendStatus>
      }
      break;
 80074bc:	e004      	b.n	80074c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074be:	6839      	ldr	r1, [r7, #0]
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f840 	bl	8007546 <USBD_CtlError>
      break;
 80074c6:	e000      	b.n	80074ca <USBD_ClrFeature+0x3c>
      break;
 80074c8:	bf00      	nop
  }
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b084      	sub	sp, #16
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	781a      	ldrb	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f7ff fa41 	bl	8006984 <SWAPBYTE>
 8007502:	4603      	mov	r3, r0
 8007504:	461a      	mov	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3301      	adds	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fa34 	bl	8006984 <SWAPBYTE>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3301      	adds	r3, #1
 800752e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f7ff fa27 	bl	8006984 <SWAPBYTE>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	80da      	strh	r2, [r3, #6]
}
 800753e:	bf00      	nop
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fcd6 	bl	8007f04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007558:	2100      	movs	r1, #0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fcd2 	bl	8007f04 <USBD_LL_StallEP>
}
 8007560:	bf00      	nop
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d036      	beq.n	80075ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007582:	6938      	ldr	r0, [r7, #16]
 8007584:	f000 f836 	bl	80075f4 <USBD_GetLen>
 8007588:	4603      	mov	r3, r0
 800758a:	3301      	adds	r3, #1
 800758c:	b29b      	uxth	r3, r3
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	4413      	add	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	7812      	ldrb	r2, [r2, #0]
 80075a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	3301      	adds	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4413      	add	r3, r2
 80075ae:	2203      	movs	r2, #3
 80075b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	3301      	adds	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075b8:	e013      	b.n	80075e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	4413      	add	r3, r2
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	3301      	adds	r3, #1
 80075ca:	613b      	str	r3, [r7, #16]
    idx++;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	3301      	adds	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	4413      	add	r3, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
    idx++;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	3301      	adds	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e7      	bne.n	80075ba <USBD_GetString+0x52>
 80075ea:	e000      	b.n	80075ee <USBD_GetString+0x86>
    return;
 80075ec:	bf00      	nop
  }
}
 80075ee:	3718      	adds	r7, #24
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007604:	e005      	b.n	8007612 <USBD_GetLen+0x1e>
  {
    len++;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	3301      	adds	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	3301      	adds	r3, #1
 8007610:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f5      	bne.n	8007606 <USBD_GetLen+0x12>
  }

  return len;
 800761a:	7bfb      	ldrb	r3, [r7, #15]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2202      	movs	r2, #2
 8007638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	2100      	movs	r1, #0
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 fce1 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	2100      	movs	r1, #0
 8007670:	68f8      	ldr	r0, [r7, #12]
 8007672:	f000 fcd0 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2203      	movs	r2, #3
 8007690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	2100      	movs	r1, #0
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f000 fcd4 	bl	8008058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b084      	sub	sp, #16
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	2100      	movs	r1, #0
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fcc3 	bl	8008058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3710      	adds	r7, #16
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}

080076dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2204      	movs	r2, #4
 80076e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076ec:	2300      	movs	r3, #0
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fc8f 	bl	8008016 <USBD_LL_Transmit>

  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2205      	movs	r2, #5
 800770e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007712:	2300      	movs	r3, #0
 8007714:	2200      	movs	r2, #0
 8007716:	2100      	movs	r1, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc9d 	bl	8008058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800772c:	2200      	movs	r2, #0
 800772e:	4912      	ldr	r1, [pc, #72]	; (8007778 <MX_USB_DEVICE_Init+0x50>)
 8007730:	4812      	ldr	r0, [pc, #72]	; (800777c <MX_USB_DEVICE_Init+0x54>)
 8007732:	f7fe fd07 	bl	8006144 <USBD_Init>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800773c:	f7f9 f9d0 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007740:	490f      	ldr	r1, [pc, #60]	; (8007780 <MX_USB_DEVICE_Init+0x58>)
 8007742:	480e      	ldr	r0, [pc, #56]	; (800777c <MX_USB_DEVICE_Init+0x54>)
 8007744:	f7fe fd2e 	bl	80061a4 <USBD_RegisterClass>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800774e:	f7f9 f9c7 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007752:	490c      	ldr	r1, [pc, #48]	; (8007784 <MX_USB_DEVICE_Init+0x5c>)
 8007754:	4809      	ldr	r0, [pc, #36]	; (800777c <MX_USB_DEVICE_Init+0x54>)
 8007756:	f7fe fc1f 	bl	8005f98 <USBD_CDC_RegisterInterface>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007760:	f7f9 f9be 	bl	8000ae0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007764:	4805      	ldr	r0, [pc, #20]	; (800777c <MX_USB_DEVICE_Init+0x54>)
 8007766:	f7fe fd53 	bl	8006210 <USBD_Start>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007770:	f7f9 f9b6 	bl	8000ae0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007774:	bf00      	nop
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200000ac 	.word	0x200000ac
 800777c:	20000264 	.word	0x20000264
 8007780:	20000018 	.word	0x20000018
 8007784:	20000098 	.word	0x20000098

08007788 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800778c:	2200      	movs	r2, #0
 800778e:	4905      	ldr	r1, [pc, #20]	; (80077a4 <CDC_Init_FS+0x1c>)
 8007790:	4805      	ldr	r0, [pc, #20]	; (80077a8 <CDC_Init_FS+0x20>)
 8007792:	f7fe fc1b 	bl	8005fcc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007796:	4905      	ldr	r1, [pc, #20]	; (80077ac <CDC_Init_FS+0x24>)
 8007798:	4803      	ldr	r0, [pc, #12]	; (80077a8 <CDC_Init_FS+0x20>)
 800779a:	f7fe fc39 	bl	8006010 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800779e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000d40 	.word	0x20000d40
 80077a8:	20000264 	.word	0x20000264
 80077ac:	20000540 	.word	0x20000540

080077b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	4603      	mov	r3, r0
 80077c8:	6039      	str	r1, [r7, #0]
 80077ca:	71fb      	strb	r3, [r7, #7]
 80077cc:	4613      	mov	r3, r2
 80077ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	2b23      	cmp	r3, #35	; 0x23
 80077d4:	d84a      	bhi.n	800786c <CDC_Control_FS+0xac>
 80077d6:	a201      	add	r2, pc, #4	; (adr r2, 80077dc <CDC_Control_FS+0x1c>)
 80077d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077dc:	0800786d 	.word	0x0800786d
 80077e0:	0800786d 	.word	0x0800786d
 80077e4:	0800786d 	.word	0x0800786d
 80077e8:	0800786d 	.word	0x0800786d
 80077ec:	0800786d 	.word	0x0800786d
 80077f0:	0800786d 	.word	0x0800786d
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	0800786d 	.word	0x0800786d
 80077fc:	0800786d 	.word	0x0800786d
 8007800:	0800786d 	.word	0x0800786d
 8007804:	0800786d 	.word	0x0800786d
 8007808:	0800786d 	.word	0x0800786d
 800780c:	0800786d 	.word	0x0800786d
 8007810:	0800786d 	.word	0x0800786d
 8007814:	0800786d 	.word	0x0800786d
 8007818:	0800786d 	.word	0x0800786d
 800781c:	0800786d 	.word	0x0800786d
 8007820:	0800786d 	.word	0x0800786d
 8007824:	0800786d 	.word	0x0800786d
 8007828:	0800786d 	.word	0x0800786d
 800782c:	0800786d 	.word	0x0800786d
 8007830:	0800786d 	.word	0x0800786d
 8007834:	0800786d 	.word	0x0800786d
 8007838:	0800786d 	.word	0x0800786d
 800783c:	0800786d 	.word	0x0800786d
 8007840:	0800786d 	.word	0x0800786d
 8007844:	0800786d 	.word	0x0800786d
 8007848:	0800786d 	.word	0x0800786d
 800784c:	0800786d 	.word	0x0800786d
 8007850:	0800786d 	.word	0x0800786d
 8007854:	0800786d 	.word	0x0800786d
 8007858:	0800786d 	.word	0x0800786d
 800785c:	0800786d 	.word	0x0800786d
 8007860:	0800786d 	.word	0x0800786d
 8007864:	0800786d 	.word	0x0800786d
 8007868:	0800786d 	.word	0x0800786d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800786c:	bf00      	nop
  }

  return (USBD_OK);
 800786e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007870:	4618      	mov	r0, r3
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007886:	6879      	ldr	r1, [r7, #4]
 8007888:	4805      	ldr	r0, [pc, #20]	; (80078a0 <CDC_Receive_FS+0x24>)
 800788a:	f7fe fbc1 	bl	8006010 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800788e:	4804      	ldr	r0, [pc, #16]	; (80078a0 <CDC_Receive_FS+0x24>)
 8007890:	f7fe fc22 	bl	80060d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007894:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20000264 	.word	0x20000264

080078a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078b4:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <CDC_Transmit_FS+0x48>)
 80078b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e00b      	b.n	80078e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078ca:	887b      	ldrh	r3, [r7, #2]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4806      	ldr	r0, [pc, #24]	; (80078ec <CDC_Transmit_FS+0x48>)
 80078d2:	f7fe fb7b 	bl	8005fcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <CDC_Transmit_FS+0x48>)
 80078d8:	f7fe fbb8 	bl	800604c <USBD_CDC_TransmitPacket>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000264 	.word	0x20000264

080078f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007902:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	371c      	adds	r7, #28
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
	...

08007914 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2212      	movs	r2, #18
 8007924:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007926:	4b03      	ldr	r3, [pc, #12]	; (8007934 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007928:	4618      	mov	r0, r3
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	200000c8 	.word	0x200000c8

08007938 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2204      	movs	r2, #4
 8007948:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800794a:	4b03      	ldr	r3, [pc, #12]	; (8007958 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	200000dc 	.word	0x200000dc

0800795c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	4603      	mov	r3, r0
 8007964:	6039      	str	r1, [r7, #0]
 8007966:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d105      	bne.n	800797a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4907      	ldr	r1, [pc, #28]	; (8007990 <USBD_FS_ProductStrDescriptor+0x34>)
 8007972:	4808      	ldr	r0, [pc, #32]	; (8007994 <USBD_FS_ProductStrDescriptor+0x38>)
 8007974:	f7ff fdf8 	bl	8007568 <USBD_GetString>
 8007978:	e004      	b.n	8007984 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	4904      	ldr	r1, [pc, #16]	; (8007990 <USBD_FS_ProductStrDescriptor+0x34>)
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <USBD_FS_ProductStrDescriptor+0x38>)
 8007980:	f7ff fdf2 	bl	8007568 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007984:	4b02      	ldr	r3, [pc, #8]	; (8007990 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20001540 	.word	0x20001540
 8007994:	08008b04 	.word	0x08008b04

08007998 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	6039      	str	r1, [r7, #0]
 80079a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	4904      	ldr	r1, [pc, #16]	; (80079b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079a8:	4804      	ldr	r0, [pc, #16]	; (80079bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079aa:	f7ff fddd 	bl	8007568 <USBD_GetString>
  return USBD_StrDesc;
 80079ae:	4b02      	ldr	r3, [pc, #8]	; (80079b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	20001540 	.word	0x20001540
 80079bc:	08008b1c 	.word	0x08008b1c

080079c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	6039      	str	r1, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	221a      	movs	r2, #26
 80079d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079d2:	f000 f843 	bl	8007a5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079d6:	4b02      	ldr	r3, [pc, #8]	; (80079e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	200000e0 	.word	0x200000e0

080079e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	4603      	mov	r3, r0
 80079ec:	6039      	str	r1, [r7, #0]
 80079ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079f0:	79fb      	ldrb	r3, [r7, #7]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4907      	ldr	r1, [pc, #28]	; (8007a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079fa:	4808      	ldr	r0, [pc, #32]	; (8007a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 80079fc:	f7ff fdb4 	bl	8007568 <USBD_GetString>
 8007a00:	e004      	b.n	8007a0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	4904      	ldr	r1, [pc, #16]	; (8007a18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a06:	4805      	ldr	r0, [pc, #20]	; (8007a1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a08:	f7ff fdae 	bl	8007568 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a0c:	4b02      	ldr	r3, [pc, #8]	; (8007a18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3708      	adds	r7, #8
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	20001540 	.word	0x20001540
 8007a1c:	08008b30 	.word	0x08008b30

08007a20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a36:	4808      	ldr	r0, [pc, #32]	; (8007a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a38:	f7ff fd96 	bl	8007568 <USBD_GetString>
 8007a3c:	e004      	b.n	8007a48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4904      	ldr	r1, [pc, #16]	; (8007a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a42:	4805      	ldr	r0, [pc, #20]	; (8007a58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a44:	f7ff fd90 	bl	8007568 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20001540 	.word	0x20001540
 8007a58:	08008b3c 	.word	0x08008b3c

08007a5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a62:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <Get_SerialNum+0x44>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a68:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <Get_SerialNum+0x48>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a6e:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <Get_SerialNum+0x4c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d009      	beq.n	8007a96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a82:	2208      	movs	r2, #8
 8007a84:	4909      	ldr	r1, [pc, #36]	; (8007aac <Get_SerialNum+0x50>)
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f814 	bl	8007ab4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	4908      	ldr	r1, [pc, #32]	; (8007ab0 <Get_SerialNum+0x54>)
 8007a90:	68b8      	ldr	r0, [r7, #8]
 8007a92:	f000 f80f 	bl	8007ab4 <IntToUnicode>
  }
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	1fff7a10 	.word	0x1fff7a10
 8007aa4:	1fff7a14 	.word	0x1fff7a14
 8007aa8:	1fff7a18 	.word	0x1fff7a18
 8007aac:	200000e2 	.word	0x200000e2
 8007ab0:	200000f2 	.word	0x200000f2

08007ab4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	75fb      	strb	r3, [r7, #23]
 8007aca:	e027      	b.n	8007b1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	2b09      	cmp	r3, #9
 8007ad2:	d80b      	bhi.n	8007aec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	0f1b      	lsrs	r3, r3, #28
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3230      	adds	r2, #48	; 0x30
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	e00a      	b.n	8007b02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	0f1b      	lsrs	r3, r3, #28
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4619      	mov	r1, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	440b      	add	r3, r1
 8007afc:	3237      	adds	r2, #55	; 0x37
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	011b      	lsls	r3, r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4413      	add	r3, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
 8007b1c:	7dfa      	ldrb	r2, [r7, #23]
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3d3      	bcc.n	8007acc <IntToUnicode+0x18>
  }
}
 8007b24:	bf00      	nop
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
	...

08007b34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	; 0x28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3c:	f107 0314 	add.w	r3, r7, #20
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	609a      	str	r2, [r3, #8]
 8007b48:	60da      	str	r2, [r3, #12]
 8007b4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b54:	d13a      	bne.n	8007bcc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	6313      	str	r3, [r2, #48]	; 0x30
 8007b66:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b80:	2303      	movs	r3, #3
 8007b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b84:	230a      	movs	r3, #10
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b88:	f107 0314 	add.w	r3, r7, #20
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4812      	ldr	r0, [pc, #72]	; (8007bd8 <HAL_PCD_MspInit+0xa4>)
 8007b90:	f7f9 faf6 	bl	8001180 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	4a0e      	ldr	r2, [pc, #56]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9e:	6353      	str	r3, [r2, #52]	; 0x34
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4b0b      	ldr	r3, [pc, #44]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	4a0a      	ldr	r2, [pc, #40]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bae:	6453      	str	r3, [r2, #68]	; 0x44
 8007bb0:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <HAL_PCD_MspInit+0xa0>)
 8007bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	2043      	movs	r0, #67	; 0x43
 8007bc2:	f7f9 faa6 	bl	8001112 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bc6:	2043      	movs	r0, #67	; 0x43
 8007bc8:	f7f9 fabf 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40020000 	.word	0x40020000

08007bdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	f7fe fb59 	bl	80062aa <USBD_LL_SetupStage>
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	460b      	mov	r3, r1
 8007c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c12:	78fa      	ldrb	r2, [r7, #3]
 8007c14:	6879      	ldr	r1, [r7, #4]
 8007c16:	4613      	mov	r3, r2
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	440b      	add	r3, r1
 8007c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	f7fe fb93 	bl	8006354 <USBD_LL_DataOutStage>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c48:	78fa      	ldrb	r2, [r7, #3]
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	440b      	add	r3, r1
 8007c56:	334c      	adds	r3, #76	; 0x4c
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f7fe fc2c 	bl	80064ba <USBD_LL_DataInStage>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b082      	sub	sp, #8
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fe fd60 	bl	800673e <USBD_LL_SOF>
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b02      	cmp	r3, #2
 8007c98:	d001      	beq.n	8007c9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c9a:	f7f8 ff21 	bl	8000ae0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ca4:	7bfa      	ldrb	r2, [r7, #15]
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fd0a 	bl	80066c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fe fcb2 	bl	800661e <USBD_LL_Reset>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe fd05 	bl	80066e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6812      	ldr	r2, [r2, #0]
 8007ce6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d005      	beq.n	8007d04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <HAL_PCD_SuspendCallback+0x48>)
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	4a03      	ldr	r2, [pc, #12]	; (8007d0c <HAL_PCD_SuspendCallback+0x48>)
 8007cfe:	f043 0306 	orr.w	r3, r3, #6
 8007d02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	e000ed00 	.word	0xe000ed00

08007d10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fe fcf5 	bl	800670e <USBD_LL_Resume>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	460b      	mov	r3, r1
 8007d36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d3e:	78fa      	ldrb	r2, [r7, #3]
 8007d40:	4611      	mov	r1, r2
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fe fd4d 	bl	80067e2 <USBD_LL_IsoOUTIncomplete>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	460b      	mov	r3, r1
 8007d5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d62:	78fa      	ldrb	r2, [r7, #3]
 8007d64:	4611      	mov	r1, r2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fd09 	bl	800677e <USBD_LL_IsoINIncomplete>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fd5f 	bl	8006846 <USBD_LL_DevConnected>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fe fd5c 	bl	800685c <USBD_LL_DevDisconnected>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d13c      	bne.n	8007e36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007dbc:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dc8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dcc:	4b1c      	ldr	r3, [pc, #112]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007dd2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dda:	4b19      	ldr	r3, [pc, #100]	; (8007e40 <USBD_LL_Init+0x94>)
 8007ddc:	2202      	movs	r2, #2
 8007dde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007de0:	4b17      	ldr	r3, [pc, #92]	; (8007e40 <USBD_LL_Init+0x94>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <USBD_LL_Init+0x94>)
 8007de8:	2202      	movs	r2, #2
 8007dea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dec:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007df2:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <USBD_LL_Init+0x94>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007df8:	4b11      	ldr	r3, [pc, #68]	; (8007e40 <USBD_LL_Init+0x94>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dfe:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007e04:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007e0a:	480d      	ldr	r0, [pc, #52]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e0c:	f7f9 fc9a 	bl	8001744 <HAL_PCD_Init>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e16:	f7f8 fe63 	bl	8000ae0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e1a:	2180      	movs	r1, #128	; 0x80
 8007e1c:	4808      	ldr	r0, [pc, #32]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e1e:	f7fa fef2 	bl	8002c06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e22:	2240      	movs	r2, #64	; 0x40
 8007e24:	2100      	movs	r1, #0
 8007e26:	4806      	ldr	r0, [pc, #24]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e28:	f7fa fea6 	bl	8002b78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	2101      	movs	r1, #1
 8007e30:	4803      	ldr	r0, [pc, #12]	; (8007e40 <USBD_LL_Init+0x94>)
 8007e32:	f7fa fea1 	bl	8002b78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3708      	adds	r7, #8
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	20001740 	.word	0x20001740

08007e44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7f9 fd8f 	bl	800197e <HAL_PCD_Start>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f000 f942 	bl	80080f0 <USBD_Get_USB_Status>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	4608      	mov	r0, r1
 8007e84:	4611      	mov	r1, r2
 8007e86:	461a      	mov	r2, r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	70fb      	strb	r3, [r7, #3]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70bb      	strb	r3, [r7, #2]
 8007e90:	4613      	mov	r3, r2
 8007e92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ea2:	78bb      	ldrb	r3, [r7, #2]
 8007ea4:	883a      	ldrh	r2, [r7, #0]
 8007ea6:	78f9      	ldrb	r1, [r7, #3]
 8007ea8:	f7fa fa60 	bl	800236c <HAL_PCD_EP_Open>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 f91c 	bl	80080f0 <USBD_Get_USB_Status>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b084      	sub	sp, #16
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ee0:	78fa      	ldrb	r2, [r7, #3]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fa faa9 	bl	800243c <HAL_PCD_EP_Close>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f8fd 	bl	80080f0 <USBD_Get_USB_Status>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fa fb81 	bl	800262a <HAL_PCD_EP_SetStall>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f000 f8de 	bl	80080f0 <USBD_Get_USB_Status>
 8007f34:	4603      	mov	r3, r0
 8007f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	4611      	mov	r1, r2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7fa fbc6 	bl	80026f2 <HAL_PCD_EP_ClrStall>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f000 f8bf 	bl	80080f0 <USBD_Get_USB_Status>
 8007f72:	4603      	mov	r3, r0
 8007f74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f76:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3710      	adds	r7, #16
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	da0b      	bge.n	8007fb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fa2:	68f9      	ldr	r1, [r7, #12]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	00db      	lsls	r3, r3, #3
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	333e      	adds	r3, #62	; 0x3e
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	e00b      	b.n	8007fcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fba:	68f9      	ldr	r1, [r7, #12]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007fca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ff2:	78fa      	ldrb	r2, [r7, #3]
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fa f993 	bl	8002322 <HAL_PCD_SetAddress>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008000:	7bfb      	ldrb	r3, [r7, #15]
 8008002:	4618      	mov	r0, r3
 8008004:	f000 f874 	bl	80080f0 <USBD_Get_USB_Status>
 8008008:	4603      	mov	r3, r0
 800800a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800800c:	7bbb      	ldrb	r3, [r7, #14]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b086      	sub	sp, #24
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
 8008022:	460b      	mov	r3, r1
 8008024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008034:	7af9      	ldrb	r1, [r7, #11]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	f7fa faac 	bl	8002596 <HAL_PCD_EP_Transmit>
 800803e:	4603      	mov	r3, r0
 8008040:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008042:	7dfb      	ldrb	r3, [r7, #23]
 8008044:	4618      	mov	r0, r3
 8008046:	f000 f853 	bl	80080f0 <USBD_Get_USB_Status>
 800804a:	4603      	mov	r3, r0
 800804c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800804e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3718      	adds	r7, #24
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	460b      	mov	r3, r1
 8008066:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008076:	7af9      	ldrb	r1, [r7, #11]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	f7fa fa28 	bl	80024d0 <HAL_PCD_EP_Receive>
 8008080:	4603      	mov	r3, r0
 8008082:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f832 	bl	80080f0 <USBD_Get_USB_Status>
 800808c:	4603      	mov	r3, r0
 800808e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008090:	7dbb      	ldrb	r3, [r7, #22]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3718      	adds	r7, #24
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fa fa58 	bl	8002566 <HAL_PCD_EP_GetRxCount>
 80080b6:	4603      	mov	r3, r0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080c8:	4b03      	ldr	r3, [pc, #12]	; (80080d8 <USBD_static_malloc+0x18>)
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20001c4c 	.word	0x20001c4c

080080dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]

}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	4603      	mov	r3, r0
 80080f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	2b03      	cmp	r3, #3
 8008102:	d817      	bhi.n	8008134 <USBD_Get_USB_Status+0x44>
 8008104:	a201      	add	r2, pc, #4	; (adr r2, 800810c <USBD_Get_USB_Status+0x1c>)
 8008106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810a:	bf00      	nop
 800810c:	0800811d 	.word	0x0800811d
 8008110:	08008123 	.word	0x08008123
 8008114:	08008129 	.word	0x08008129
 8008118:	0800812f 	.word	0x0800812f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73fb      	strb	r3, [r7, #15]
    break;
 8008120:	e00b      	b.n	800813a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
    break;
 8008126:	e008      	b.n	800813a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008128:	2301      	movs	r3, #1
 800812a:	73fb      	strb	r3, [r7, #15]
    break;
 800812c:	e005      	b.n	800813a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800812e:	2303      	movs	r3, #3
 8008130:	73fb      	strb	r3, [r7, #15]
    break;
 8008132:	e002      	b.n	800813a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	73fb      	strb	r3, [r7, #15]
    break;
 8008138:	bf00      	nop
  }
  return usb_status;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <__errno>:
 8008148:	4b01      	ldr	r3, [pc, #4]	; (8008150 <__errno+0x8>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	200000fc 	.word	0x200000fc

08008154 <__libc_init_array>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	4d0d      	ldr	r5, [pc, #52]	; (800818c <__libc_init_array+0x38>)
 8008158:	4c0d      	ldr	r4, [pc, #52]	; (8008190 <__libc_init_array+0x3c>)
 800815a:	1b64      	subs	r4, r4, r5
 800815c:	10a4      	asrs	r4, r4, #2
 800815e:	2600      	movs	r6, #0
 8008160:	42a6      	cmp	r6, r4
 8008162:	d109      	bne.n	8008178 <__libc_init_array+0x24>
 8008164:	4d0b      	ldr	r5, [pc, #44]	; (8008194 <__libc_init_array+0x40>)
 8008166:	4c0c      	ldr	r4, [pc, #48]	; (8008198 <__libc_init_array+0x44>)
 8008168:	f000 fca2 	bl	8008ab0 <_init>
 800816c:	1b64      	subs	r4, r4, r5
 800816e:	10a4      	asrs	r4, r4, #2
 8008170:	2600      	movs	r6, #0
 8008172:	42a6      	cmp	r6, r4
 8008174:	d105      	bne.n	8008182 <__libc_init_array+0x2e>
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	f855 3b04 	ldr.w	r3, [r5], #4
 800817c:	4798      	blx	r3
 800817e:	3601      	adds	r6, #1
 8008180:	e7ee      	b.n	8008160 <__libc_init_array+0xc>
 8008182:	f855 3b04 	ldr.w	r3, [r5], #4
 8008186:	4798      	blx	r3
 8008188:	3601      	adds	r6, #1
 800818a:	e7f2      	b.n	8008172 <__libc_init_array+0x1e>
 800818c:	08008ba0 	.word	0x08008ba0
 8008190:	08008ba0 	.word	0x08008ba0
 8008194:	08008ba0 	.word	0x08008ba0
 8008198:	08008ba4 	.word	0x08008ba4

0800819c <memset>:
 800819c:	4402      	add	r2, r0
 800819e:	4603      	mov	r3, r0
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d100      	bne.n	80081a6 <memset+0xa>
 80081a4:	4770      	bx	lr
 80081a6:	f803 1b01 	strb.w	r1, [r3], #1
 80081aa:	e7f9      	b.n	80081a0 <memset+0x4>

080081ac <sniprintf>:
 80081ac:	b40c      	push	{r2, r3}
 80081ae:	b530      	push	{r4, r5, lr}
 80081b0:	4b17      	ldr	r3, [pc, #92]	; (8008210 <sniprintf+0x64>)
 80081b2:	1e0c      	subs	r4, r1, #0
 80081b4:	681d      	ldr	r5, [r3, #0]
 80081b6:	b09d      	sub	sp, #116	; 0x74
 80081b8:	da08      	bge.n	80081cc <sniprintf+0x20>
 80081ba:	238b      	movs	r3, #139	; 0x8b
 80081bc:	602b      	str	r3, [r5, #0]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	b01d      	add	sp, #116	; 0x74
 80081c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081c8:	b002      	add	sp, #8
 80081ca:	4770      	bx	lr
 80081cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80081d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081d4:	bf14      	ite	ne
 80081d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081da:	4623      	moveq	r3, r4
 80081dc:	9304      	str	r3, [sp, #16]
 80081de:	9307      	str	r3, [sp, #28]
 80081e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081e4:	9002      	str	r0, [sp, #8]
 80081e6:	9006      	str	r0, [sp, #24]
 80081e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081ee:	ab21      	add	r3, sp, #132	; 0x84
 80081f0:	a902      	add	r1, sp, #8
 80081f2:	4628      	mov	r0, r5
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	f000 f869 	bl	80082cc <_svfiprintf_r>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	bfbc      	itt	lt
 80081fe:	238b      	movlt	r3, #139	; 0x8b
 8008200:	602b      	strlt	r3, [r5, #0]
 8008202:	2c00      	cmp	r4, #0
 8008204:	d0dd      	beq.n	80081c2 <sniprintf+0x16>
 8008206:	9b02      	ldr	r3, [sp, #8]
 8008208:	2200      	movs	r2, #0
 800820a:	701a      	strb	r2, [r3, #0]
 800820c:	e7d9      	b.n	80081c2 <sniprintf+0x16>
 800820e:	bf00      	nop
 8008210:	200000fc 	.word	0x200000fc

08008214 <__ssputs_r>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	688e      	ldr	r6, [r1, #8]
 800821a:	429e      	cmp	r6, r3
 800821c:	4682      	mov	sl, r0
 800821e:	460c      	mov	r4, r1
 8008220:	4690      	mov	r8, r2
 8008222:	461f      	mov	r7, r3
 8008224:	d838      	bhi.n	8008298 <__ssputs_r+0x84>
 8008226:	898a      	ldrh	r2, [r1, #12]
 8008228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800822c:	d032      	beq.n	8008294 <__ssputs_r+0x80>
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	6909      	ldr	r1, [r1, #16]
 8008232:	eba5 0901 	sub.w	r9, r5, r1
 8008236:	6965      	ldr	r5, [r4, #20]
 8008238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800823c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008240:	3301      	adds	r3, #1
 8008242:	444b      	add	r3, r9
 8008244:	106d      	asrs	r5, r5, #1
 8008246:	429d      	cmp	r5, r3
 8008248:	bf38      	it	cc
 800824a:	461d      	movcc	r5, r3
 800824c:	0553      	lsls	r3, r2, #21
 800824e:	d531      	bpl.n	80082b4 <__ssputs_r+0xa0>
 8008250:	4629      	mov	r1, r5
 8008252:	f000 fb63 	bl	800891c <_malloc_r>
 8008256:	4606      	mov	r6, r0
 8008258:	b950      	cbnz	r0, 8008270 <__ssputs_r+0x5c>
 800825a:	230c      	movs	r3, #12
 800825c:	f8ca 3000 	str.w	r3, [sl]
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008270:	6921      	ldr	r1, [r4, #16]
 8008272:	464a      	mov	r2, r9
 8008274:	f000 fabe 	bl	80087f4 <memcpy>
 8008278:	89a3      	ldrh	r3, [r4, #12]
 800827a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800827e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	6126      	str	r6, [r4, #16]
 8008286:	6165      	str	r5, [r4, #20]
 8008288:	444e      	add	r6, r9
 800828a:	eba5 0509 	sub.w	r5, r5, r9
 800828e:	6026      	str	r6, [r4, #0]
 8008290:	60a5      	str	r5, [r4, #8]
 8008292:	463e      	mov	r6, r7
 8008294:	42be      	cmp	r6, r7
 8008296:	d900      	bls.n	800829a <__ssputs_r+0x86>
 8008298:	463e      	mov	r6, r7
 800829a:	6820      	ldr	r0, [r4, #0]
 800829c:	4632      	mov	r2, r6
 800829e:	4641      	mov	r1, r8
 80082a0:	f000 fab6 	bl	8008810 <memmove>
 80082a4:	68a3      	ldr	r3, [r4, #8]
 80082a6:	1b9b      	subs	r3, r3, r6
 80082a8:	60a3      	str	r3, [r4, #8]
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	4433      	add	r3, r6
 80082ae:	6023      	str	r3, [r4, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e7db      	b.n	800826c <__ssputs_r+0x58>
 80082b4:	462a      	mov	r2, r5
 80082b6:	f000 fba5 	bl	8008a04 <_realloc_r>
 80082ba:	4606      	mov	r6, r0
 80082bc:	2800      	cmp	r0, #0
 80082be:	d1e1      	bne.n	8008284 <__ssputs_r+0x70>
 80082c0:	6921      	ldr	r1, [r4, #16]
 80082c2:	4650      	mov	r0, sl
 80082c4:	f000 fabe 	bl	8008844 <_free_r>
 80082c8:	e7c7      	b.n	800825a <__ssputs_r+0x46>
	...

080082cc <_svfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	4698      	mov	r8, r3
 80082d2:	898b      	ldrh	r3, [r1, #12]
 80082d4:	061b      	lsls	r3, r3, #24
 80082d6:	b09d      	sub	sp, #116	; 0x74
 80082d8:	4607      	mov	r7, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	d50e      	bpl.n	80082fe <_svfiprintf_r+0x32>
 80082e0:	690b      	ldr	r3, [r1, #16]
 80082e2:	b963      	cbnz	r3, 80082fe <_svfiprintf_r+0x32>
 80082e4:	2140      	movs	r1, #64	; 0x40
 80082e6:	f000 fb19 	bl	800891c <_malloc_r>
 80082ea:	6028      	str	r0, [r5, #0]
 80082ec:	6128      	str	r0, [r5, #16]
 80082ee:	b920      	cbnz	r0, 80082fa <_svfiprintf_r+0x2e>
 80082f0:	230c      	movs	r3, #12
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	e0d1      	b.n	800849e <_svfiprintf_r+0x1d2>
 80082fa:	2340      	movs	r3, #64	; 0x40
 80082fc:	616b      	str	r3, [r5, #20]
 80082fe:	2300      	movs	r3, #0
 8008300:	9309      	str	r3, [sp, #36]	; 0x24
 8008302:	2320      	movs	r3, #32
 8008304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008308:	f8cd 800c 	str.w	r8, [sp, #12]
 800830c:	2330      	movs	r3, #48	; 0x30
 800830e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80084b8 <_svfiprintf_r+0x1ec>
 8008312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008316:	f04f 0901 	mov.w	r9, #1
 800831a:	4623      	mov	r3, r4
 800831c:	469a      	mov	sl, r3
 800831e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008322:	b10a      	cbz	r2, 8008328 <_svfiprintf_r+0x5c>
 8008324:	2a25      	cmp	r2, #37	; 0x25
 8008326:	d1f9      	bne.n	800831c <_svfiprintf_r+0x50>
 8008328:	ebba 0b04 	subs.w	fp, sl, r4
 800832c:	d00b      	beq.n	8008346 <_svfiprintf_r+0x7a>
 800832e:	465b      	mov	r3, fp
 8008330:	4622      	mov	r2, r4
 8008332:	4629      	mov	r1, r5
 8008334:	4638      	mov	r0, r7
 8008336:	f7ff ff6d 	bl	8008214 <__ssputs_r>
 800833a:	3001      	adds	r0, #1
 800833c:	f000 80aa 	beq.w	8008494 <_svfiprintf_r+0x1c8>
 8008340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008342:	445a      	add	r2, fp
 8008344:	9209      	str	r2, [sp, #36]	; 0x24
 8008346:	f89a 3000 	ldrb.w	r3, [sl]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80a2 	beq.w	8008494 <_svfiprintf_r+0x1c8>
 8008350:	2300      	movs	r3, #0
 8008352:	f04f 32ff 	mov.w	r2, #4294967295
 8008356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800835a:	f10a 0a01 	add.w	sl, sl, #1
 800835e:	9304      	str	r3, [sp, #16]
 8008360:	9307      	str	r3, [sp, #28]
 8008362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008366:	931a      	str	r3, [sp, #104]	; 0x68
 8008368:	4654      	mov	r4, sl
 800836a:	2205      	movs	r2, #5
 800836c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008370:	4851      	ldr	r0, [pc, #324]	; (80084b8 <_svfiprintf_r+0x1ec>)
 8008372:	f7f7 ff35 	bl	80001e0 <memchr>
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	b9d8      	cbnz	r0, 80083b2 <_svfiprintf_r+0xe6>
 800837a:	06d0      	lsls	r0, r2, #27
 800837c:	bf44      	itt	mi
 800837e:	2320      	movmi	r3, #32
 8008380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008384:	0711      	lsls	r1, r2, #28
 8008386:	bf44      	itt	mi
 8008388:	232b      	movmi	r3, #43	; 0x2b
 800838a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800838e:	f89a 3000 	ldrb.w	r3, [sl]
 8008392:	2b2a      	cmp	r3, #42	; 0x2a
 8008394:	d015      	beq.n	80083c2 <_svfiprintf_r+0xf6>
 8008396:	9a07      	ldr	r2, [sp, #28]
 8008398:	4654      	mov	r4, sl
 800839a:	2000      	movs	r0, #0
 800839c:	f04f 0c0a 	mov.w	ip, #10
 80083a0:	4621      	mov	r1, r4
 80083a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083a6:	3b30      	subs	r3, #48	; 0x30
 80083a8:	2b09      	cmp	r3, #9
 80083aa:	d94e      	bls.n	800844a <_svfiprintf_r+0x17e>
 80083ac:	b1b0      	cbz	r0, 80083dc <_svfiprintf_r+0x110>
 80083ae:	9207      	str	r2, [sp, #28]
 80083b0:	e014      	b.n	80083dc <_svfiprintf_r+0x110>
 80083b2:	eba0 0308 	sub.w	r3, r0, r8
 80083b6:	fa09 f303 	lsl.w	r3, r9, r3
 80083ba:	4313      	orrs	r3, r2
 80083bc:	9304      	str	r3, [sp, #16]
 80083be:	46a2      	mov	sl, r4
 80083c0:	e7d2      	b.n	8008368 <_svfiprintf_r+0x9c>
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	1d19      	adds	r1, r3, #4
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	9103      	str	r1, [sp, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	bfbb      	ittet	lt
 80083ce:	425b      	neglt	r3, r3
 80083d0:	f042 0202 	orrlt.w	r2, r2, #2
 80083d4:	9307      	strge	r3, [sp, #28]
 80083d6:	9307      	strlt	r3, [sp, #28]
 80083d8:	bfb8      	it	lt
 80083da:	9204      	strlt	r2, [sp, #16]
 80083dc:	7823      	ldrb	r3, [r4, #0]
 80083de:	2b2e      	cmp	r3, #46	; 0x2e
 80083e0:	d10c      	bne.n	80083fc <_svfiprintf_r+0x130>
 80083e2:	7863      	ldrb	r3, [r4, #1]
 80083e4:	2b2a      	cmp	r3, #42	; 0x2a
 80083e6:	d135      	bne.n	8008454 <_svfiprintf_r+0x188>
 80083e8:	9b03      	ldr	r3, [sp, #12]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	9203      	str	r2, [sp, #12]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	bfb8      	it	lt
 80083f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80083f8:	3402      	adds	r4, #2
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80084c8 <_svfiprintf_r+0x1fc>
 8008400:	7821      	ldrb	r1, [r4, #0]
 8008402:	2203      	movs	r2, #3
 8008404:	4650      	mov	r0, sl
 8008406:	f7f7 feeb 	bl	80001e0 <memchr>
 800840a:	b140      	cbz	r0, 800841e <_svfiprintf_r+0x152>
 800840c:	2340      	movs	r3, #64	; 0x40
 800840e:	eba0 000a 	sub.w	r0, r0, sl
 8008412:	fa03 f000 	lsl.w	r0, r3, r0
 8008416:	9b04      	ldr	r3, [sp, #16]
 8008418:	4303      	orrs	r3, r0
 800841a:	3401      	adds	r4, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008422:	4826      	ldr	r0, [pc, #152]	; (80084bc <_svfiprintf_r+0x1f0>)
 8008424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008428:	2206      	movs	r2, #6
 800842a:	f7f7 fed9 	bl	80001e0 <memchr>
 800842e:	2800      	cmp	r0, #0
 8008430:	d038      	beq.n	80084a4 <_svfiprintf_r+0x1d8>
 8008432:	4b23      	ldr	r3, [pc, #140]	; (80084c0 <_svfiprintf_r+0x1f4>)
 8008434:	bb1b      	cbnz	r3, 800847e <_svfiprintf_r+0x1b2>
 8008436:	9b03      	ldr	r3, [sp, #12]
 8008438:	3307      	adds	r3, #7
 800843a:	f023 0307 	bic.w	r3, r3, #7
 800843e:	3308      	adds	r3, #8
 8008440:	9303      	str	r3, [sp, #12]
 8008442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008444:	4433      	add	r3, r6
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	e767      	b.n	800831a <_svfiprintf_r+0x4e>
 800844a:	fb0c 3202 	mla	r2, ip, r2, r3
 800844e:	460c      	mov	r4, r1
 8008450:	2001      	movs	r0, #1
 8008452:	e7a5      	b.n	80083a0 <_svfiprintf_r+0xd4>
 8008454:	2300      	movs	r3, #0
 8008456:	3401      	adds	r4, #1
 8008458:	9305      	str	r3, [sp, #20]
 800845a:	4619      	mov	r1, r3
 800845c:	f04f 0c0a 	mov.w	ip, #10
 8008460:	4620      	mov	r0, r4
 8008462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008466:	3a30      	subs	r2, #48	; 0x30
 8008468:	2a09      	cmp	r2, #9
 800846a:	d903      	bls.n	8008474 <_svfiprintf_r+0x1a8>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0c5      	beq.n	80083fc <_svfiprintf_r+0x130>
 8008470:	9105      	str	r1, [sp, #20]
 8008472:	e7c3      	b.n	80083fc <_svfiprintf_r+0x130>
 8008474:	fb0c 2101 	mla	r1, ip, r1, r2
 8008478:	4604      	mov	r4, r0
 800847a:	2301      	movs	r3, #1
 800847c:	e7f0      	b.n	8008460 <_svfiprintf_r+0x194>
 800847e:	ab03      	add	r3, sp, #12
 8008480:	9300      	str	r3, [sp, #0]
 8008482:	462a      	mov	r2, r5
 8008484:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <_svfiprintf_r+0x1f8>)
 8008486:	a904      	add	r1, sp, #16
 8008488:	4638      	mov	r0, r7
 800848a:	f3af 8000 	nop.w
 800848e:	1c42      	adds	r2, r0, #1
 8008490:	4606      	mov	r6, r0
 8008492:	d1d6      	bne.n	8008442 <_svfiprintf_r+0x176>
 8008494:	89ab      	ldrh	r3, [r5, #12]
 8008496:	065b      	lsls	r3, r3, #25
 8008498:	f53f af2c 	bmi.w	80082f4 <_svfiprintf_r+0x28>
 800849c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800849e:	b01d      	add	sp, #116	; 0x74
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a4:	ab03      	add	r3, sp, #12
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	462a      	mov	r2, r5
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <_svfiprintf_r+0x1f8>)
 80084ac:	a904      	add	r1, sp, #16
 80084ae:	4638      	mov	r0, r7
 80084b0:	f000 f87a 	bl	80085a8 <_printf_i>
 80084b4:	e7eb      	b.n	800848e <_svfiprintf_r+0x1c2>
 80084b6:	bf00      	nop
 80084b8:	08008b64 	.word	0x08008b64
 80084bc:	08008b6e 	.word	0x08008b6e
 80084c0:	00000000 	.word	0x00000000
 80084c4:	08008215 	.word	0x08008215
 80084c8:	08008b6a 	.word	0x08008b6a

080084cc <_printf_common>:
 80084cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d0:	4616      	mov	r6, r2
 80084d2:	4699      	mov	r9, r3
 80084d4:	688a      	ldr	r2, [r1, #8]
 80084d6:	690b      	ldr	r3, [r1, #16]
 80084d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084dc:	4293      	cmp	r3, r2
 80084de:	bfb8      	it	lt
 80084e0:	4613      	movlt	r3, r2
 80084e2:	6033      	str	r3, [r6, #0]
 80084e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084e8:	4607      	mov	r7, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	b10a      	cbz	r2, 80084f2 <_printf_common+0x26>
 80084ee:	3301      	adds	r3, #1
 80084f0:	6033      	str	r3, [r6, #0]
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	0699      	lsls	r1, r3, #26
 80084f6:	bf42      	ittt	mi
 80084f8:	6833      	ldrmi	r3, [r6, #0]
 80084fa:	3302      	addmi	r3, #2
 80084fc:	6033      	strmi	r3, [r6, #0]
 80084fe:	6825      	ldr	r5, [r4, #0]
 8008500:	f015 0506 	ands.w	r5, r5, #6
 8008504:	d106      	bne.n	8008514 <_printf_common+0x48>
 8008506:	f104 0a19 	add.w	sl, r4, #25
 800850a:	68e3      	ldr	r3, [r4, #12]
 800850c:	6832      	ldr	r2, [r6, #0]
 800850e:	1a9b      	subs	r3, r3, r2
 8008510:	42ab      	cmp	r3, r5
 8008512:	dc26      	bgt.n	8008562 <_printf_common+0x96>
 8008514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008518:	1e13      	subs	r3, r2, #0
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	bf18      	it	ne
 800851e:	2301      	movne	r3, #1
 8008520:	0692      	lsls	r2, r2, #26
 8008522:	d42b      	bmi.n	800857c <_printf_common+0xb0>
 8008524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008528:	4649      	mov	r1, r9
 800852a:	4638      	mov	r0, r7
 800852c:	47c0      	blx	r8
 800852e:	3001      	adds	r0, #1
 8008530:	d01e      	beq.n	8008570 <_printf_common+0xa4>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	68e5      	ldr	r5, [r4, #12]
 8008536:	6832      	ldr	r2, [r6, #0]
 8008538:	f003 0306 	and.w	r3, r3, #6
 800853c:	2b04      	cmp	r3, #4
 800853e:	bf08      	it	eq
 8008540:	1aad      	subeq	r5, r5, r2
 8008542:	68a3      	ldr	r3, [r4, #8]
 8008544:	6922      	ldr	r2, [r4, #16]
 8008546:	bf0c      	ite	eq
 8008548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800854c:	2500      	movne	r5, #0
 800854e:	4293      	cmp	r3, r2
 8008550:	bfc4      	itt	gt
 8008552:	1a9b      	subgt	r3, r3, r2
 8008554:	18ed      	addgt	r5, r5, r3
 8008556:	2600      	movs	r6, #0
 8008558:	341a      	adds	r4, #26
 800855a:	42b5      	cmp	r5, r6
 800855c:	d11a      	bne.n	8008594 <_printf_common+0xc8>
 800855e:	2000      	movs	r0, #0
 8008560:	e008      	b.n	8008574 <_printf_common+0xa8>
 8008562:	2301      	movs	r3, #1
 8008564:	4652      	mov	r2, sl
 8008566:	4649      	mov	r1, r9
 8008568:	4638      	mov	r0, r7
 800856a:	47c0      	blx	r8
 800856c:	3001      	adds	r0, #1
 800856e:	d103      	bne.n	8008578 <_printf_common+0xac>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008578:	3501      	adds	r5, #1
 800857a:	e7c6      	b.n	800850a <_printf_common+0x3e>
 800857c:	18e1      	adds	r1, r4, r3
 800857e:	1c5a      	adds	r2, r3, #1
 8008580:	2030      	movs	r0, #48	; 0x30
 8008582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008586:	4422      	add	r2, r4
 8008588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800858c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008590:	3302      	adds	r3, #2
 8008592:	e7c7      	b.n	8008524 <_printf_common+0x58>
 8008594:	2301      	movs	r3, #1
 8008596:	4622      	mov	r2, r4
 8008598:	4649      	mov	r1, r9
 800859a:	4638      	mov	r0, r7
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d0e6      	beq.n	8008570 <_printf_common+0xa4>
 80085a2:	3601      	adds	r6, #1
 80085a4:	e7d9      	b.n	800855a <_printf_common+0x8e>
	...

080085a8 <_printf_i>:
 80085a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	7e0f      	ldrb	r7, [r1, #24]
 80085ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085b0:	2f78      	cmp	r7, #120	; 0x78
 80085b2:	4691      	mov	r9, r2
 80085b4:	4680      	mov	r8, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	469a      	mov	sl, r3
 80085ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085be:	d807      	bhi.n	80085d0 <_printf_i+0x28>
 80085c0:	2f62      	cmp	r7, #98	; 0x62
 80085c2:	d80a      	bhi.n	80085da <_printf_i+0x32>
 80085c4:	2f00      	cmp	r7, #0
 80085c6:	f000 80d8 	beq.w	800877a <_printf_i+0x1d2>
 80085ca:	2f58      	cmp	r7, #88	; 0x58
 80085cc:	f000 80a3 	beq.w	8008716 <_printf_i+0x16e>
 80085d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085d8:	e03a      	b.n	8008650 <_printf_i+0xa8>
 80085da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085de:	2b15      	cmp	r3, #21
 80085e0:	d8f6      	bhi.n	80085d0 <_printf_i+0x28>
 80085e2:	a101      	add	r1, pc, #4	; (adr r1, 80085e8 <_printf_i+0x40>)
 80085e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085e8:	08008641 	.word	0x08008641
 80085ec:	08008655 	.word	0x08008655
 80085f0:	080085d1 	.word	0x080085d1
 80085f4:	080085d1 	.word	0x080085d1
 80085f8:	080085d1 	.word	0x080085d1
 80085fc:	080085d1 	.word	0x080085d1
 8008600:	08008655 	.word	0x08008655
 8008604:	080085d1 	.word	0x080085d1
 8008608:	080085d1 	.word	0x080085d1
 800860c:	080085d1 	.word	0x080085d1
 8008610:	080085d1 	.word	0x080085d1
 8008614:	08008761 	.word	0x08008761
 8008618:	08008685 	.word	0x08008685
 800861c:	08008743 	.word	0x08008743
 8008620:	080085d1 	.word	0x080085d1
 8008624:	080085d1 	.word	0x080085d1
 8008628:	08008783 	.word	0x08008783
 800862c:	080085d1 	.word	0x080085d1
 8008630:	08008685 	.word	0x08008685
 8008634:	080085d1 	.word	0x080085d1
 8008638:	080085d1 	.word	0x080085d1
 800863c:	0800874b 	.word	0x0800874b
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	1d1a      	adds	r2, r3, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	602a      	str	r2, [r5, #0]
 8008648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800864c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008650:	2301      	movs	r3, #1
 8008652:	e0a3      	b.n	800879c <_printf_i+0x1f4>
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	6829      	ldr	r1, [r5, #0]
 8008658:	0606      	lsls	r6, r0, #24
 800865a:	f101 0304 	add.w	r3, r1, #4
 800865e:	d50a      	bpl.n	8008676 <_printf_i+0xce>
 8008660:	680e      	ldr	r6, [r1, #0]
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	2e00      	cmp	r6, #0
 8008666:	da03      	bge.n	8008670 <_printf_i+0xc8>
 8008668:	232d      	movs	r3, #45	; 0x2d
 800866a:	4276      	negs	r6, r6
 800866c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008670:	485e      	ldr	r0, [pc, #376]	; (80087ec <_printf_i+0x244>)
 8008672:	230a      	movs	r3, #10
 8008674:	e019      	b.n	80086aa <_printf_i+0x102>
 8008676:	680e      	ldr	r6, [r1, #0]
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800867e:	bf18      	it	ne
 8008680:	b236      	sxthne	r6, r6
 8008682:	e7ef      	b.n	8008664 <_printf_i+0xbc>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	6820      	ldr	r0, [r4, #0]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	6029      	str	r1, [r5, #0]
 800868c:	0601      	lsls	r1, r0, #24
 800868e:	d501      	bpl.n	8008694 <_printf_i+0xec>
 8008690:	681e      	ldr	r6, [r3, #0]
 8008692:	e002      	b.n	800869a <_printf_i+0xf2>
 8008694:	0646      	lsls	r6, r0, #25
 8008696:	d5fb      	bpl.n	8008690 <_printf_i+0xe8>
 8008698:	881e      	ldrh	r6, [r3, #0]
 800869a:	4854      	ldr	r0, [pc, #336]	; (80087ec <_printf_i+0x244>)
 800869c:	2f6f      	cmp	r7, #111	; 0x6f
 800869e:	bf0c      	ite	eq
 80086a0:	2308      	moveq	r3, #8
 80086a2:	230a      	movne	r3, #10
 80086a4:	2100      	movs	r1, #0
 80086a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086aa:	6865      	ldr	r5, [r4, #4]
 80086ac:	60a5      	str	r5, [r4, #8]
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	bfa2      	ittt	ge
 80086b2:	6821      	ldrge	r1, [r4, #0]
 80086b4:	f021 0104 	bicge.w	r1, r1, #4
 80086b8:	6021      	strge	r1, [r4, #0]
 80086ba:	b90e      	cbnz	r6, 80086c0 <_printf_i+0x118>
 80086bc:	2d00      	cmp	r5, #0
 80086be:	d04d      	beq.n	800875c <_printf_i+0x1b4>
 80086c0:	4615      	mov	r5, r2
 80086c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80086c6:	fb03 6711 	mls	r7, r3, r1, r6
 80086ca:	5dc7      	ldrb	r7, [r0, r7]
 80086cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086d0:	4637      	mov	r7, r6
 80086d2:	42bb      	cmp	r3, r7
 80086d4:	460e      	mov	r6, r1
 80086d6:	d9f4      	bls.n	80086c2 <_printf_i+0x11a>
 80086d8:	2b08      	cmp	r3, #8
 80086da:	d10b      	bne.n	80086f4 <_printf_i+0x14c>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	07de      	lsls	r6, r3, #31
 80086e0:	d508      	bpl.n	80086f4 <_printf_i+0x14c>
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	6861      	ldr	r1, [r4, #4]
 80086e6:	4299      	cmp	r1, r3
 80086e8:	bfde      	ittt	le
 80086ea:	2330      	movle	r3, #48	; 0x30
 80086ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086f4:	1b52      	subs	r2, r2, r5
 80086f6:	6122      	str	r2, [r4, #16]
 80086f8:	f8cd a000 	str.w	sl, [sp]
 80086fc:	464b      	mov	r3, r9
 80086fe:	aa03      	add	r2, sp, #12
 8008700:	4621      	mov	r1, r4
 8008702:	4640      	mov	r0, r8
 8008704:	f7ff fee2 	bl	80084cc <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	d14c      	bne.n	80087a6 <_printf_i+0x1fe>
 800870c:	f04f 30ff 	mov.w	r0, #4294967295
 8008710:	b004      	add	sp, #16
 8008712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008716:	4835      	ldr	r0, [pc, #212]	; (80087ec <_printf_i+0x244>)
 8008718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800871c:	6829      	ldr	r1, [r5, #0]
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f851 6b04 	ldr.w	r6, [r1], #4
 8008724:	6029      	str	r1, [r5, #0]
 8008726:	061d      	lsls	r5, r3, #24
 8008728:	d514      	bpl.n	8008754 <_printf_i+0x1ac>
 800872a:	07df      	lsls	r7, r3, #31
 800872c:	bf44      	itt	mi
 800872e:	f043 0320 	orrmi.w	r3, r3, #32
 8008732:	6023      	strmi	r3, [r4, #0]
 8008734:	b91e      	cbnz	r6, 800873e <_printf_i+0x196>
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	f023 0320 	bic.w	r3, r3, #32
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	2310      	movs	r3, #16
 8008740:	e7b0      	b.n	80086a4 <_printf_i+0xfc>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	f043 0320 	orr.w	r3, r3, #32
 8008748:	6023      	str	r3, [r4, #0]
 800874a:	2378      	movs	r3, #120	; 0x78
 800874c:	4828      	ldr	r0, [pc, #160]	; (80087f0 <_printf_i+0x248>)
 800874e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008752:	e7e3      	b.n	800871c <_printf_i+0x174>
 8008754:	0659      	lsls	r1, r3, #25
 8008756:	bf48      	it	mi
 8008758:	b2b6      	uxthmi	r6, r6
 800875a:	e7e6      	b.n	800872a <_printf_i+0x182>
 800875c:	4615      	mov	r5, r2
 800875e:	e7bb      	b.n	80086d8 <_printf_i+0x130>
 8008760:	682b      	ldr	r3, [r5, #0]
 8008762:	6826      	ldr	r6, [r4, #0]
 8008764:	6961      	ldr	r1, [r4, #20]
 8008766:	1d18      	adds	r0, r3, #4
 8008768:	6028      	str	r0, [r5, #0]
 800876a:	0635      	lsls	r5, r6, #24
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	d501      	bpl.n	8008774 <_printf_i+0x1cc>
 8008770:	6019      	str	r1, [r3, #0]
 8008772:	e002      	b.n	800877a <_printf_i+0x1d2>
 8008774:	0670      	lsls	r0, r6, #25
 8008776:	d5fb      	bpl.n	8008770 <_printf_i+0x1c8>
 8008778:	8019      	strh	r1, [r3, #0]
 800877a:	2300      	movs	r3, #0
 800877c:	6123      	str	r3, [r4, #16]
 800877e:	4615      	mov	r5, r2
 8008780:	e7ba      	b.n	80086f8 <_printf_i+0x150>
 8008782:	682b      	ldr	r3, [r5, #0]
 8008784:	1d1a      	adds	r2, r3, #4
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	681d      	ldr	r5, [r3, #0]
 800878a:	6862      	ldr	r2, [r4, #4]
 800878c:	2100      	movs	r1, #0
 800878e:	4628      	mov	r0, r5
 8008790:	f7f7 fd26 	bl	80001e0 <memchr>
 8008794:	b108      	cbz	r0, 800879a <_printf_i+0x1f2>
 8008796:	1b40      	subs	r0, r0, r5
 8008798:	6060      	str	r0, [r4, #4]
 800879a:	6863      	ldr	r3, [r4, #4]
 800879c:	6123      	str	r3, [r4, #16]
 800879e:	2300      	movs	r3, #0
 80087a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087a4:	e7a8      	b.n	80086f8 <_printf_i+0x150>
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	462a      	mov	r2, r5
 80087aa:	4649      	mov	r1, r9
 80087ac:	4640      	mov	r0, r8
 80087ae:	47d0      	blx	sl
 80087b0:	3001      	adds	r0, #1
 80087b2:	d0ab      	beq.n	800870c <_printf_i+0x164>
 80087b4:	6823      	ldr	r3, [r4, #0]
 80087b6:	079b      	lsls	r3, r3, #30
 80087b8:	d413      	bmi.n	80087e2 <_printf_i+0x23a>
 80087ba:	68e0      	ldr	r0, [r4, #12]
 80087bc:	9b03      	ldr	r3, [sp, #12]
 80087be:	4298      	cmp	r0, r3
 80087c0:	bfb8      	it	lt
 80087c2:	4618      	movlt	r0, r3
 80087c4:	e7a4      	b.n	8008710 <_printf_i+0x168>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4632      	mov	r2, r6
 80087ca:	4649      	mov	r1, r9
 80087cc:	4640      	mov	r0, r8
 80087ce:	47d0      	blx	sl
 80087d0:	3001      	adds	r0, #1
 80087d2:	d09b      	beq.n	800870c <_printf_i+0x164>
 80087d4:	3501      	adds	r5, #1
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	9903      	ldr	r1, [sp, #12]
 80087da:	1a5b      	subs	r3, r3, r1
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dcf2      	bgt.n	80087c6 <_printf_i+0x21e>
 80087e0:	e7eb      	b.n	80087ba <_printf_i+0x212>
 80087e2:	2500      	movs	r5, #0
 80087e4:	f104 0619 	add.w	r6, r4, #25
 80087e8:	e7f5      	b.n	80087d6 <_printf_i+0x22e>
 80087ea:	bf00      	nop
 80087ec:	08008b75 	.word	0x08008b75
 80087f0:	08008b86 	.word	0x08008b86

080087f4 <memcpy>:
 80087f4:	440a      	add	r2, r1
 80087f6:	4291      	cmp	r1, r2
 80087f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087fc:	d100      	bne.n	8008800 <memcpy+0xc>
 80087fe:	4770      	bx	lr
 8008800:	b510      	push	{r4, lr}
 8008802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800880a:	4291      	cmp	r1, r2
 800880c:	d1f9      	bne.n	8008802 <memcpy+0xe>
 800880e:	bd10      	pop	{r4, pc}

08008810 <memmove>:
 8008810:	4288      	cmp	r0, r1
 8008812:	b510      	push	{r4, lr}
 8008814:	eb01 0402 	add.w	r4, r1, r2
 8008818:	d902      	bls.n	8008820 <memmove+0x10>
 800881a:	4284      	cmp	r4, r0
 800881c:	4623      	mov	r3, r4
 800881e:	d807      	bhi.n	8008830 <memmove+0x20>
 8008820:	1e43      	subs	r3, r0, #1
 8008822:	42a1      	cmp	r1, r4
 8008824:	d008      	beq.n	8008838 <memmove+0x28>
 8008826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800882e:	e7f8      	b.n	8008822 <memmove+0x12>
 8008830:	4402      	add	r2, r0
 8008832:	4601      	mov	r1, r0
 8008834:	428a      	cmp	r2, r1
 8008836:	d100      	bne.n	800883a <memmove+0x2a>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800883e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008842:	e7f7      	b.n	8008834 <memmove+0x24>

08008844 <_free_r>:
 8008844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008846:	2900      	cmp	r1, #0
 8008848:	d044      	beq.n	80088d4 <_free_r+0x90>
 800884a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884e:	9001      	str	r0, [sp, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	f1a1 0404 	sub.w	r4, r1, #4
 8008856:	bfb8      	it	lt
 8008858:	18e4      	addlt	r4, r4, r3
 800885a:	f000 f913 	bl	8008a84 <__malloc_lock>
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <_free_r+0x94>)
 8008860:	9801      	ldr	r0, [sp, #4]
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x30>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	b003      	add	sp, #12
 800886c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008870:	f000 b90e 	b.w	8008a90 <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x46>
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	1961      	adds	r1, r4, r5
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1949      	addeq	r1, r1, r5
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x22>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x50>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x46>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1855      	adds	r5, r2, r1
 8008898:	42a5      	cmp	r5, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x70>
 800889c:	6824      	ldr	r4, [r4, #0]
 800889e:	4421      	add	r1, r4
 80088a0:	1854      	adds	r4, r2, r1
 80088a2:	42a3      	cmp	r3, r4
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x26>
 80088a8:	681c      	ldr	r4, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	6053      	str	r3, [r2, #4]
 80088ae:	4421      	add	r1, r4
 80088b0:	6011      	str	r1, [r2, #0]
 80088b2:	e7da      	b.n	800886a <_free_r+0x26>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x78>
 80088b6:	230c      	movs	r3, #12
 80088b8:	6003      	str	r3, [r0, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x26>
 80088bc:	6825      	ldr	r5, [r4, #0]
 80088be:	1961      	adds	r1, r4, r5
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf04      	itt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	6063      	str	r3, [r4, #4]
 80088ca:	bf04      	itt	eq
 80088cc:	1949      	addeq	r1, r1, r5
 80088ce:	6021      	streq	r1, [r4, #0]
 80088d0:	6054      	str	r4, [r2, #4]
 80088d2:	e7ca      	b.n	800886a <_free_r+0x26>
 80088d4:	b003      	add	sp, #12
 80088d6:	bd30      	pop	{r4, r5, pc}
 80088d8:	20001e6c 	.word	0x20001e6c

080088dc <sbrk_aligned>:
 80088dc:	b570      	push	{r4, r5, r6, lr}
 80088de:	4e0e      	ldr	r6, [pc, #56]	; (8008918 <sbrk_aligned+0x3c>)
 80088e0:	460c      	mov	r4, r1
 80088e2:	6831      	ldr	r1, [r6, #0]
 80088e4:	4605      	mov	r5, r0
 80088e6:	b911      	cbnz	r1, 80088ee <sbrk_aligned+0x12>
 80088e8:	f000 f8bc 	bl	8008a64 <_sbrk_r>
 80088ec:	6030      	str	r0, [r6, #0]
 80088ee:	4621      	mov	r1, r4
 80088f0:	4628      	mov	r0, r5
 80088f2:	f000 f8b7 	bl	8008a64 <_sbrk_r>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d00a      	beq.n	8008910 <sbrk_aligned+0x34>
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d007      	beq.n	8008914 <sbrk_aligned+0x38>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f8ac 	bl	8008a64 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d101      	bne.n	8008914 <sbrk_aligned+0x38>
 8008910:	f04f 34ff 	mov.w	r4, #4294967295
 8008914:	4620      	mov	r0, r4
 8008916:	bd70      	pop	{r4, r5, r6, pc}
 8008918:	20001e70 	.word	0x20001e70

0800891c <_malloc_r>:
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	1ccd      	adds	r5, r1, #3
 8008922:	f025 0503 	bic.w	r5, r5, #3
 8008926:	3508      	adds	r5, #8
 8008928:	2d0c      	cmp	r5, #12
 800892a:	bf38      	it	cc
 800892c:	250c      	movcc	r5, #12
 800892e:	2d00      	cmp	r5, #0
 8008930:	4607      	mov	r7, r0
 8008932:	db01      	blt.n	8008938 <_malloc_r+0x1c>
 8008934:	42a9      	cmp	r1, r5
 8008936:	d905      	bls.n	8008944 <_malloc_r+0x28>
 8008938:	230c      	movs	r3, #12
 800893a:	603b      	str	r3, [r7, #0]
 800893c:	2600      	movs	r6, #0
 800893e:	4630      	mov	r0, r6
 8008940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008944:	4e2e      	ldr	r6, [pc, #184]	; (8008a00 <_malloc_r+0xe4>)
 8008946:	f000 f89d 	bl	8008a84 <__malloc_lock>
 800894a:	6833      	ldr	r3, [r6, #0]
 800894c:	461c      	mov	r4, r3
 800894e:	bb34      	cbnz	r4, 800899e <_malloc_r+0x82>
 8008950:	4629      	mov	r1, r5
 8008952:	4638      	mov	r0, r7
 8008954:	f7ff ffc2 	bl	80088dc <sbrk_aligned>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	4604      	mov	r4, r0
 800895c:	d14d      	bne.n	80089fa <_malloc_r+0xde>
 800895e:	6834      	ldr	r4, [r6, #0]
 8008960:	4626      	mov	r6, r4
 8008962:	2e00      	cmp	r6, #0
 8008964:	d140      	bne.n	80089e8 <_malloc_r+0xcc>
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	4631      	mov	r1, r6
 800896a:	4638      	mov	r0, r7
 800896c:	eb04 0803 	add.w	r8, r4, r3
 8008970:	f000 f878 	bl	8008a64 <_sbrk_r>
 8008974:	4580      	cmp	r8, r0
 8008976:	d13a      	bne.n	80089ee <_malloc_r+0xd2>
 8008978:	6821      	ldr	r1, [r4, #0]
 800897a:	3503      	adds	r5, #3
 800897c:	1a6d      	subs	r5, r5, r1
 800897e:	f025 0503 	bic.w	r5, r5, #3
 8008982:	3508      	adds	r5, #8
 8008984:	2d0c      	cmp	r5, #12
 8008986:	bf38      	it	cc
 8008988:	250c      	movcc	r5, #12
 800898a:	4629      	mov	r1, r5
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff ffa5 	bl	80088dc <sbrk_aligned>
 8008992:	3001      	adds	r0, #1
 8008994:	d02b      	beq.n	80089ee <_malloc_r+0xd2>
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	442b      	add	r3, r5
 800899a:	6023      	str	r3, [r4, #0]
 800899c:	e00e      	b.n	80089bc <_malloc_r+0xa0>
 800899e:	6822      	ldr	r2, [r4, #0]
 80089a0:	1b52      	subs	r2, r2, r5
 80089a2:	d41e      	bmi.n	80089e2 <_malloc_r+0xc6>
 80089a4:	2a0b      	cmp	r2, #11
 80089a6:	d916      	bls.n	80089d6 <_malloc_r+0xba>
 80089a8:	1961      	adds	r1, r4, r5
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	6025      	str	r5, [r4, #0]
 80089ae:	bf18      	it	ne
 80089b0:	6059      	strne	r1, [r3, #4]
 80089b2:	6863      	ldr	r3, [r4, #4]
 80089b4:	bf08      	it	eq
 80089b6:	6031      	streq	r1, [r6, #0]
 80089b8:	5162      	str	r2, [r4, r5]
 80089ba:	604b      	str	r3, [r1, #4]
 80089bc:	4638      	mov	r0, r7
 80089be:	f104 060b 	add.w	r6, r4, #11
 80089c2:	f000 f865 	bl	8008a90 <__malloc_unlock>
 80089c6:	f026 0607 	bic.w	r6, r6, #7
 80089ca:	1d23      	adds	r3, r4, #4
 80089cc:	1af2      	subs	r2, r6, r3
 80089ce:	d0b6      	beq.n	800893e <_malloc_r+0x22>
 80089d0:	1b9b      	subs	r3, r3, r6
 80089d2:	50a3      	str	r3, [r4, r2]
 80089d4:	e7b3      	b.n	800893e <_malloc_r+0x22>
 80089d6:	6862      	ldr	r2, [r4, #4]
 80089d8:	42a3      	cmp	r3, r4
 80089da:	bf0c      	ite	eq
 80089dc:	6032      	streq	r2, [r6, #0]
 80089de:	605a      	strne	r2, [r3, #4]
 80089e0:	e7ec      	b.n	80089bc <_malloc_r+0xa0>
 80089e2:	4623      	mov	r3, r4
 80089e4:	6864      	ldr	r4, [r4, #4]
 80089e6:	e7b2      	b.n	800894e <_malloc_r+0x32>
 80089e8:	4634      	mov	r4, r6
 80089ea:	6876      	ldr	r6, [r6, #4]
 80089ec:	e7b9      	b.n	8008962 <_malloc_r+0x46>
 80089ee:	230c      	movs	r3, #12
 80089f0:	603b      	str	r3, [r7, #0]
 80089f2:	4638      	mov	r0, r7
 80089f4:	f000 f84c 	bl	8008a90 <__malloc_unlock>
 80089f8:	e7a1      	b.n	800893e <_malloc_r+0x22>
 80089fa:	6025      	str	r5, [r4, #0]
 80089fc:	e7de      	b.n	80089bc <_malloc_r+0xa0>
 80089fe:	bf00      	nop
 8008a00:	20001e6c 	.word	0x20001e6c

08008a04 <_realloc_r>:
 8008a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a08:	4680      	mov	r8, r0
 8008a0a:	4614      	mov	r4, r2
 8008a0c:	460e      	mov	r6, r1
 8008a0e:	b921      	cbnz	r1, 8008a1a <_realloc_r+0x16>
 8008a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a14:	4611      	mov	r1, r2
 8008a16:	f7ff bf81 	b.w	800891c <_malloc_r>
 8008a1a:	b92a      	cbnz	r2, 8008a28 <_realloc_r+0x24>
 8008a1c:	f7ff ff12 	bl	8008844 <_free_r>
 8008a20:	4625      	mov	r5, r4
 8008a22:	4628      	mov	r0, r5
 8008a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a28:	f000 f838 	bl	8008a9c <_malloc_usable_size_r>
 8008a2c:	4284      	cmp	r4, r0
 8008a2e:	4607      	mov	r7, r0
 8008a30:	d802      	bhi.n	8008a38 <_realloc_r+0x34>
 8008a32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a36:	d812      	bhi.n	8008a5e <_realloc_r+0x5a>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4640      	mov	r0, r8
 8008a3c:	f7ff ff6e 	bl	800891c <_malloc_r>
 8008a40:	4605      	mov	r5, r0
 8008a42:	2800      	cmp	r0, #0
 8008a44:	d0ed      	beq.n	8008a22 <_realloc_r+0x1e>
 8008a46:	42bc      	cmp	r4, r7
 8008a48:	4622      	mov	r2, r4
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	bf28      	it	cs
 8008a4e:	463a      	movcs	r2, r7
 8008a50:	f7ff fed0 	bl	80087f4 <memcpy>
 8008a54:	4631      	mov	r1, r6
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7ff fef4 	bl	8008844 <_free_r>
 8008a5c:	e7e1      	b.n	8008a22 <_realloc_r+0x1e>
 8008a5e:	4635      	mov	r5, r6
 8008a60:	e7df      	b.n	8008a22 <_realloc_r+0x1e>
	...

08008a64 <_sbrk_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d06      	ldr	r5, [pc, #24]	; (8008a80 <_sbrk_r+0x1c>)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	4604      	mov	r4, r0
 8008a6c:	4608      	mov	r0, r1
 8008a6e:	602b      	str	r3, [r5, #0]
 8008a70:	f7f8 f96c 	bl	8000d4c <_sbrk>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_sbrk_r+0x1a>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_sbrk_r+0x1a>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	20001e74 	.word	0x20001e74

08008a84 <__malloc_lock>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__malloc_lock+0x8>)
 8008a86:	f000 b811 	b.w	8008aac <__retarget_lock_acquire_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	20001e78 	.word	0x20001e78

08008a90 <__malloc_unlock>:
 8008a90:	4801      	ldr	r0, [pc, #4]	; (8008a98 <__malloc_unlock+0x8>)
 8008a92:	f000 b80c 	b.w	8008aae <__retarget_lock_release_recursive>
 8008a96:	bf00      	nop
 8008a98:	20001e78 	.word	0x20001e78

08008a9c <_malloc_usable_size_r>:
 8008a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa0:	1f18      	subs	r0, r3, #4
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfbc      	itt	lt
 8008aa6:	580b      	ldrlt	r3, [r1, r0]
 8008aa8:	18c0      	addlt	r0, r0, r3
 8008aaa:	4770      	bx	lr

08008aac <__retarget_lock_acquire_recursive>:
 8008aac:	4770      	bx	lr

08008aae <__retarget_lock_release_recursive>:
 8008aae:	4770      	bx	lr

08008ab0 <_init>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	bf00      	nop
 8008ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab6:	bc08      	pop	{r3}
 8008ab8:	469e      	mov	lr, r3
 8008aba:	4770      	bx	lr

08008abc <_fini>:
 8008abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008abe:	bf00      	nop
 8008ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac2:	bc08      	pop	{r3}
 8008ac4:	469e      	mov	lr, r3
 8008ac6:	4770      	bx	lr
