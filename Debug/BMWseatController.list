
BMWseatController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed0  08002ed0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ed8  08002ed8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002edc  08002edc  00012edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  2000000c  08002eec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000614  08002eec  00020614  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e11d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8a  00000000  00000000  0002e159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158ab  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb2b  00000000  00000000  00046dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086398  00000000  00000000  000558fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbc96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a0  00000000  00000000  000dbce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002e74 	.word	0x08002e74

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002e74 	.word	0x08002e74

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SetHalfBridge>:
#include "board.h"
#include "main.h"
#include "stm32f4xx_hal.h"

void SetHalfBridge(HalfBridge_t hb, Direction_t dir)
{
 80004dc:	b5b0      	push	{r4, r5, r7, lr}
 80004de:	b094      	sub	sp, #80	; 0x50
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
    GPIO_TypeDef *portA[] = {GPIOA, GPIOA, GPIOA, GPIOB, GPIOB};
 80004ec:	4b62      	ldr	r3, [pc, #392]	; (8000678 <SetHalfBridge+0x19c>)
 80004ee:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80004f2:	461d      	mov	r5, r3
 80004f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f8:	682b      	ldr	r3, [r5, #0]
 80004fa:	6023      	str	r3, [r4, #0]
    uint16_t pinA[] = {BR1A_Pin, BR2A_Pin, BR3A_Pin, BR4A_Pin, BR5A_Pin};
 80004fc:	4a5f      	ldr	r2, [pc, #380]	; (800067c <SetHalfBridge+0x1a0>)
 80004fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000502:	ca07      	ldmia	r2, {r0, r1, r2}
 8000504:	c303      	stmia	r3!, {r0, r1}
 8000506:	801a      	strh	r2, [r3, #0]
    GPIO_TypeDef *portB[] = {GPIOA, GPIOA, GPIOA, GPIOB, GPIOB};
 8000508:	4b5b      	ldr	r3, [pc, #364]	; (8000678 <SetHalfBridge+0x19c>)
 800050a:	f107 0414 	add.w	r4, r7, #20
 800050e:	461d      	mov	r5, r3
 8000510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000514:	682b      	ldr	r3, [r5, #0]
 8000516:	6023      	str	r3, [r4, #0]
    uint16_t pinB[] = {BR1B_Pin, BR2B_Pin, BR3B_Pin, BR4B_Pin, BR5B_Pin};
 8000518:	4a59      	ldr	r2, [pc, #356]	; (8000680 <SetHalfBridge+0x1a4>)
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000520:	c303      	stmia	r3!, {r0, r1}
 8000522:	801a      	strh	r2, [r3, #0]

    if (hb == IDLE_MOTOR) {
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d129      	bne.n	800057e <SetHalfBridge+0xa2>
        // Set all half-bridges to idle
        for (int i = 0; i < 5; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800052e:	e022      	b.n	8000576 <SetHalfBridge+0x9a>
            HAL_GPIO_WritePin(portA[i], pinA[i], GPIO_PIN_RESET);
 8000530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000532:	009b      	lsls	r3, r3, #2
 8000534:	3350      	adds	r3, #80	; 0x50
 8000536:	443b      	add	r3, r7
 8000538:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 800053c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	3350      	adds	r3, #80	; 0x50
 8000542:	443b      	add	r3, r7
 8000544:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000548:	2200      	movs	r2, #0
 800054a:	4619      	mov	r1, r3
 800054c:	f000 ff4e 	bl	80013ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portB[i], pinB[i], GPIO_PIN_RESET);
 8000550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	3350      	adds	r3, #80	; 0x50
 8000556:	443b      	add	r3, r7
 8000558:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 800055c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	3350      	adds	r3, #80	; 0x50
 8000562:	443b      	add	r3, r7
 8000564:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8000568:	2200      	movs	r2, #0
 800056a:	4619      	mov	r1, r3
 800056c:	f000 ff3e 	bl	80013ec <HAL_GPIO_WritePin>
        for (int i = 0; i < 5; i++) {
 8000570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000572:	3301      	adds	r3, #1
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000578:	2b04      	cmp	r3, #4
 800057a:	ddd9      	ble.n	8000530 <SetHalfBridge+0x54>
        }
        return;
 800057c:	e078      	b.n	8000670 <SetHalfBridge+0x194>
    }

    if (hb < HB1 || hb > HB5) return; // Invalid input guard
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d072      	beq.n	800066a <SetHalfBridge+0x18e>
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	2b05      	cmp	r3, #5
 8000588:	d86f      	bhi.n	800066a <SetHalfBridge+0x18e>

    int index = hb - HB1;
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	3b01      	subs	r3, #1
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (dir) {
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d048      	beq.n	8000628 <SetHalfBridge+0x14c>
 8000596:	2b02      	cmp	r3, #2
 8000598:	dc69      	bgt.n	800066e <SetHalfBridge+0x192>
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <SetHalfBridge+0xc8>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d021      	beq.n	80005e6 <SetHalfBridge+0x10a>
        case DIR_REVERSE:
            HAL_GPIO_WritePin(portA[index], pinA[index], GPIO_PIN_RESET);
            HAL_GPIO_WritePin(portB[index], pinB[index], GPIO_PIN_SET);
            break;
        default:
            break;
 80005a2:	e064      	b.n	800066e <SetHalfBridge+0x192>
            HAL_GPIO_WritePin(portA[index], pinA[index], GPIO_PIN_RESET);
 80005a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	3350      	adds	r3, #80	; 0x50
 80005aa:	443b      	add	r3, r7
 80005ac:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 80005b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	3350      	adds	r3, #80	; 0x50
 80005b6:	443b      	add	r3, r7
 80005b8:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80005bc:	2200      	movs	r2, #0
 80005be:	4619      	mov	r1, r3
 80005c0:	f000 ff14 	bl	80013ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portB[index], pinB[index], GPIO_PIN_RESET);
 80005c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3350      	adds	r3, #80	; 0x50
 80005ca:	443b      	add	r3, r7
 80005cc:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 80005d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	3350      	adds	r3, #80	; 0x50
 80005d6:	443b      	add	r3, r7
 80005d8:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 80005dc:	2200      	movs	r2, #0
 80005de:	4619      	mov	r1, r3
 80005e0:	f000 ff04 	bl	80013ec <HAL_GPIO_WritePin>
            break;
 80005e4:	e044      	b.n	8000670 <SetHalfBridge+0x194>
            HAL_GPIO_WritePin(portA[index], pinA[index], GPIO_PIN_SET);
 80005e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	3350      	adds	r3, #80	; 0x50
 80005ec:	443b      	add	r3, r7
 80005ee:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 80005f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	3350      	adds	r3, #80	; 0x50
 80005f8:	443b      	add	r3, r7
 80005fa:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 80005fe:	2201      	movs	r2, #1
 8000600:	4619      	mov	r1, r3
 8000602:	f000 fef3 	bl	80013ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portB[index], pinB[index], GPIO_PIN_RESET);
 8000606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	3350      	adds	r3, #80	; 0x50
 800060c:	443b      	add	r3, r7
 800060e:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 8000612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000614:	005b      	lsls	r3, r3, #1
 8000616:	3350      	adds	r3, #80	; 0x50
 8000618:	443b      	add	r3, r7
 800061a:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800061e:	2200      	movs	r2, #0
 8000620:	4619      	mov	r1, r3
 8000622:	f000 fee3 	bl	80013ec <HAL_GPIO_WritePin>
            break;
 8000626:	e023      	b.n	8000670 <SetHalfBridge+0x194>
            HAL_GPIO_WritePin(portA[index], pinA[index], GPIO_PIN_RESET);
 8000628:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	3350      	adds	r3, #80	; 0x50
 800062e:	443b      	add	r3, r7
 8000630:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8000634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	3350      	adds	r3, #80	; 0x50
 800063a:	443b      	add	r3, r7
 800063c:	f833 3c28 	ldrh.w	r3, [r3, #-40]
 8000640:	2200      	movs	r2, #0
 8000642:	4619      	mov	r1, r3
 8000644:	f000 fed2 	bl	80013ec <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(portB[index], pinB[index], GPIO_PIN_SET);
 8000648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	3350      	adds	r3, #80	; 0x50
 800064e:	443b      	add	r3, r7
 8000650:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 8000654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	3350      	adds	r3, #80	; 0x50
 800065a:	443b      	add	r3, r7
 800065c:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 8000660:	2201      	movs	r2, #1
 8000662:	4619      	mov	r1, r3
 8000664:	f000 fec2 	bl	80013ec <HAL_GPIO_WritePin>
            break;
 8000668:	e002      	b.n	8000670 <SetHalfBridge+0x194>
    if (hb < HB1 || hb > HB5) return; // Invalid input guard
 800066a:	bf00      	nop
 800066c:	e000      	b.n	8000670 <SetHalfBridge+0x194>
            break;
 800066e:	bf00      	nop
    }
}
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bdb0      	pop	{r4, r5, r7, pc}
 8000676:	bf00      	nop
 8000678:	08002e8c 	.word	0x08002e8c
 800067c:	08002ea0 	.word	0x08002ea0
 8000680:	08002eac 	.word	0x08002eac

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fbaf 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f853 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f96d 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000696:	f000 f8bb 	bl	8000810 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f8e7 	bl	800086c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800069e:	f000 f90f 	bl	80008c0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a2:	f000 f937 	bl	8000914 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (HalfBridge_t hb = HB1; hb <= HB5; hb++) {
 80006a6:	2301      	movs	r3, #1
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	e03f      	b.n	800072c <main+0xa8>
	      SetHalfBridge(hb, DIR_FORWARD);
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff13 	bl	80004dc <SetHalfBridge>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <main+0xb0>)
 80006bc:	f000 feaf 	bl	800141e <HAL_GPIO_TogglePin>
	      HAL_Delay(3000);  // 3 seconds forward
 80006c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c4:	f000 fc04 	bl	8000ed0 <HAL_Delay>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006cc:	4819      	ldr	r0, [pc, #100]	; (8000734 <main+0xb0>)
 80006ce:	f000 fea6 	bl	800141e <HAL_GPIO_TogglePin>

	      SetHalfBridge(hb, DIR_REVERSE);
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2102      	movs	r1, #2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff00 	bl	80004dc <SetHalfBridge>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e0:	4814      	ldr	r0, [pc, #80]	; (8000734 <main+0xb0>)
 80006e2:	f000 fe9c 	bl	800141e <HAL_GPIO_TogglePin>
	      HAL_Delay(3000);  // 3 seconds reverse
 80006e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006ea:	f000 fbf1 	bl	8000ed0 <HAL_Delay>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80006ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006f2:	4810      	ldr	r0, [pc, #64]	; (8000734 <main+0xb0>)
 80006f4:	f000 fe93 	bl	800141e <HAL_GPIO_TogglePin>
	      SetHalfBridge(hb, DIR_IDLE);  // Optional step before idle all
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff feed 	bl	80004dc <SetHalfBridge>
	      HAL_Delay(1000);  // Pause 1 second
 8000702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000706:	f000 fbe3 	bl	8000ed0 <HAL_Delay>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800070a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800070e:	4809      	ldr	r0, [pc, #36]	; (8000734 <main+0xb0>)
 8000710:	f000 fe85 	bl	800141e <HAL_GPIO_TogglePin>

	      SetHalfBridge(IDLE_MOTOR, DIR_IDLE);  // All off
 8000714:	2100      	movs	r1, #0
 8000716:	2000      	movs	r0, #0
 8000718:	f7ff fee0 	bl	80004dc <SetHalfBridge>
	      HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800071c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <main+0xb0>)
 8000722:	f000 fe7c 	bl	800141e <HAL_GPIO_TogglePin>
	  for (HalfBridge_t hb = HB1; hb <= HB5; hb++) {
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	3301      	adds	r3, #1
 800072a:	71fb      	strb	r3, [r7, #7]
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b05      	cmp	r3, #5
 8000730:	d9bc      	bls.n	80006ac <main+0x28>
 8000732:	e7b8      	b.n	80006a6 <main+0x22>
 8000734:	40020800 	.word	0x40020800

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	2230      	movs	r2, #48	; 0x30
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f002 fb8c 	bl	8002e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <SystemClock_Config+0xd0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a22      	ldr	r2, [pc, #136]	; (800080c <SystemClock_Config+0xd4>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079e:	2301      	movs	r3, #1
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2310      	movs	r3, #16
 80007a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007b0:	230f      	movs	r3, #15
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007b4:	2390      	movs	r3, #144	; 0x90
 80007b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007bc:	2305      	movs	r3, #5
 80007be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 f8a7 	bl	8001918 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007d0:	f000 f968 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fb0a 	bl	8001e08 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007fa:	f000 f953 	bl	8000aa4 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_I2C1_Init+0x50>)
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <MX_I2C1_Init+0x54>)
 8000818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_I2C1_Init+0x50>)
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <MX_I2C1_Init+0x58>)
 800081e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_I2C1_Init+0x50>)
 800082e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_I2C1_Init+0x50>)
 800084e:	f000 fe01 	bl	8001454 <HAL_I2C_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000858:	f000 f924 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000028 	.word	0x20000028
 8000864:	40005400 	.word	0x40005400
 8000868:	000186a0 	.word	0x000186a0

0800086c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <MX_USART1_UART_Init+0x50>)
 8000874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x4c>)
 80008a4:	f001 fc90 	bl	80021c8 <HAL_UART_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ae:	f000 f8f9 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000007c 	.word	0x2000007c
 80008bc:	40011000 	.word	0x40011000

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 80008f6:	2100      	movs	r1, #0
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008fa:	f001 fcb2 	bl	8002262 <HAL_LIN_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000904:	f000 f8ce 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000c0 	.word	0x200000c0
 8000910:	40004400 	.word	0x40004400

08000914 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800091e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000922:	2204      	movs	r2, #4
 8000924:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000928:	2202      	movs	r2, #2
 800092a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000934:	2202      	movs	r2, #2
 8000936:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	f000 fec0 	bl	80016dc <HAL_PCD_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 f89f 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000104 	.word	0x20000104

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <MX_GPIO_Init+0x124>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <MX_GPIO_Init+0x124>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x124>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3a      	ldr	r2, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a33      	ldr	r2, [pc, #204]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b31      	ldr	r3, [pc, #196]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2c      	ldr	r2, [pc, #176]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <MX_GPIO_Init+0x124>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <MX_GPIO_Init+0x128>)
 80009fe:	f000 fcf5 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000a02:	2200      	movs	r2, #0
 8000a04:	21f3      	movs	r1, #243	; 0xf3
 8000a06:	4825      	ldr	r0, [pc, #148]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000a08:	f000 fcf0 	bl	80013ec <HAL_GPIO_WritePin>
                          |BR3B_Pin|BR3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f247 5187 	movw	r1, #30087	; 0x7587
 8000a12:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a14:	f000 fcea 	bl	80013ec <HAL_GPIO_WritePin>
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4819      	ldr	r0, [pc, #100]	; (8000a98 <MX_GPIO_Init+0x128>)
 8000a32:	f000 fb57 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR1B_Pin BR1A_Pin BR2B_Pin BR2A_Pin
                           BR3B_Pin BR3A_Pin */
  GPIO_InitStruct.Pin = BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000a36:	23f3      	movs	r3, #243	; 0xf3
 8000a38:	617b      	str	r3, [r7, #20]
                          |BR3B_Pin|BR3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4813      	ldr	r0, [pc, #76]	; (8000a9c <MX_GPIO_Init+0x12c>)
 8000a4e:	f000 fb49 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR4B_Pin BR4A_Pin BR5B_Pin BR5A_Pin
                           LS3_EN_Pin LS2_EN_Pin LS1_EN_Pin LIN_CS_Pin
                           RS485DE_Pin */
  GPIO_InitStruct.Pin = BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000a52:	f247 5387 	movw	r3, #30087	; 0x7587
 8000a56:	617b      	str	r3, [r7, #20]
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a6c:	f000 fb3a 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_ALERT_Pin */
  GPIO_InitStruct.Pin = INA_ALERT_Pin;
 8000a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INA_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	; (8000aa0 <MX_GPIO_Init+0x130>)
 8000a86:	f000 fb2d 	bl	80010e4 <HAL_GPIO_Init>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_I2C_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12c      	bne.n	8000b7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a17      	ldr	r2, [pc, #92]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b44:	2312      	movs	r3, #18
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b50:	2304      	movs	r3, #4
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	; (8000b8c <HAL_I2C_MspInit+0x8c>)
 8000b5c:	f000 fac2 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_I2C_MspInit+0x88>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40005400 	.word	0x40005400
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020400 	.word	0x40020400

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a32      	ldr	r2, [pc, #200]	; (8000c78 <HAL_UART_MspInit+0xe8>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12d      	bne.n	8000c0e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b31      	ldr	r3, [pc, #196]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a30      	ldr	r2, [pc, #192]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0310 	orr.w	r3, r3, #16
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b2e      	ldr	r3, [pc, #184]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	4b2a      	ldr	r3, [pc, #168]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a29      	ldr	r2, [pc, #164]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b27      	ldr	r3, [pc, #156]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	481e      	ldr	r0, [pc, #120]	; (8000c80 <HAL_UART_MspInit+0xf0>)
 8000c08:	f000 fa6c 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	e030      	b.n	8000c70 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <HAL_UART_MspInit+0xf4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d12b      	bne.n	8000c70 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6313      	str	r3, [r2, #48]	; 0x30
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_UART_MspInit+0xec>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c50:	230c      	movs	r3, #12
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	2302      	movs	r3, #2
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c60:	2307      	movs	r3, #7
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0xf0>)
 8000c6c:	f000 fa3a 	bl	80010e4 <HAL_GPIO_Init>
}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40004400 	.word	0x40004400

08000c88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ca8:	d132      	bne.n	8000d10 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cd8:	230a      	movs	r3, #10
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480e      	ldr	r0, [pc, #56]	; (8000d1c <HAL_PCD_MspInit+0x94>)
 8000ce4:	f000 f9fe 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf2:	6353      	str	r3, [r2, #52]	; 0x34
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfc:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6453      	str	r3, [r2, #68]	; 0x44
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <HAL_PCD_MspInit+0x90>)
 8000d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40020000 	.word	0x40020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <NMI_Handler+0x4>

08000d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f890 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <SystemInit+0x20>)
 8000d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <SystemInit+0x20>)
 8000d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd7 	bl	8000d74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f002 f829 	bl	8002e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc5b 	bl	8000684 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ddc:	08002ee0 	.word	0x08002ee0
  ldr r2, =_sbss
 8000de0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000de4:	20000614 	.word	0x20000614

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f931 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe46 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93b 	bl	80010ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f911 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	20000610 	.word	0x20000610

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000610 	.word	0x20000610

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff ffee 	bl	8000eb8 <HAL_GetTick>
 8000edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef6:	bf00      	nop
 8000ef8:	f7ff ffde 	bl	8000eb8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5c 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e159      	b.n	80013b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8148 	bne.w	80013ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d130      	bne.n	8001198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 0201 	and.w	r2, r3, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d017      	beq.n	80011d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d123      	bne.n	8001228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a2 	beq.w	80013ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b57      	ldr	r3, [pc, #348]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a56      	ldr	r2, [pc, #344]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b54      	ldr	r3, [pc, #336]	; (80013cc <HAL_GPIO_Init+0x2e8>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_GPIO_Init+0x2ec>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x202>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_GPIO_Init+0x2f4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1fe>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a47      	ldr	r2, [pc, #284]	; (80013dc <HAL_GPIO_Init+0x2f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1fa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a46      	ldr	r2, [pc, #280]	; (80013e0 <HAL_GPIO_Init+0x2fc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1f6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_GPIO_Init+0x300>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1f2>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	; (80013d0 <HAL_GPIO_Init+0x2ec>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a24      	ldr	r2, [pc, #144]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135a:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_GPIO_Init+0x304>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_GPIO_Init+0x304>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a8:	4a0f      	ldr	r2, [pc, #60]	; (80013e8 <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f aea2 	bls.w	8001100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141e:	b480      	push	{r7}
 8001420:	b085      	sub	sp, #20
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	460b      	mov	r3, r1
 8001428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	041a      	lsls	r2, r3, #16
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43d9      	mvns	r1, r3
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	400b      	ands	r3, r1
 8001440:	431a      	orrs	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e12b      	b.n	80016be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fb40 	bl	8000b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	; 0x24
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0201 	bic.w	r2, r2, #1
 8001496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014b8:	f000 fe5e 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80014bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a81      	ldr	r2, [pc, #516]	; (80016c8 <HAL_I2C_Init+0x274>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d807      	bhi.n	80014d8 <HAL_I2C_Init+0x84>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4a80      	ldr	r2, [pc, #512]	; (80016cc <HAL_I2C_Init+0x278>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	bf94      	ite	ls
 80014d0:	2301      	movls	r3, #1
 80014d2:	2300      	movhi	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	e006      	b.n	80014e6 <HAL_I2C_Init+0x92>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4a7d      	ldr	r2, [pc, #500]	; (80016d0 <HAL_I2C_Init+0x27c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	bf94      	ite	ls
 80014e0:	2301      	movls	r3, #1
 80014e2:	2300      	movhi	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e0e7      	b.n	80016be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4a78      	ldr	r2, [pc, #480]	; (80016d4 <HAL_I2C_Init+0x280>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0c9b      	lsrs	r3, r3, #18
 80014f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4a6a      	ldr	r2, [pc, #424]	; (80016c8 <HAL_I2C_Init+0x274>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d802      	bhi.n	8001528 <HAL_I2C_Init+0xd4>
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	e009      	b.n	800153c <HAL_I2C_Init+0xe8>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800152e:	fb02 f303 	mul.w	r3, r2, r3
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_I2C_Init+0x284>)
 8001534:	fba2 2303 	umull	r2, r3, r2, r3
 8001538:	099b      	lsrs	r3, r3, #6
 800153a:	3301      	adds	r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	430b      	orrs	r3, r1
 8001542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800154e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	495c      	ldr	r1, [pc, #368]	; (80016c8 <HAL_I2C_Init+0x274>)
 8001558:	428b      	cmp	r3, r1
 800155a:	d819      	bhi.n	8001590 <HAL_I2C_Init+0x13c>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e59      	subs	r1, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fbb1 f3f3 	udiv	r3, r1, r3
 800156a:	1c59      	adds	r1, r3, #1
 800156c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001570:	400b      	ands	r3, r1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <HAL_I2C_Init+0x138>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1e59      	subs	r1, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fbb1 f3f3 	udiv	r3, r1, r3
 8001584:	3301      	adds	r3, #1
 8001586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800158a:	e051      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 800158c:	2304      	movs	r3, #4
 800158e:	e04f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_I2C_Init+0x168>
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1e58      	subs	r0, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6859      	ldr	r1, [r3, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	440b      	add	r3, r1
 80015a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015aa:	3301      	adds	r3, #1
 80015ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	e012      	b.n	80015e2 <HAL_I2C_Init+0x18e>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	0099      	lsls	r1, r3, #2
 80015cc:	440b      	add	r3, r1
 80015ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d8:	2b00      	cmp	r3, #0
 80015da:	bf0c      	ite	eq
 80015dc:	2301      	moveq	r3, #1
 80015de:	2300      	movne	r3, #0
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Init+0x196>
 80015e6:	2301      	movs	r3, #1
 80015e8:	e022      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10e      	bne.n	8001610 <HAL_I2C_Init+0x1bc>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e58      	subs	r0, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6859      	ldr	r1, [r3, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	440b      	add	r3, r1
 8001600:	fbb0 f3f3 	udiv	r3, r0, r3
 8001604:	3301      	adds	r3, #1
 8001606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160e:	e00f      	b.n	8001630 <HAL_I2C_Init+0x1dc>
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	1e58      	subs	r0, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	0099      	lsls	r1, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	fbb0 f3f3 	udiv	r3, r0, r3
 8001626:	3301      	adds	r3, #1
 8001628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	6809      	ldr	r1, [r1, #0]
 8001634:	4313      	orrs	r3, r2
 8001636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800165e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6911      	ldr	r1, [r2, #16]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68d2      	ldr	r2, [r2, #12]
 800166a:	4311      	orrs	r1, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	430b      	orrs	r3, r1
 8001672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f042 0201 	orr.w	r2, r2, #1
 800169e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	000186a0 	.word	0x000186a0
 80016cc:	001e847f 	.word	0x001e847f
 80016d0:	003d08ff 	.word	0x003d08ff
 80016d4:	431bde83 	.word	0x431bde83
 80016d8:	10624dd3 	.word	0x10624dd3

080016dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016de:	b08f      	sub	sp, #60	; 0x3c
 80016e0:	af0a      	add	r7, sp, #40	; 0x28
 80016e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e10f      	b.n	800190e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d106      	bne.n	800170e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fabd 	bl	8000c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2203      	movs	r2, #3
 8001712:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f001 f8d4 	bl	80028da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	687e      	ldr	r6, [r7, #4]
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	e894 0003 	ldmia.w	r4, {r0, r1}
 800174c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001750:	1d33      	adds	r3, r6, #4
 8001752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001754:	6838      	ldr	r0, [r7, #0]
 8001756:	f001 f85f 	bl	8002818 <USB_CoreInit>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2202      	movs	r2, #2
 8001764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0d0      	b.n	800190e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f8c2 	bl	80028fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e04a      	b.n	8001814 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800177e:	7bfa      	ldrb	r2, [r7, #15]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	333d      	adds	r3, #61	; 0x3d
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001792:	7bfa      	ldrb	r2, [r7, #15]
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	4613      	mov	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4413      	add	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	440b      	add	r3, r1
 80017a0:	333c      	adds	r3, #60	; 0x3c
 80017a2:	7bfa      	ldrb	r2, [r7, #15]
 80017a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017a6:	7bfa      	ldrb	r2, [r7, #15]
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	b298      	uxth	r0, r3
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3344      	adds	r3, #68	; 0x44
 80017ba:	4602      	mov	r2, r0
 80017bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3340      	adds	r3, #64	; 0x40
 80017ce:	2200      	movs	r2, #0
 80017d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017d2:	7bfa      	ldrb	r2, [r7, #15]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3348      	adds	r3, #72	; 0x48
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017e6:	7bfa      	ldrb	r2, [r7, #15]
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	334c      	adds	r3, #76	; 0x4c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017fa:	7bfa      	ldrb	r2, [r7, #15]
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	4413      	add	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	440b      	add	r3, r1
 8001808:	3354      	adds	r3, #84	; 0x54
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	3301      	adds	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	429a      	cmp	r2, r3
 800181c:	d3af      	bcc.n	800177e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	73fb      	strb	r3, [r7, #15]
 8001822:	e044      	b.n	80018ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001850:	7bfa      	ldrb	r2, [r7, #15]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001866:	7bfa      	ldrb	r2, [r7, #15]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001892:	7bfa      	ldrb	r2, [r7, #15]
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	3301      	adds	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3b5      	bcc.n	8001824 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	687e      	ldr	r6, [r7, #4]
 80018c0:	466d      	mov	r5, sp
 80018c2:	f106 0410 	add.w	r4, r6, #16
 80018c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d6:	1d33      	adds	r3, r6, #4
 80018d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018da:	6838      	ldr	r0, [r7, #0]
 80018dc:	f001 f85a 	bl	8002994 <USB_DevInit>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00d      	b.n	800190e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f001 fa25 	bl	8002d56 <USB_DevDisconnect>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001918 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e267      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d075      	beq.n	8001a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001936:	4b88      	ldr	r3, [pc, #544]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b04      	cmp	r3, #4
 8001940:	d00c      	beq.n	800195c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001942:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194a:	2b08      	cmp	r3, #8
 800194c:	d112      	bne.n	8001974 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800195a:	d10b      	bne.n	8001974 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d05b      	beq.n	8001a20 <HAL_RCC_OscConfig+0x108>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d157      	bne.n	8001a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e242      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d106      	bne.n	800198c <HAL_RCC_OscConfig+0x74>
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a75      	ldr	r2, [pc, #468]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e01d      	b.n	80019c8 <HAL_RCC_OscConfig+0xb0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001994:	d10c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x98>
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a6f      	ldr	r2, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 800199c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6c      	ldr	r2, [pc, #432]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	e00b      	b.n	80019c8 <HAL_RCC_OscConfig+0xb0>
 80019b0:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a65      	ldr	r2, [pc, #404]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa72 	bl	8000eb8 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fa6e 	bl	8000eb8 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e207      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0xc0>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa5e 	bl	8000eb8 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff fa5a 	bl	8000eb8 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	; 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e1f3      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	4b51      	ldr	r3, [pc, #324]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0xe8>
 8001a1e:	e000      	b.n	8001a22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d063      	beq.n	8001af6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2e:	4b4a      	ldr	r3, [pc, #296]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d00b      	beq.n	8001a52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a42:	2b08      	cmp	r3, #8
 8001a44:	d11c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a46:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d116      	bne.n	8001a80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	4b41      	ldr	r3, [pc, #260]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_RCC_OscConfig+0x152>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d001      	beq.n	8001a6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e1c7      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	4937      	ldr	r1, [pc, #220]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a7e:	e03a      	b.n	8001af6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a88:	4b34      	ldr	r3, [pc, #208]	; (8001b5c <HAL_RCC_OscConfig+0x244>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fa13 	bl	8000eb8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a96:	f7ff fa0f 	bl	8000eb8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e1a8      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa8:	4b2b      	ldr	r3, [pc, #172]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f0      	beq.n	8001a96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4925      	ldr	r1, [pc, #148]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e015      	b.n	8001af6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <HAL_RCC_OscConfig+0x244>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff f9f2 	bl	8000eb8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f9ee 	bl	8000eb8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e187      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d036      	beq.n	8001b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d016      	beq.n	8001b38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_RCC_OscConfig+0x248>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f9d2 	bl	8000eb8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff f9ce 	bl	8000eb8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e167      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x200>
 8001b36:	e01b      	b.n	8001b70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_RCC_OscConfig+0x248>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff f9bb 	bl	8000eb8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	e00e      	b.n	8001b64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b46:	f7ff f9b7 	bl	8000eb8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d907      	bls.n	8001b64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e150      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	42470000 	.word	0x42470000
 8001b60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1ea      	bne.n	8001b46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 8097 	beq.w	8001cac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b82:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10f      	bne.n	8001bae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b7d      	ldr	r3, [pc, #500]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a7c      	ldr	r2, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b7a      	ldr	r3, [pc, #488]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001baa:	2301      	movs	r3, #1
 8001bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bae:	4b77      	ldr	r3, [pc, #476]	; (8001d8c <HAL_RCC_OscConfig+0x474>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d118      	bne.n	8001bec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bba:	4b74      	ldr	r3, [pc, #464]	; (8001d8c <HAL_RCC_OscConfig+0x474>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a73      	ldr	r2, [pc, #460]	; (8001d8c <HAL_RCC_OscConfig+0x474>)
 8001bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f977 	bl	8000eb8 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bcc:	e008      	b.n	8001be0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bce:	f7ff f973 	bl	8000eb8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e10c      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x474>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0f0      	beq.n	8001bce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d106      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2ea>
 8001bf4:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001c00:	e01c      	b.n	8001c3c <HAL_RCC_OscConfig+0x324>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d10c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x30c>
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c10:	f043 0304 	orr.w	r3, r3, #4
 8001c14:	6713      	str	r3, [r2, #112]	; 0x70
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6713      	str	r3, [r2, #112]	; 0x70
 8001c22:	e00b      	b.n	8001c3c <HAL_RCC_OscConfig+0x324>
 8001c24:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c2a:	f023 0301 	bic.w	r3, r3, #1
 8001c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c30:	4b55      	ldr	r3, [pc, #340]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c36:	f023 0304 	bic.w	r3, r3, #4
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d015      	beq.n	8001c70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c44:	f7ff f938 	bl	8000eb8 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c4c:	f7ff f934 	bl	8000eb8 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e0cb      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0ee      	beq.n	8001c4c <HAL_RCC_OscConfig+0x334>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7ff f922 	bl	8000eb8 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c78:	f7ff f91e 	bl	8000eb8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0b5      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1ee      	bne.n	8001c78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d105      	bne.n	8001cac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca0:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001caa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 80a1 	beq.w	8001df8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d05c      	beq.n	8001d7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d141      	bne.n	8001d4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_OscConfig+0x478>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f8f2 	bl	8000eb8 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f8ee 	bl	8000eb8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e087      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	019b      	lsls	r3, r3, #6
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	085b      	lsrs	r3, r3, #1
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	041b      	lsls	r3, r3, #16
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	061b      	lsls	r3, r3, #24
 8001d1a:	491b      	ldr	r1, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x478>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7ff f8c7 	bl	8000eb8 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f8c3 	bl	8000eb8 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e05c      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x416>
 8001d4c:	e054      	b.n	8001df8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_OscConfig+0x478>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7ff f8b0 	bl	8000eb8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7ff f8ac 	bl	8000eb8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e045      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_OscConfig+0x470>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x444>
 8001d7a:	e03d      	b.n	8001df8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e038      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_OscConfig+0x4ec>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d028      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d121      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d11a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d111      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d107      	bne.n	8001df4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800

08001e08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0cc      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d90c      	bls.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0b8      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d020      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a58      	ldr	r2, [pc, #352]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e74:	4b53      	ldr	r3, [pc, #332]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	494d      	ldr	r1, [pc, #308]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d044      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b47      	ldr	r3, [pc, #284]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d119      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e07f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e06f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	4b3b      	ldr	r3, [pc, #236]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e067      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ee6:	4b37      	ldr	r3, [pc, #220]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f023 0203 	bic.w	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4934      	ldr	r1, [pc, #208]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe ffde 	bl	8000eb8 <HAL_GetTick>
 8001efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f00:	f7fe ffda 	bl	8000eb8 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e04f      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 020c 	and.w	r2, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d1eb      	bne.n	8001f00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f28:	4b25      	ldr	r3, [pc, #148]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d20c      	bcs.n	8001f50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e032      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4916      	ldr	r1, [pc, #88]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f8e:	f000 f821 	bl	8001fd4 <HAL_RCC_GetSysClockFreq>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	490a      	ldr	r1, [pc, #40]	; (8001fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	5ccb      	ldrb	r3, [r1, r3]
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe ff3e 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023c00 	.word	0x40023c00
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08002eb8 	.word	0x08002eb8
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fd8:	b090      	sub	sp, #64	; 0x40
 8001fda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d00d      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	f200 80a1 	bhi.w	8002140 <HAL_RCC_GetSysClockFreq+0x16c>
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x34>
 8002002:	2b04      	cmp	r3, #4
 8002004:	d003      	beq.n	800200e <HAL_RCC_GetSysClockFreq+0x3a>
 8002006:	e09b      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002008:	4b53      	ldr	r3, [pc, #332]	; (8002158 <HAL_RCC_GetSysClockFreq+0x184>)
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800200c:	e09b      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800200e:	4b53      	ldr	r3, [pc, #332]	; (800215c <HAL_RCC_GetSysClockFreq+0x188>)
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002012:	e098      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002014:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800201c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800201e:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d028      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202a:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	099b      	lsrs	r3, r3, #6
 8002030:	2200      	movs	r2, #0
 8002032:	623b      	str	r3, [r7, #32]
 8002034:	627a      	str	r2, [r7, #36]	; 0x24
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800203c:	2100      	movs	r1, #0
 800203e:	4b47      	ldr	r3, [pc, #284]	; (800215c <HAL_RCC_GetSysClockFreq+0x188>)
 8002040:	fb03 f201 	mul.w	r2, r3, r1
 8002044:	2300      	movs	r3, #0
 8002046:	fb00 f303 	mul.w	r3, r0, r3
 800204a:	4413      	add	r3, r2
 800204c:	4a43      	ldr	r2, [pc, #268]	; (800215c <HAL_RCC_GetSysClockFreq+0x188>)
 800204e:	fba0 1202 	umull	r1, r2, r0, r2
 8002052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002054:	460a      	mov	r2, r1
 8002056:	62ba      	str	r2, [r7, #40]	; 0x28
 8002058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800205a:	4413      	add	r3, r2
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002060:	2200      	movs	r2, #0
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	61fa      	str	r2, [r7, #28]
 8002066:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800206a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800206e:	f7fe f8b3 	bl	80001d8 <__aeabi_uldivmod>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4613      	mov	r3, r2
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207a:	e053      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207c:	4b35      	ldr	r3, [pc, #212]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	2200      	movs	r2, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	617a      	str	r2, [r7, #20]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800208e:	f04f 0b00 	mov.w	fp, #0
 8002092:	4652      	mov	r2, sl
 8002094:	465b      	mov	r3, fp
 8002096:	f04f 0000 	mov.w	r0, #0
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	0159      	lsls	r1, r3, #5
 80020a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a4:	0150      	lsls	r0, r2, #5
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	ebb2 080a 	subs.w	r8, r2, sl
 80020ae:	eb63 090b 	sbc.w	r9, r3, fp
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020c6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ca:	eb63 0509 	sbc.w	r5, r3, r9
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	00eb      	lsls	r3, r5, #3
 80020d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020dc:	00e2      	lsls	r2, r4, #3
 80020de:	4614      	mov	r4, r2
 80020e0:	461d      	mov	r5, r3
 80020e2:	eb14 030a 	adds.w	r3, r4, sl
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	eb45 030b 	adc.w	r3, r5, fp
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fa:	4629      	mov	r1, r5
 80020fc:	028b      	lsls	r3, r1, #10
 80020fe:	4621      	mov	r1, r4
 8002100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002104:	4621      	mov	r1, r4
 8002106:	028a      	lsls	r2, r1, #10
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2200      	movs	r2, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	60fa      	str	r2, [r7, #12]
 8002114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002118:	f7fe f85e 	bl	80001d8 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4613      	mov	r3, r2
 8002122:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_GetSysClockFreq+0x180>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	3301      	adds	r3, #1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetSysClockFreq+0x184>)
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002148:	4618      	mov	r0, r3
 800214a:	3740      	adds	r7, #64	; 0x40
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	00f42400 	.word	0x00f42400
 800215c:	017d7840 	.word	0x017d7840

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000000 	.word	0x20000000

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800217c:	f7ff fff0 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	; (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	08002ec8 	.word	0x08002ec8

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a4:	f7ff ffdc 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4903      	ldr	r1, [pc, #12]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	08002ec8 	.word	0x08002ec8

080021c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e03f      	b.n	800225a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe fcce 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2224      	movs	r2, #36	; 0x24
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800220a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f88f 	bl	8002330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002220:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	695a      	ldr	r2, [r3, #20]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002230:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002240:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e057      	b.n	8002326 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fc80 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f841 	bl	8002330 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022dc:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	691a      	ldr	r2, [r3, #16]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 0220 	bic.w	r2, r2, #32
 80022ec:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6919      	ldr	r1, [r3, #16]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800230c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002334:	b0c0      	sub	sp, #256	; 0x100
 8002336:	af00      	add	r7, sp, #0
 8002338:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800234c:	68d9      	ldr	r1, [r3, #12]
 800234e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	ea40 0301 	orr.w	r3, r0, r1
 8002358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800235a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	431a      	orrs	r2, r3
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	431a      	orrs	r2, r3
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002388:	f021 010c 	bic.w	r1, r1, #12
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002396:	430b      	orrs	r3, r1
 8002398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800239a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023aa:	6999      	ldr	r1, [r3, #24]
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	ea40 0301 	orr.w	r3, r0, r1
 80023b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b8f      	ldr	r3, [pc, #572]	; (80025fc <UART_SetConfig+0x2cc>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d005      	beq.n	80023d0 <UART_SetConfig+0xa0>
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b8d      	ldr	r3, [pc, #564]	; (8002600 <UART_SetConfig+0x2d0>)
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d104      	bne.n	80023da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023d0:	f7ff fee6 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 80023d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023d8:	e003      	b.n	80023e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023da:	f7ff fecd 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80023de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ec:	f040 810c 	bne.w	8002608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80023fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80023fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002402:	4622      	mov	r2, r4
 8002404:	462b      	mov	r3, r5
 8002406:	1891      	adds	r1, r2, r2
 8002408:	65b9      	str	r1, [r7, #88]	; 0x58
 800240a:	415b      	adcs	r3, r3
 800240c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800240e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002412:	4621      	mov	r1, r4
 8002414:	eb12 0801 	adds.w	r8, r2, r1
 8002418:	4629      	mov	r1, r5
 800241a:	eb43 0901 	adc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	4623      	mov	r3, r4
 8002438:	eb18 0303 	adds.w	r3, r8, r3
 800243c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002440:	462b      	mov	r3, r5
 8002442:	eb49 0303 	adc.w	r3, r9, r3
 8002446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800244a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002456:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800245a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800245e:	460b      	mov	r3, r1
 8002460:	18db      	adds	r3, r3, r3
 8002462:	653b      	str	r3, [r7, #80]	; 0x50
 8002464:	4613      	mov	r3, r2
 8002466:	eb42 0303 	adc.w	r3, r2, r3
 800246a:	657b      	str	r3, [r7, #84]	; 0x54
 800246c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002474:	f7fd feb0 	bl	80001d8 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <UART_SetConfig+0x2d4>)
 800247e:	fba3 2302 	umull	r2, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	011c      	lsls	r4, r3, #4
 8002486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002490:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	1891      	adds	r1, r2, r2
 800249e:	64b9      	str	r1, [r7, #72]	; 0x48
 80024a0:	415b      	adcs	r3, r3
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024a8:	4641      	mov	r1, r8
 80024aa:	eb12 0a01 	adds.w	sl, r2, r1
 80024ae:	4649      	mov	r1, r9
 80024b0:	eb43 0b01 	adc.w	fp, r3, r1
 80024b4:	f04f 0200 	mov.w	r2, #0
 80024b8:	f04f 0300 	mov.w	r3, #0
 80024bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024c8:	4692      	mov	sl, r2
 80024ca:	469b      	mov	fp, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	eb1a 0303 	adds.w	r3, sl, r3
 80024d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb4b 0303 	adc.w	r3, fp, r3
 80024dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80024f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80024f4:	460b      	mov	r3, r1
 80024f6:	18db      	adds	r3, r3, r3
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
 80024fa:	4613      	mov	r3, r2
 80024fc:	eb42 0303 	adc.w	r3, r2, r3
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
 8002502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800250a:	f7fd fe65 	bl	80001d8 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4611      	mov	r1, r2
 8002514:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <UART_SetConfig+0x2d4>)
 8002516:	fba3 2301 	umull	r2, r3, r3, r1
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2264      	movs	r2, #100	; 0x64
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	1acb      	subs	r3, r1, r3
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <UART_SetConfig+0x2d4>)
 800252c:	fba3 2302 	umull	r2, r3, r3, r2
 8002530:	095b      	lsrs	r3, r3, #5
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002538:	441c      	add	r4, r3
 800253a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002544:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	1891      	adds	r1, r2, r2
 8002552:	63b9      	str	r1, [r7, #56]	; 0x38
 8002554:	415b      	adcs	r3, r3
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800255c:	4641      	mov	r1, r8
 800255e:	1851      	adds	r1, r2, r1
 8002560:	6339      	str	r1, [r7, #48]	; 0x30
 8002562:	4649      	mov	r1, r9
 8002564:	414b      	adcs	r3, r1
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002574:	4659      	mov	r1, fp
 8002576:	00cb      	lsls	r3, r1, #3
 8002578:	4651      	mov	r1, sl
 800257a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800257e:	4651      	mov	r1, sl
 8002580:	00ca      	lsls	r2, r1, #3
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	4603      	mov	r3, r0
 8002588:	4642      	mov	r2, r8
 800258a:	189b      	adds	r3, r3, r2
 800258c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002590:	464b      	mov	r3, r9
 8002592:	460a      	mov	r2, r1
 8002594:	eb42 0303 	adc.w	r3, r2, r3
 8002598:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025b0:	460b      	mov	r3, r1
 80025b2:	18db      	adds	r3, r3, r3
 80025b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b6:	4613      	mov	r3, r2
 80025b8:	eb42 0303 	adc.w	r3, r2, r3
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025c6:	f7fd fe07 	bl	80001d8 <__aeabi_uldivmod>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <UART_SetConfig+0x2d4>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <UART_SetConfig+0x2d4>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 0207 	and.w	r2, r3, #7
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4422      	add	r2, r4
 80025f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025f8:	e105      	b.n	8002806 <UART_SetConfig+0x4d6>
 80025fa:	bf00      	nop
 80025fc:	40011000 	.word	0x40011000
 8002600:	40011400 	.word	0x40011400
 8002604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002612:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800261a:	4642      	mov	r2, r8
 800261c:	464b      	mov	r3, r9
 800261e:	1891      	adds	r1, r2, r2
 8002620:	6239      	str	r1, [r7, #32]
 8002622:	415b      	adcs	r3, r3
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800262a:	4641      	mov	r1, r8
 800262c:	1854      	adds	r4, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb43 0501 	adc.w	r5, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	00eb      	lsls	r3, r5, #3
 800263e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002642:	00e2      	lsls	r2, r4, #3
 8002644:	4614      	mov	r4, r2
 8002646:	461d      	mov	r5, r3
 8002648:	4643      	mov	r3, r8
 800264a:	18e3      	adds	r3, r4, r3
 800264c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002650:	464b      	mov	r3, r9
 8002652:	eb45 0303 	adc.w	r3, r5, r3
 8002656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002676:	4629      	mov	r1, r5
 8002678:	008b      	lsls	r3, r1, #2
 800267a:	4621      	mov	r1, r4
 800267c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002680:	4621      	mov	r1, r4
 8002682:	008a      	lsls	r2, r1, #2
 8002684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002688:	f7fd fda6 	bl	80001d8 <__aeabi_uldivmod>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4b60      	ldr	r3, [pc, #384]	; (8002814 <UART_SetConfig+0x4e4>)
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	011c      	lsls	r4, r3, #4
 800269a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800269e:	2200      	movs	r2, #0
 80026a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026ac:	4642      	mov	r2, r8
 80026ae:	464b      	mov	r3, r9
 80026b0:	1891      	adds	r1, r2, r2
 80026b2:	61b9      	str	r1, [r7, #24]
 80026b4:	415b      	adcs	r3, r3
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026bc:	4641      	mov	r1, r8
 80026be:	1851      	adds	r1, r2, r1
 80026c0:	6139      	str	r1, [r7, #16]
 80026c2:	4649      	mov	r1, r9
 80026c4:	414b      	adcs	r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	00cb      	lsls	r3, r1, #3
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026de:	4651      	mov	r1, sl
 80026e0:	00ca      	lsls	r2, r1, #3
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	4642      	mov	r2, r8
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026f0:	464b      	mov	r3, r9
 80026f2:	460a      	mov	r2, r1
 80026f4:	eb42 0303 	adc.w	r3, r2, r3
 80026f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	67bb      	str	r3, [r7, #120]	; 0x78
 8002706:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002714:	4649      	mov	r1, r9
 8002716:	008b      	lsls	r3, r1, #2
 8002718:	4641      	mov	r1, r8
 800271a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800271e:	4641      	mov	r1, r8
 8002720:	008a      	lsls	r2, r1, #2
 8002722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002726:	f7fd fd57 	bl	80001d8 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4b39      	ldr	r3, [pc, #228]	; (8002814 <UART_SetConfig+0x4e4>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <UART_SetConfig+0x4e4>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274e:	441c      	add	r4, r3
 8002750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002754:	2200      	movs	r2, #0
 8002756:	673b      	str	r3, [r7, #112]	; 0x70
 8002758:	677a      	str	r2, [r7, #116]	; 0x74
 800275a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800275e:	4642      	mov	r2, r8
 8002760:	464b      	mov	r3, r9
 8002762:	1891      	adds	r1, r2, r2
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	415b      	adcs	r3, r3
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276e:	4641      	mov	r1, r8
 8002770:	1851      	adds	r1, r2, r1
 8002772:	6039      	str	r1, [r7, #0]
 8002774:	4649      	mov	r1, r9
 8002776:	414b      	adcs	r3, r1
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002786:	4659      	mov	r1, fp
 8002788:	00cb      	lsls	r3, r1, #3
 800278a:	4651      	mov	r1, sl
 800278c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002790:	4651      	mov	r1, sl
 8002792:	00ca      	lsls	r2, r1, #3
 8002794:	4610      	mov	r0, r2
 8002796:	4619      	mov	r1, r3
 8002798:	4603      	mov	r3, r0
 800279a:	4642      	mov	r2, r8
 800279c:	189b      	adds	r3, r3, r2
 800279e:	66bb      	str	r3, [r7, #104]	; 0x68
 80027a0:	464b      	mov	r3, r9
 80027a2:	460a      	mov	r2, r1
 80027a4:	eb42 0303 	adc.w	r3, r2, r3
 80027a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	663b      	str	r3, [r7, #96]	; 0x60
 80027b4:	667a      	str	r2, [r7, #100]	; 0x64
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027c2:	4649      	mov	r1, r9
 80027c4:	008b      	lsls	r3, r1, #2
 80027c6:	4641      	mov	r1, r8
 80027c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027cc:	4641      	mov	r1, r8
 80027ce:	008a      	lsls	r2, r1, #2
 80027d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027d4:	f7fd fd00 	bl	80001d8 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <UART_SetConfig+0x4e4>)
 80027de:	fba3 1302 	umull	r1, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2164      	movs	r1, #100	; 0x64
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <UART_SetConfig+0x4e4>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4422      	add	r2, r4
 8002804:	609a      	str	r2, [r3, #8]
}
 8002806:	bf00      	nop
 8002808:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002812:	bf00      	nop
 8002814:	51eb851f 	.word	0x51eb851f

08002818 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002818:	b084      	sub	sp, #16
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	f107 001c 	add.w	r0, r7, #28
 8002826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2b01      	cmp	r3, #1
 800282e:	d122      	bne.n	8002876 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002834:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 faa2 	bl	8002db4 <USB_CoreReset>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
 8002874:	e01a      	b.n	80028ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fa96 	bl	8002db4 <USB_CoreReset>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800288c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	639a      	str	r2, [r3, #56]	; 0x38
 800289e:	e005      	b.n	80028ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d10b      	bne.n	80028ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f043 0206 	orr.w	r2, r3, #6
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028d6:	b004      	add	sp, #16
 80028d8:	4770      	bx	lr

080028da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0201 	bic.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d115      	bne.n	800294a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800292a:	2001      	movs	r0, #1
 800292c:	f7fe fad0 	bl	8000ed0 <HAL_Delay>
      ms++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3301      	adds	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa2e 	bl	8002d98 <USB_GetMode>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d01e      	beq.n	8002980 <USB_SetCurrentMode+0x84>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b31      	cmp	r3, #49	; 0x31
 8002946:	d9f0      	bls.n	800292a <USB_SetCurrentMode+0x2e>
 8002948:	e01a      	b.n	8002980 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d115      	bne.n	800297c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800295c:	2001      	movs	r0, #1
 800295e:	f7fe fab7 	bl	8000ed0 <HAL_Delay>
      ms++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 fa15 	bl	8002d98 <USB_GetMode>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <USB_SetCurrentMode+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b31      	cmp	r3, #49	; 0x31
 8002978:	d9f0      	bls.n	800295c <USB_SetCurrentMode+0x60>
 800297a:	e001      	b.n	8002980 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e005      	b.n	800298c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b32      	cmp	r3, #50	; 0x32
 8002984:	d101      	bne.n	800298a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002994:	b084      	sub	sp, #16
 8002996:	b580      	push	{r7, lr}
 8002998:	b086      	sub	sp, #24
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80029a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	e009      	b.n	80029c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	3340      	adds	r3, #64	; 0x40
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	2200      	movs	r2, #0
 80029c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	3301      	adds	r3, #1
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0e      	cmp	r3, #14
 80029cc:	d9f2      	bls.n	80029b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11c      	bne.n	8002a0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f043 0302 	orr.w	r3, r3, #2
 80029e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8002a0c:	e00b      	b.n	8002a26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a38:	4619      	mov	r1, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a40:	461a      	mov	r2, r3
 8002a42:	680b      	ldr	r3, [r1, #0]
 8002a44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10c      	bne.n	8002a66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a52:	2100      	movs	r1, #0
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f965 	bl	8002d24 <USB_SetDevSpeed>
 8002a5a:	e008      	b.n	8002a6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f960 	bl	8002d24 <USB_SetDevSpeed>
 8002a64:	e003      	b.n	8002a6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a66:	2103      	movs	r1, #3
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f95b 	bl	8002d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a6e:	2110      	movs	r1, #16
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8f3 	bl	8002c5c <USB_FlushTxFifo>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f91f 	bl	8002cc4 <USB_FlushRxFifo>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a96:	461a      	mov	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	e043      	b.n	8002b42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ad0:	d118      	bne.n	8002b04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e013      	b.n	8002b16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002afa:	461a      	mov	r2, r3
 8002afc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e008      	b.n	8002b16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b10:	461a      	mov	r2, r3
 8002b12:	2300      	movs	r3, #0
 8002b14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b22:	461a      	mov	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b34:	461a      	mov	r2, r3
 8002b36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d3b7      	bcc.n	8002aba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e043      	b.n	8002bd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b66:	d118      	bne.n	8002b9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	015a      	lsls	r2, r3, #5
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4413      	add	r3, r2
 8002b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e013      	b.n	8002bac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b90:	461a      	mov	r2, r3
 8002b92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b96:	6013      	str	r3, [r2, #0]
 8002b98:	e008      	b.n	8002bac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	015a      	lsls	r2, r3, #5
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d3b7      	bcc.n	8002b50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002c00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <USB_DevInit+0x2c4>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d005      	beq.n	8002c32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f043 0208 	orr.w	r2, r3, #8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c54:	b004      	add	sp, #16
 8002c56:	4770      	bx	lr
 8002c58:	803c3800 	.word	0x803c3800

08002c5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <USB_FlushTxFifo+0x64>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e01b      	b.n	8002cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	daf2      	bge.n	8002c6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	f043 0220 	orr.w	r2, r3, #32
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <USB_FlushTxFifo+0x64>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e006      	b.n	8002cb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	2b20      	cmp	r3, #32
 8002cb0:	d0f0      	beq.n	8002c94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	00030d40 	.word	0x00030d40

08002cc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a11      	ldr	r2, [pc, #68]	; (8002d20 <USB_FlushRxFifo+0x5c>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e018      	b.n	8002d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	daf2      	bge.n	8002cd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <USB_FlushRxFifo+0x5c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e006      	b.n	8002d14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d0f0      	beq.n	8002cf4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	00030d40 	.word	0x00030d40

08002d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d44:	4313      	orrs	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002d70:	f023 0303 	bic.w	r3, r3, #3
 8002d74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0301 	and.w	r3, r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <USB_CoreReset+0x64>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d901      	bls.n	8002dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e01b      	b.n	8002e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	daf2      	bge.n	8002dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	3301      	adds	r3, #1
 8002dee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <USB_CoreReset+0x64>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d901      	bls.n	8002dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e006      	b.n	8002e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d0f0      	beq.n	8002dea <USB_CoreReset+0x36>

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	00030d40 	.word	0x00030d40

08002e1c <__libc_init_array>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	4d0d      	ldr	r5, [pc, #52]	; (8002e54 <__libc_init_array+0x38>)
 8002e20:	4c0d      	ldr	r4, [pc, #52]	; (8002e58 <__libc_init_array+0x3c>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	2600      	movs	r6, #0
 8002e28:	42a6      	cmp	r6, r4
 8002e2a:	d109      	bne.n	8002e40 <__libc_init_array+0x24>
 8002e2c:	4d0b      	ldr	r5, [pc, #44]	; (8002e5c <__libc_init_array+0x40>)
 8002e2e:	4c0c      	ldr	r4, [pc, #48]	; (8002e60 <__libc_init_array+0x44>)
 8002e30:	f000 f820 	bl	8002e74 <_init>
 8002e34:	1b64      	subs	r4, r4, r5
 8002e36:	10a4      	asrs	r4, r4, #2
 8002e38:	2600      	movs	r6, #0
 8002e3a:	42a6      	cmp	r6, r4
 8002e3c:	d105      	bne.n	8002e4a <__libc_init_array+0x2e>
 8002e3e:	bd70      	pop	{r4, r5, r6, pc}
 8002e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e44:	4798      	blx	r3
 8002e46:	3601      	adds	r6, #1
 8002e48:	e7ee      	b.n	8002e28 <__libc_init_array+0xc>
 8002e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4e:	4798      	blx	r3
 8002e50:	3601      	adds	r6, #1
 8002e52:	e7f2      	b.n	8002e3a <__libc_init_array+0x1e>
 8002e54:	08002ed8 	.word	0x08002ed8
 8002e58:	08002ed8 	.word	0x08002ed8
 8002e5c:	08002ed8 	.word	0x08002ed8
 8002e60:	08002edc 	.word	0x08002edc

08002e64 <memset>:
 8002e64:	4402      	add	r2, r0
 8002e66:	4603      	mov	r3, r0
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <memset+0xa>
 8002e6c:	4770      	bx	lr
 8002e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e72:	e7f9      	b.n	8002e68 <memset+0x4>

08002e74 <_init>:
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e76:	bf00      	nop
 8002e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e7a:	bc08      	pop	{r3}
 8002e7c:	469e      	mov	lr, r3
 8002e7e:	4770      	bx	lr

08002e80 <_fini>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr
