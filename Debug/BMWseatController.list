
BMWseatController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08008b8c  08008b8c  00018b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c78  08008c78  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c80  08008c80  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c84  08008c84  00018c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08008c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d1c  20000160  08008de8  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e7c  08008de8  00021e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c7f  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ed  00000000  00000000  00034e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00037f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00038f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005497  00000000  00000000  00039e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e3c  00000000  00000000  0003f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c599  00000000  00000000  00055163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e16fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047e4  00000000  00000000  000e174c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b74 	.word	0x08008b74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	08008b74 	.word	0x08008b74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LIN_Ping_And_Print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LIN_Ping_And_Print(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
    HAL_Delay(1000); // give host time to open the COM port (simple safety)
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 fd1b 	bl	8000fd8 <HAL_Delay>

    uint8_t id = 0x01; // 6-bit LIN ID (0..63)
 80005a2:	2301      	movs	r3, #1
 80005a4:	77fb      	strb	r3, [r7, #31]

    if (lin_send_header(&huart2, id) != HAL_OK) {
 80005a6:	7ffb      	ldrb	r3, [r7, #31]
 80005a8:	4619      	mov	r1, r3
 80005aa:	4818      	ldr	r0, [pc, #96]	; (800060c <LIN_Ping_And_Print+0x78>)
 80005ac:	f000 f893 	bl	80006d6 <lin_send_header>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d00b      	beq.n	80005ce <LIN_Ping_And_Print+0x3a>
        const char *e = "LIN: header send failed\r\n";
 80005b6:	4b16      	ldr	r3, [pc, #88]	; (8000610 <LIN_Ping_And_Print+0x7c>)
 80005b8:	613b      	str	r3, [r7, #16]
        CDC_Transmit_FS((uint8_t*)e, strlen(e));
 80005ba:	6938      	ldr	r0, [r7, #16]
 80005bc:	f7ff fe10 	bl	80001e0 <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	4619      	mov	r1, r3
 80005c6:	6938      	ldr	r0, [r7, #16]
 80005c8:	f007 f9ce 	bl	8007968 <CDC_Transmit_FS>
 80005cc:	e01b      	b.n	8000606 <LIN_Ping_And_Print+0x72>
        return;
    }

    uint8_t rx[9]; // up to 8 data + 1 checksum
    int n = lin_receive_response(&huart2, rx, sizeof(rx), 20); // ~20 ms timeout
 80005ce:	1d39      	adds	r1, r7, #4
 80005d0:	2314      	movs	r3, #20
 80005d2:	2209      	movs	r2, #9
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LIN_Ping_And_Print+0x78>)
 80005d6:	f000 f8b1 	bl	800073c <lin_receive_response>
 80005da:	61b8      	str	r0, [r7, #24]

    if (n <= 0) {
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	dc0b      	bgt.n	80005fa <LIN_Ping_And_Print+0x66>
        const char *e = "LIN: no response\r\n";
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <LIN_Ping_And_Print+0x80>)
 80005e4:	617b      	str	r3, [r7, #20]
        CDC_Transmit_FS((uint8_t*)e, strlen(e));
 80005e6:	6978      	ldr	r0, [r7, #20]
 80005e8:	f7ff fdfa 	bl	80001e0 <strlen>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4619      	mov	r1, r3
 80005f2:	6978      	ldr	r0, [r7, #20]
 80005f4:	f007 f9b8 	bl	8007968 <CDC_Transmit_FS>
 80005f8:	e005      	b.n	8000606 <LIN_Ping_And_Print+0x72>
    } else {
        cdc_print_hex("LIN ID 0x01 -> ", rx, n);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	69ba      	ldr	r2, [r7, #24]
 80005fe:	4619      	mov	r1, r3
 8000600:	4805      	ldr	r0, [pc, #20]	; (8000618 <LIN_Ping_And_Print+0x84>)
 8000602:	f000 f8cd 	bl	80007a0 <cdc_print_hex>
    }
}
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000214 	.word	0x20000214
 8000610:	08008b8c 	.word	0x08008b8c
 8000614:	08008ba8 	.word	0x08008ba8
 8000618:	08008bbc 	.word	0x08008bbc

0800061c <make_lin_id_with_parity>:

// --- Helpers ---

// Parity per LIN 2.x: ID = b5..b0, P0 on b6, P1 on b7
static uint8_t make_lin_id_with_parity(uint8_t id6)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
    id6 &= 0x3F;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800062c:	71fb      	strb	r3, [r7, #7]
    uint8_t b0 = (id6 >> 0) & 1;
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
    uint8_t b1 = (id6 >> 1) & 1;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	73bb      	strb	r3, [r7, #14]
    uint8_t b2 = (id6 >> 2) & 1;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	089b      	lsrs	r3, r3, #2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	737b      	strb	r3, [r7, #13]
    uint8_t b3 = (id6 >> 3) & 1;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	08db      	lsrs	r3, r3, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	f003 0301 	and.w	r3, r3, #1
 8000658:	733b      	strb	r3, [r7, #12]
    uint8_t b4 = (id6 >> 4) & 1;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	b2db      	uxtb	r3, r3
 8000660:	f003 0301 	and.w	r3, r3, #1
 8000664:	72fb      	strb	r3, [r7, #11]
    uint8_t b5 = (id6 >> 5) & 1;
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	095b      	lsrs	r3, r3, #5
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	72bb      	strb	r3, [r7, #10]

    uint8_t p0 = (b0 ^ b1 ^ b2 ^ b4) & 1;
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	7bbb      	ldrb	r3, [r7, #14]
 8000676:	4053      	eors	r3, r2
 8000678:	b2da      	uxtb	r2, r3
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	4053      	eors	r3, r2
 800067e:	b2da      	uxtb	r2, r3
 8000680:	7afb      	ldrb	r3, [r7, #11]
 8000682:	4053      	eors	r3, r2
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	727b      	strb	r3, [r7, #9]
    uint8_t p1 = (~(b1 ^ b3 ^ b4 ^ b5)) & 1;
 800068c:	7bba      	ldrb	r2, [r7, #14]
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	4053      	eors	r3, r2
 8000692:	b2da      	uxtb	r2, r3
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	4053      	eors	r3, r2
 8000698:	b2da      	uxtb	r2, r3
 800069a:	7abb      	ldrb	r3, [r7, #10]
 800069c:	4053      	eors	r3, r2
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	bf0c      	ite	eq
 80006a8:	2301      	moveq	r3, #1
 80006aa:	2300      	movne	r3, #0
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	723b      	strb	r3, [r7, #8]

    return (uint8_t)(id6 | (p0 << 6) | (p1 << 7));
 80006b0:	7a7b      	ldrb	r3, [r7, #9]
 80006b2:	019b      	lsls	r3, r3, #6
 80006b4:	b25a      	sxtb	r2, r3
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	b25a      	sxtb	r2, r3
 80006be:	7a3b      	ldrb	r3, [r7, #8]
 80006c0:	01db      	lsls	r3, r3, #7
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <lin_send_header>:

// Send BREAK + SYNC(0x55) + ID(with parity)
static HAL_StatusTypeDef lin_send_header(UART_HandleTypeDef *huart, uint8_t id6)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	460b      	mov	r3, r1
 80006e0:	70fb      	strb	r3, [r7, #3]
    // Send BREAK (CubeMX must have enabled LIN mode for this UART)
    if (HAL_LIN_SendBreak(huart) != HAL_OK) return HAL_ERROR;
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f003 f94d 	bl	8003982 <HAL_LIN_SendBreak>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <lin_send_header+0x1c>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e020      	b.n	8000734 <lin_send_header+0x5e>

    // SYNC field
    uint8_t sync = 0x55;
 80006f2:	2355      	movs	r3, #85	; 0x55
 80006f4:	73fb      	strb	r3, [r7, #15]
    if (HAL_UART_Transmit(huart, &sync, 1, 5) != HAL_OK) return HAL_ERROR;
 80006f6:	f107 010f 	add.w	r1, r7, #15
 80006fa:	2305      	movs	r3, #5
 80006fc:	2201      	movs	r2, #1
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f003 f80b 	bl	800371a <HAL_UART_Transmit>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <lin_send_header+0x38>
 800070a:	2301      	movs	r3, #1
 800070c:	e012      	b.n	8000734 <lin_send_header+0x5e>

    // ID with parity
    uint8_t idp = make_lin_id_with_parity(id6);
 800070e:	78fb      	ldrb	r3, [r7, #3]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff83 	bl	800061c <make_lin_id_with_parity>
 8000716:	4603      	mov	r3, r0
 8000718:	73bb      	strb	r3, [r7, #14]
    if (HAL_UART_Transmit(huart, &idp, 1, 5) != HAL_OK) return HAL_ERROR;
 800071a:	f107 010e 	add.w	r1, r7, #14
 800071e:	2305      	movs	r3, #5
 8000720:	2201      	movs	r2, #1
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f002 fff9 	bl	800371a <HAL_UART_Transmit>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <lin_send_header+0x5c>
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <lin_send_header+0x5e>

    return HAL_OK;
 8000732:	2300      	movs	r3, #0
}
 8000734:	4618      	mov	r0, r3
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <lin_receive_response>:

// Read up to max_len bytes until timeout (slave data + checksum)
static int lin_receive_response(UART_HandleTypeDef *huart, uint8_t *buf, int max_len, uint32_t timeout_ms)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
    // Simple blocking read; for production, use DMA + IDLE detection
    int n = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
    uint32_t t0 = HAL_GetTick();
 800074e:	f000 fc37 	bl	8000fc0 <HAL_GetTick>
 8000752:	6138      	str	r0, [r7, #16]
    while (n < max_len) {
 8000754:	e018      	b.n	8000788 <lin_receive_response+0x4c>
        if (HAL_UART_Receive(huart, &buf[n], 1, 1) == HAL_OK) {
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	18d1      	adds	r1, r2, r3
 800075c:	2301      	movs	r3, #1
 800075e:	2201      	movs	r2, #1
 8000760:	68f8      	ldr	r0, [r7, #12]
 8000762:	f003 f86c 	bl	800383e <HAL_UART_Receive>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d105      	bne.n	8000778 <lin_receive_response+0x3c>
            n++;
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	3301      	adds	r3, #1
 8000770:	617b      	str	r3, [r7, #20]
            t0 = HAL_GetTick(); // got something; extend window
 8000772:	f000 fc25 	bl	8000fc0 <HAL_GetTick>
 8000776:	6138      	str	r0, [r7, #16]
        }
        if ((HAL_GetTick() - t0) > timeout_ms) break;
 8000778:	f000 fc22 	bl	8000fc0 <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	683a      	ldr	r2, [r7, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d304      	bcc.n	8000792 <lin_receive_response+0x56>
    while (n < max_len) {
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbe2      	blt.n	8000756 <lin_receive_response+0x1a>
 8000790:	e000      	b.n	8000794 <lin_receive_response+0x58>
        if ((HAL_GetTick() - t0) > timeout_ms) break;
 8000792:	bf00      	nop
    }
    return n; // 0 means no data
 8000794:	697b      	ldr	r3, [r7, #20]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <cdc_print_hex>:

static void cdc_print_hex(const char *prefix, const uint8_t *data, int len)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b0a6      	sub	sp, #152	; 0x98
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
    char line[128];
    int off = snprintf(line, sizeof(line), "%s", prefix);
 80007ac:	f107 0010 	add.w	r0, r7, #16
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4a2a      	ldr	r2, [pc, #168]	; (800085c <cdc_print_hex+0xbc>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	f007 fd5b 	bl	8008270 <sniprintf>
 80007ba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    for (int i = 0; i < len && off < (int)sizeof(line) - 4; ++i) {
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007c4:	e01b      	b.n	80007fe <cdc_print_hex+0x5e>
        off += snprintf(line + off, sizeof(line) - off, "%02X ", data[i]);
 80007c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ca:	f107 0210 	add.w	r2, r7, #16
 80007ce:	18d0      	adds	r0, r2, r3
 80007d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007d4:	f1c3 0180 	rsb	r1, r3, #128	; 0x80
 80007d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007dc:	68ba      	ldr	r2, [r7, #8]
 80007de:	4413      	add	r3, r2
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <cdc_print_hex+0xc0>)
 80007e4:	f007 fd44 	bl	8008270 <sniprintf>
 80007e8:	4602      	mov	r2, r0
 80007ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007ee:	4413      	add	r3, r2
 80007f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (int i = 0; i < len && off < (int)sizeof(line) - 4; ++i) {
 80007f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80007f8:	3301      	adds	r3, #1
 80007fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	da03      	bge.n	8000810 <cdc_print_hex+0x70>
 8000808:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800080c:	2b7b      	cmp	r3, #123	; 0x7b
 800080e:	ddda      	ble.n	80007c6 <cdc_print_hex+0x26>
    }
    if (off < (int)sizeof(line) - 2) line[off++] = '\r', line[off++] = '\n';
 8000810:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000814:	2b7d      	cmp	r3, #125	; 0x7d
 8000816:	dc13      	bgt.n	8000840 <cdc_print_hex+0xa0>
 8000818:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000822:	3398      	adds	r3, #152	; 0x98
 8000824:	443b      	add	r3, r7
 8000826:	220d      	movs	r2, #13
 8000828:	f803 2c88 	strb.w	r2, [r3, #-136]
 800082c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000830:	1c5a      	adds	r2, r3, #1
 8000832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8000836:	3398      	adds	r3, #152	; 0x98
 8000838:	443b      	add	r3, r7
 800083a:	220a      	movs	r2, #10
 800083c:	f803 2c88 	strb.w	r2, [r3, #-136]
    CDC_Transmit_FS((uint8_t*)line, off);
 8000840:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000844:	b29a      	uxth	r2, r3
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f007 f88b 	bl	8007968 <CDC_Transmit_FS>
}
 8000852:	bf00      	nop
 8000854:	3798      	adds	r7, #152	; 0x98
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	08008bcc 	.word	0x08008bcc
 8000860:	08008bd0 	.word	0x08008bd0

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 fb43 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f821 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f90d 	bl	8000a90 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000876:	f000 f889 	bl	800098c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800087a:	f000 f8b5 	bl	80009e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800087e:	f000 f8dd 	bl	8000a3c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000882:	f006 ffb3 	bl	80077ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 8000886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800088a:	f000 fba5 	bl	8000fd8 <HAL_Delay>
  HAL_GPIO_WritePin(LIN_CS_GPIO_Port, LIN_CS_Pin, GPIO_PIN_SET); //set LIN txcvr CS pin high
 800088e:	2201      	movs	r2, #1
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <main+0x48>)
 8000894:	f000 fe5a 	bl	800154c <HAL_GPIO_WritePin>
  const char *msg = "Hello BMW\r\n";
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <main+0x4c>)
 800089a:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LIN_Ping_And_Print();
 800089c:	f7ff fe7a 	bl	8000594 <LIN_Ping_And_Print>
	  HAL_Delay(1100);
 80008a0:	f240 404c 	movw	r0, #1100	; 0x44c
 80008a4:	f000 fb98 	bl	8000fd8 <HAL_Delay>
	  LIN_Ping_And_Print();
 80008a8:	e7f8      	b.n	800089c <main+0x38>
 80008aa:	bf00      	nop
 80008ac:	40020400 	.word	0x40020400
 80008b0:	08008bd8 	.word	0x08008bd8

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f007 fccc 	bl	8008260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <SystemClock_Config+0xd0>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a28      	ldr	r2, [pc, #160]	; (8000984 <SystemClock_Config+0xd0>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <SystemClock_Config+0xd0>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b23      	ldr	r3, [pc, #140]	; (8000988 <SystemClock_Config+0xd4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a22      	ldr	r2, [pc, #136]	; (8000988 <SystemClock_Config+0xd4>)
 80008fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <SystemClock_Config+0xd4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000910:	2303      	movs	r3, #3
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800091a:	2301      	movs	r3, #1
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091e:	2310      	movs	r3, #16
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000922:	2302      	movs	r3, #2
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800092c:	230f      	movs	r3, #15
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000930:	2390      	movs	r3, #144	; 0x90
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000938:	2305      	movs	r3, #5
 800093a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093c:	f107 0320 	add.w	r3, r7, #32
 8000940:	4618      	mov	r0, r3
 8000942:	f002 f9df 	bl	8002d04 <HAL_RCC_OscConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800094c:	f000 f93a 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000950:	230f      	movs	r3, #15
 8000952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fc42 	bl	80031f4 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000976:	f000 f925 	bl	8000bc4 <Error_Handler>
  }
}
 800097a:	bf00      	nop
 800097c:	3750      	adds	r7, #80	; 0x50
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_I2C1_Init+0x50>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_I2C1_Init+0x54>)
 8000994:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_I2C1_Init+0x50>)
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <MX_I2C1_Init+0x58>)
 800099a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_I2C1_Init+0x50>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_I2C1_Init+0x50>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_I2C1_Init+0x50>)
 80009aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009bc:	4b07      	ldr	r3, [pc, #28]	; (80009dc <MX_I2C1_Init+0x50>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_I2C1_Init+0x50>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_I2C1_Init+0x50>)
 80009ca:	f000 fdd9 	bl	8001580 <HAL_I2C_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009d4:	f000 f8f6 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000017c 	.word	0x2000017c
 80009e0:	40005400 	.word	0x40005400
 80009e4:	000186a0 	.word	0x000186a0

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART1_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f002 fdc8 	bl	80035b4 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f000 f8cb 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001d0 	.word	0x200001d0
 8000a38:	40011000 	.word	0x40011000

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8000a72:	2100      	movs	r1, #0
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a76:	f002 fdea 	bl	800364e <HAL_LIN_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000a80:	f000 f8a0 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000214 	.word	0x20000214
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a41      	ldr	r2, [pc, #260]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a3a      	ldr	r2, [pc, #232]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b38      	ldr	r3, [pc, #224]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a2c      	ldr	r2, [pc, #176]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_GPIO_Init+0x124>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	4826      	ldr	r0, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b1e:	f000 fd15 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000b22:	2200      	movs	r2, #0
 8000b24:	21f3      	movs	r1, #243	; 0xf3
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000b28:	f000 fd10 	bl	800154c <HAL_GPIO_WritePin>
                          |BR3B_Pin|BR3A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f247 5187 	movw	r1, #30087	; 0x7587
 8000b32:	4823      	ldr	r0, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000b34:	f000 fd0a 	bl	800154c <HAL_GPIO_WritePin>
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_GPIO_Init+0x128>)
 8000b52:	f000 fb77 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR1B_Pin BR1A_Pin BR2B_Pin BR2A_Pin
                           BR3B_Pin BR3A_Pin */
  GPIO_InitStruct.Pin = BR1B_Pin|BR1A_Pin|BR2B_Pin|BR2A_Pin
 8000b56:	23f3      	movs	r3, #243	; 0xf3
 8000b58:	617b      	str	r3, [r7, #20]
                          |BR3B_Pin|BR3A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4813      	ldr	r0, [pc, #76]	; (8000bbc <MX_GPIO_Init+0x12c>)
 8000b6e:	f000 fb69 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pins : BR4B_Pin BR4A_Pin BR5B_Pin BR5A_Pin
                           LS3_EN_Pin LS2_EN_Pin LS1_EN_Pin LIN_CS_Pin
                           RS485DE_Pin */
  GPIO_InitStruct.Pin = BR4B_Pin|BR4A_Pin|BR5B_Pin|BR5A_Pin
 8000b72:	f247 5387 	movw	r3, #30087	; 0x7587
 8000b76:	617b      	str	r3, [r7, #20]
                          |LS3_EN_Pin|LS2_EN_Pin|LS1_EN_Pin|LIN_CS_Pin
                          |RS485DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000b8c:	f000 fb5a 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : INA_ALERT_Pin */
  GPIO_InitStruct.Pin = INA_ALERT_Pin;
 8000b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INA_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <MX_GPIO_Init+0x130>)
 8000ba6:	f000 fb4d 	bl	8001244 <HAL_GPIO_Init>

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020800 	.word	0x40020800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be4:	6453      	str	r3, [r2, #68]	; 0x44
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_MspInit+0x4c>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_MspInit+0x4c>)
 8000bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_MspInit+0x4c>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a19      	ldr	r2, [pc, #100]	; (8000ca4 <HAL_I2C_MspInit+0x84>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a17      	ldr	r2, [pc, #92]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000c5e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <HAL_I2C_MspInit+0x8c>)
 8000c7c:	f000 fae2 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c90:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <HAL_I2C_MspInit+0x88>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020400 	.word	0x40020400

08000cb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a32      	ldr	r2, [pc, #200]	; (8000d98 <HAL_UART_MspInit+0xe8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d12d      	bne.n	8000d2e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a30      	ldr	r2, [pc, #192]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 031c 	add.w	r3, r7, #28
 8000d24:	4619      	mov	r1, r3
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <HAL_UART_MspInit+0xf0>)
 8000d28:	f000 fa8c 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2c:	e030      	b.n	8000d90 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_UART_MspInit+0xf4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d12b      	bne.n	8000d90 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_UART_MspInit+0xec>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d70:	230c      	movs	r3, #12
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_UART_MspInit+0xf0>)
 8000d8c:	f000 fa5a 	bl	8001244 <HAL_GPIO_Init>
}
 8000d90:	bf00      	nop
 8000d92:	3730      	adds	r7, #48	; 0x30
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40004400 	.word	0x40004400

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f8d0 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f000 fe51 	bl	8001aa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20001740 	.word	0x20001740

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f007 f9e4 	bl	800820c <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20020000 	.word	0x20020000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000258 	.word	0x20000258
 8000e78:	20001e80 	.word	0x20001e80

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f007 f9a3 	bl	8008218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fcc7 	bl	8000864 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000ee4:	08008c88 	.word	0x08008c88
  ldr r2, =_sbss
 8000ee8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000eec:	20001e7c 	.word	0x20001e7c

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f94f 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe52 	bl	8000bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f967 	bl	800122a <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f000 f92f 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000004 	.word	0x20000004

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	2000025c 	.word	0x2000025c

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	2000025c 	.word	0x2000025c

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000008 	.word	0x20000008

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	; (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4907      	ldr	r1, [pc, #28]	; (80010bc <__NVIC_EnableIRQ+0x38>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000e100 	.word	0xe000e100

080010c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	490c      	ldr	r1, [pc, #48]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	b2da      	uxtb	r2, r3
 80010ee:	4908      	ldr	r1, [pc, #32]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 030f 	and.w	r3, r3, #15
 80010f6:	3b04      	subs	r3, #4
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43da      	mvns	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	401a      	ands	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115c:	f04f 31ff 	mov.w	r1, #4294967295
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43d9      	mvns	r1, r3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	4313      	orrs	r3, r2
         );
}
 800116e:	4618      	mov	r0, r3
 8001170:	3724      	adds	r7, #36	; 0x24
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f7ff ff8e 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff29 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff3e 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff8e 	bl	8001114 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5d 	bl	80010c0 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	e159      	b.n	8001514 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	429a      	cmp	r2, r3
 800127a:	f040 8148 	bne.w	800150e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b01      	cmp	r3, #1
 8001288:	d005      	beq.n	8001296 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001292:	2b02      	cmp	r3, #2
 8001294:	d130      	bne.n	80012f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012cc:	2201      	movs	r2, #1
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f003 0201 	and.w	r2, r3, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b03      	cmp	r3, #3
 8001302:	d017      	beq.n	8001334 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d123      	bne.n	8001388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	08da      	lsrs	r2, r3, #3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3208      	adds	r2, #8
 8001348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	220f      	movs	r2, #15
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	08da      	lsrs	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3208      	adds	r2, #8
 8001382:	69b9      	ldr	r1, [r7, #24]
 8001384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0203 	and.w	r2, r3, #3
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80a2 	beq.w	800150e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b57      	ldr	r3, [pc, #348]	; (800152c <HAL_GPIO_Init+0x2e8>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a56      	ldr	r2, [pc, #344]	; (800152c <HAL_GPIO_Init+0x2e8>)
 80013d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d8:	6453      	str	r3, [r2, #68]	; 0x44
 80013da:	4b54      	ldr	r3, [pc, #336]	; (800152c <HAL_GPIO_Init+0x2e8>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x2ec>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_GPIO_Init+0x2f0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d019      	beq.n	8001446 <HAL_GPIO_Init+0x202>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2f4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d013      	beq.n	8001442 <HAL_GPIO_Init+0x1fe>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2f8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00d      	beq.n	800143e <HAL_GPIO_Init+0x1fa>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a46      	ldr	r2, [pc, #280]	; (8001540 <HAL_GPIO_Init+0x2fc>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d007      	beq.n	800143a <HAL_GPIO_Init+0x1f6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a45      	ldr	r2, [pc, #276]	; (8001544 <HAL_GPIO_Init+0x300>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d101      	bne.n	8001436 <HAL_GPIO_Init+0x1f2>
 8001432:	2304      	movs	r3, #4
 8001434:	e008      	b.n	8001448 <HAL_GPIO_Init+0x204>
 8001436:	2307      	movs	r3, #7
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x204>
 800143a:	2303      	movs	r3, #3
 800143c:	e004      	b.n	8001448 <HAL_GPIO_Init+0x204>
 800143e:	2302      	movs	r3, #2
 8001440:	e002      	b.n	8001448 <HAL_GPIO_Init+0x204>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_GPIO_Init+0x204>
 8001446:	2300      	movs	r3, #0
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	f002 0203 	and.w	r2, r2, #3
 800144e:	0092      	lsls	r2, r2, #2
 8001450:	4093      	lsls	r3, r2
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001458:	4935      	ldr	r1, [pc, #212]	; (8001530 <HAL_GPIO_Init+0x2ec>)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <HAL_GPIO_Init+0x304>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	43db      	mvns	r3, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4013      	ands	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_GPIO_Init+0x304>)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001490:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x304>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	43db      	mvns	r3, r3
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	4013      	ands	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b4:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x304>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014ba:	4b23      	ldr	r3, [pc, #140]	; (8001548 <HAL_GPIO_Init+0x304>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_GPIO_Init+0x304>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e4:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_GPIO_Init+0x304>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_GPIO_Init+0x304>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2b0f      	cmp	r3, #15
 8001518:	f67f aea2 	bls.w	8001260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40013800 	.word	0x40013800
 8001534:	40020000 	.word	0x40020000
 8001538:	40020400 	.word	0x40020400
 800153c:	40020800 	.word	0x40020800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021000 	.word	0x40021000
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	619a      	str	r2, [r3, #24]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e12b      	b.n	80017ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fb3a 	bl	8000c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015e4:	f001 ffbe 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4a81      	ldr	r2, [pc, #516]	; (80017f4 <HAL_I2C_Init+0x274>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d807      	bhi.n	8001604 <HAL_I2C_Init+0x84>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4a80      	ldr	r2, [pc, #512]	; (80017f8 <HAL_I2C_Init+0x278>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	bf94      	ite	ls
 80015fc:	2301      	movls	r3, #1
 80015fe:	2300      	movhi	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e006      	b.n	8001612 <HAL_I2C_Init+0x92>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4a7d      	ldr	r2, [pc, #500]	; (80017fc <HAL_I2C_Init+0x27c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	bf94      	ite	ls
 800160c:	2301      	movls	r3, #1
 800160e:	2300      	movhi	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0e7      	b.n	80017ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a78      	ldr	r2, [pc, #480]	; (8001800 <HAL_I2C_Init+0x280>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68ba      	ldr	r2, [r7, #8]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_I2C_Init+0x274>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d802      	bhi.n	8001654 <HAL_I2C_Init+0xd4>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	3301      	adds	r3, #1
 8001652:	e009      	b.n	8001668 <HAL_I2C_Init+0xe8>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	4a69      	ldr	r2, [pc, #420]	; (8001804 <HAL_I2C_Init+0x284>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	3301      	adds	r3, #1
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	430b      	orrs	r3, r1
 800166e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800167a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	495c      	ldr	r1, [pc, #368]	; (80017f4 <HAL_I2C_Init+0x274>)
 8001684:	428b      	cmp	r3, r1
 8001686:	d819      	bhi.n	80016bc <HAL_I2C_Init+0x13c>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e59      	subs	r1, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	fbb1 f3f3 	udiv	r3, r1, r3
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	f640 73fc 	movw	r3, #4092	; 0xffc
 800169c:	400b      	ands	r3, r1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00a      	beq.n	80016b8 <HAL_I2C_Init+0x138>
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1e59      	subs	r1, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	e051      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e04f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_I2C_Init+0x168>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	440b      	add	r3, r1
 80016d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d6:	3301      	adds	r3, #1
 80016d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf0c      	ite	eq
 80016e0:	2301      	moveq	r3, #1
 80016e2:	2300      	movne	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e012      	b.n	800170e <HAL_I2C_Init+0x18e>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1e58      	subs	r0, r3, #1
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6859      	ldr	r1, [r3, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	0099      	lsls	r1, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf0c      	ite	eq
 8001708:	2301      	moveq	r3, #1
 800170a:	2300      	movne	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Init+0x196>
 8001712:	2301      	movs	r3, #1
 8001714:	e022      	b.n	800175c <HAL_I2C_Init+0x1dc>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d10e      	bne.n	800173c <HAL_I2C_Init+0x1bc>
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1e58      	subs	r0, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6859      	ldr	r1, [r3, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	440b      	add	r3, r1
 800172c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	e00f      	b.n	800175c <HAL_I2C_Init+0x1dc>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	0099      	lsls	r1, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	6809      	ldr	r1, [r1, #0]
 8001760:	4313      	orrs	r3, r2
 8001762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69da      	ldr	r2, [r3, #28]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800178a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6911      	ldr	r1, [r2, #16]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68d2      	ldr	r2, [r2, #12]
 8001796:	4311      	orrs	r1, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0201 	orr.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2220      	movs	r2, #32
 80017d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	000186a0 	.word	0x000186a0
 80017f8:	001e847f 	.word	0x001e847f
 80017fc:	003d08ff 	.word	0x003d08ff
 8001800:	431bde83 	.word	0x431bde83
 8001804:	10624dd3 	.word	0x10624dd3

08001808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180a:	b08f      	sub	sp, #60	; 0x3c
 800180c:	af0a      	add	r7, sp, #40	; 0x28
 800180e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e10f      	b.n	8001a3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f006 f9df 	bl	8007bf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2203      	movs	r2, #3
 800183e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d102      	bne.n	8001854 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fcc6 	bl	80041ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	687e      	ldr	r6, [r7, #4]
 8001866:	466d      	mov	r5, sp
 8001868:	f106 0410 	add.w	r4, r6, #16
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001878:	e885 0003 	stmia.w	r5, {r0, r1}
 800187c:	1d33      	adds	r3, r6, #4
 800187e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f002 fb9d 	bl	8003fc0 <USB_CoreInit>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0d0      	b.n	8001a3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2100      	movs	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fcb4 	bl	800420c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	73fb      	strb	r3, [r7, #15]
 80018a8:	e04a      	b.n	8001940 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	333d      	adds	r3, #61	; 0x3d
 80018ba:	2201      	movs	r2, #1
 80018bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018be:	7bfa      	ldrb	r2, [r7, #15]
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	333c      	adds	r3, #60	; 0x3c
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	b298      	uxth	r0, r3
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	4613      	mov	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3344      	adds	r3, #68	; 0x44
 80018e6:	4602      	mov	r2, r0
 80018e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ea:	7bfa      	ldrb	r2, [r7, #15]
 80018ec:	6879      	ldr	r1, [r7, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3340      	adds	r3, #64	; 0x40
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3348      	adds	r3, #72	; 0x48
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	334c      	adds	r3, #76	; 0x4c
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3354      	adds	r3, #84	; 0x54
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	3301      	adds	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3af      	bcc.n	80018aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	73fb      	strb	r3, [r7, #15]
 800194e:	e044      	b.n	80019da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001950:	7bfa      	ldrb	r2, [r7, #15]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	440b      	add	r3, r1
 800195e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001992:	7bfa      	ldrb	r2, [r7, #15]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019a8:	7bfa      	ldrb	r2, [r7, #15]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	3301      	adds	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	7bfa      	ldrb	r2, [r7, #15]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d3b5      	bcc.n	8001950 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	687e      	ldr	r6, [r7, #4]
 80019ec:	466d      	mov	r5, sp
 80019ee:	f106 0410 	add.w	r4, r6, #16
 80019f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a02:	1d33      	adds	r3, r6, #4
 8001a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f002 fc4c 	bl	80042a4 <USB_DevInit>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2202      	movs	r2, #2
 8001a16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00d      	b.n	8001a3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f003 fd9b 	bl	800556e <USB_DevDisconnect>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a42 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_Start+0x1c>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e020      	b.n	8001aa0 <HAL_PCD_Start+0x5e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d109      	bne.n	8001a82 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d005      	beq.n	8001a82 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fb9e 	bl	80041c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f003 fd4b 	bl	800552c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b08d      	sub	sp, #52	; 0x34
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 fe09 	bl	80056d6 <USB_GetMode>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f040 848a 	bne.w	80023e0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 fd6d 	bl	80055b0 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8480 	beq.w	80023de <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fd5a 	bl	80055b0 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d107      	bne.n	8001b16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f002 0202 	and.w	r2, r2, #2
 8001b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fd48 	bl	80055b0 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f003 0310 	and.w	r3, r3, #16
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d161      	bne.n	8001bee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0210 	bic.w	r2, r2, #16
 8001b38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	f003 020f 	and.w	r2, r3, #15
 8001b46:	4613      	mov	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	3304      	adds	r3, #4
 8001b58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	0c5b      	lsrs	r3, r3, #17
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d124      	bne.n	8001bb0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d035      	beq.n	8001bde <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	461a      	mov	r2, r3
 8001b84:	6a38      	ldr	r0, [r7, #32]
 8001b86:	f003 fb7f 	bl	8005288 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b96:	441a      	add	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba8:	441a      	add	r2, r3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	621a      	str	r2, [r3, #32]
 8001bae:	e016      	b.n	8001bde <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	0c5b      	lsrs	r3, r3, #17
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	2b06      	cmp	r3, #6
 8001bba:	d110      	bne.n	8001bde <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	6a38      	ldr	r0, [r7, #32]
 8001bc8:	f003 fb5e 	bl	8005288 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bd8:	441a      	add	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0210 	orr.w	r2, r2, #16
 8001bec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fcdc 	bl	80055b0 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c02:	f040 80a7 	bne.w	8001d54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fce1 	bl	80055d6 <USB_ReadDevAllOutEpInterrupt>
 8001c14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c16:	e099      	b.n	8001d4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 808e 	beq.w	8001d40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f003 fd05 	bl	800563e <USB_ReadDevOutEPInterrupt>
 8001c34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00c      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2301      	movs	r3, #1
 8001c50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fec3 	bl	80029e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00c      	beq.n	8001c7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c70:	461a      	mov	r2, r3
 8001c72:	2308      	movs	r3, #8
 8001c74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 ff99 	bl	8002bb0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c94:	461a      	mov	r2, r3
 8001c96:	2310      	movs	r3, #16
 8001c98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d030      	beq.n	8001d06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ca4:	6a3b      	ldr	r3, [r7, #32]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cac:	2b80      	cmp	r3, #128	; 0x80
 8001cae:	d109      	bne.n	8001cc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d108      	bne.n	8001cf4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f006 f87e 	bl	8007df0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d00:	461a      	mov	r2, r3
 8001d02:	2302      	movs	r3, #2
 8001d04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	015a      	lsls	r2, r3, #5
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	4413      	add	r3, r2
 8001d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2320      	movs	r3, #32
 8001d20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d009      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d38:	461a      	mov	r2, r3
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3301      	adds	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f af62 	bne.w	8001c18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fc29 	bl	80055b0 <USB_ReadInterrupts>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d68:	f040 80db 	bne.w	8001f22 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fc4a 	bl	800560a <USB_ReadDevAllInEpInterrupt>
 8001d76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d7c:	e0cd      	b.n	8001f1a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80c2 	beq.w	8001f0e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f003 fc70 	bl	800567a <USB_ReadDevInEPInterrupt>
 8001d9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d057      	beq.n	8001e56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	2201      	movs	r2, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69f9      	ldr	r1, [r7, #28]
 8001dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	015a      	lsls	r2, r3, #5
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	2301      	movs	r3, #1
 8001dda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d132      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	334c      	adds	r3, #76	; 0x4c
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4403      	add	r3, r0
 8001e04:	3348      	adds	r3, #72	; 0x48
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4419      	add	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0e:	4613      	mov	r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	4413      	add	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4403      	add	r3, r0
 8001e18:	334c      	adds	r3, #76	; 0x4c
 8001e1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d113      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x3a2>
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	3354      	adds	r3, #84	; 0x54
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d108      	bne.n	8001e4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6818      	ldr	r0, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e42:	461a      	mov	r2, r3
 8001e44:	2101      	movs	r1, #1
 8001e46:	f003 fc77 	bl	8005738 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f005 ff52 	bl	8007cfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d008      	beq.n	8001e72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2308      	movs	r3, #8
 8001e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2310      	movs	r3, #16
 8001e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001eb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb6:	6a38      	ldr	r0, [r7, #32]
 8001eb8:	f002 fb58 	bl	800456c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	3338      	adds	r3, #56	; 0x38
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	78db      	ldrb	r3, [r3, #3]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2200      	movs	r2, #0
 8001edc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f005 ff95 	bl	8007e14 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	015a      	lsls	r2, r3, #5
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2302      	movs	r3, #2
 8001efa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fcdb 	bl	80028c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	3301      	adds	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f47f af2e 	bne.w	8001d7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 fb42 	bl	80055b0 <USB_ReadInterrupts>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f36:	d122      	bne.n	8001f7e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	69fa      	ldr	r2, [r7, #28]
 8001f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fec3 	bl	8002cec <HAL_PCDEx_LPM_Callback>
 8001f66:	e002      	b.n	8001f6e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f005 ff33 	bl	8007dd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 fb14 	bl	80055b0 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f92:	d112      	bne.n	8001fba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d102      	bne.n	8001faa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f005 feef 	bl	8007d88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001fb8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 faf6 	bl	80055b0 <USB_ReadInterrupts>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fce:	f040 80b7 	bne.w	8002140 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2110      	movs	r1, #16
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fabd 	bl	800456c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff6:	e046      	b.n	8002086 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002004:	461a      	mov	r2, r3
 8002006:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800200a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	015a      	lsls	r2, r3, #5
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	4413      	add	r3, r2
 8002014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800201c:	0151      	lsls	r1, r2, #5
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	440a      	add	r2, r1
 8002022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002026:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800202a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	4413      	add	r3, r2
 8002034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002038:	461a      	mov	r2, r3
 800203a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800203e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002050:	0151      	lsls	r1, r2, #5
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	440a      	add	r2, r1
 8002056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800205a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800205e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	4413      	add	r3, r2
 8002068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	440a      	add	r2, r1
 8002076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800207a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800207e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002082:	3301      	adds	r3, #1
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800208c:	429a      	cmp	r2, r3
 800208e:	d3b3      	bcc.n	8001ff8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80020a2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020bc:	f043 030b 	orr.w	r3, r3, #11
 80020c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	69fa      	ldr	r2, [r7, #28]
 80020ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020d2:	f043 030b 	orr.w	r3, r3, #11
 80020d6:	6453      	str	r3, [r2, #68]	; 0x44
 80020d8:	e015      	b.n	8002106 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020f0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002100:	f043 030b 	orr.w	r3, r3, #11
 8002104:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002114:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002118:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800212a:	461a      	mov	r2, r3
 800212c:	f003 fb04 	bl	8005738 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800213e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fa33 	bl	80055b0 <USB_ReadInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002154:	d124      	bne.n	80021a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f003 fac9 	bl	80056f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 fa7e 	bl	8004666 <USB_GetDevSpeed>
 800216a:	4603      	mov	r3, r0
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681c      	ldr	r4, [r3, #0]
 8002176:	f001 f9e9 	bl	800354c <HAL_RCC_GetHCLKFreq>
 800217a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	4620      	mov	r0, r4
 8002186:	f001 ff7d 	bl	8004084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f005 fddd 	bl	8007d4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800219e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fa03 	bl	80055b0 <USB_ReadInterrupts>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d10a      	bne.n	80021ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f005 fdba 	bl	8007d2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f002 0208 	and.w	r2, r2, #8
 80021c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f003 f9ee 	bl	80055b0 <USB_ReadInterrupts>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	2b80      	cmp	r3, #128	; 0x80
 80021dc:	d122      	bne.n	8002224 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ea:	2301      	movs	r3, #1
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
 80021ee:	e014      	b.n	800221a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	b2db      	uxtb	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fb27 	bl	8002862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	3301      	adds	r3, #1
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	429a      	cmp	r2, r3
 8002222:	d3e5      	bcc.n	80021f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f003 f9c1 	bl	80055b0 <USB_ReadInterrupts>
 800222e:	4603      	mov	r3, r0
 8002230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002238:	d13b      	bne.n	80022b2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800223a:	2301      	movs	r3, #1
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e02b      	b.n	8002298 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3340      	adds	r3, #64	; 0x40
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d115      	bne.n	8002292 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002266:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	da12      	bge.n	8002292 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4413      	add	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	333f      	adds	r3, #63	; 0x3f
 800227c:	2201      	movs	r2, #1
 800227e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002288:	b2db      	uxtb	r3, r3
 800228a:	4619      	mov	r1, r3
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fae8 	bl	8002862 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3ce      	bcc.n	8002240 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80022b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 f97a 	bl	80055b0 <USB_ReadInterrupts>
 80022bc:	4603      	mov	r3, r0
 80022be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022c6:	d155      	bne.n	8002374 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	e045      	b.n	800235a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12e      	bne.n	8002354 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	da2b      	bge.n	8002354 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002308:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800230c:	429a      	cmp	r2, r3
 800230e:	d121      	bne.n	8002354 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10a      	bne.n	8002354 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002350:	6053      	str	r3, [r2, #4]
            break;
 8002352:	e007      	b.n	8002364 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3301      	adds	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	429a      	cmp	r2, r3
 8002362:	d3b4      	bcc.n	80022ce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002372:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f003 f919 	bl	80055b0 <USB_ReadInterrupts>
 800237e:	4603      	mov	r3, r0
 8002380:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d10a      	bne.n	80023a0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f005 fd54 	bl	8007e38 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800239e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 f903 	bl	80055b0 <USB_ReadInterrupts>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d115      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f005 fd44 	bl	8007e54 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6859      	ldr	r1, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	e000      	b.n	80023e0 <HAL_PCD_IRQHandler+0x938>
      return;
 80023de:	bf00      	nop
    }
  }
}
 80023e0:	3734      	adds	r7, #52	; 0x34
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}

080023e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	460b      	mov	r3, r1
 80023f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <HAL_PCD_SetAddress+0x1a>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e013      	b.n	8002428 <HAL_PCD_SetAddress+0x42>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f003 f861 	bl	80054e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	70fb      	strb	r3, [r7, #3]
 8002442:	460b      	mov	r3, r1
 8002444:	803b      	strh	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800244e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	da0f      	bge.n	8002476 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 020f 	and.w	r2, r3, #15
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	3338      	adds	r3, #56	; 0x38
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	3304      	adds	r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	705a      	strb	r2, [r3, #1]
 8002474:	e00f      	b.n	8002496 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002476:	78fb      	ldrb	r3, [r7, #3]
 8002478:	f003 020f 	and.w	r2, r3, #15
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4413      	add	r3, r2
 800248c:	3304      	adds	r3, #4
 800248e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80024a2:	883a      	ldrh	r2, [r7, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	78ba      	ldrb	r2, [r7, #2]
 80024ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80024c0:	78bb      	ldrb	r3, [r7, #2]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d102      	bne.n	80024cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_PCD_EP_Open+0xaa>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e00e      	b.n	80024f8 <HAL_PCD_EP_Open+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 f8e1 	bl	80046b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024f6:	7afb      	ldrb	r3, [r7, #11]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800250c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002510:	2b00      	cmp	r3, #0
 8002512:	da0f      	bge.n	8002534 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002514:	78fb      	ldrb	r3, [r7, #3]
 8002516:	f003 020f 	and.w	r2, r3, #15
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	3338      	adds	r3, #56	; 0x38
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	705a      	strb	r2, [r3, #1]
 8002532:	e00f      	b.n	8002554 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	f003 020f 	and.w	r2, r3, #15
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	4413      	add	r3, r2
 800254a:	3304      	adds	r3, #4
 800254c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_PCD_EP_Close+0x6e>
 800256a:	2302      	movs	r3, #2
 800256c:	e00e      	b.n	800258c <HAL_PCD_EP_Close+0x8c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68f9      	ldr	r1, [r7, #12]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 f91f 	bl	80047c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	460b      	mov	r3, r1
 80025a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025a4:	7afb      	ldrb	r3, [r7, #11]
 80025a6:	f003 020f 	and.w	r2, r3, #15
 80025aa:	4613      	mov	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	3304      	adds	r3, #4
 80025bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2200      	movs	r2, #0
 80025d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025d6:	7afb      	ldrb	r3, [r7, #11]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	6979      	ldr	r1, [r7, #20]
 8002608:	f002 fbfe 	bl	8004e08 <USB_EP0StartXfer>
 800260c:	e008      	b.n	8002620 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	f002 f9ac 	bl	8004978 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	4613      	mov	r3, r2
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4413      	add	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800264c:	681b      	ldr	r3, [r3, #0]
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	603b      	str	r3, [r7, #0]
 8002666:	460b      	mov	r3, r1
 8002668:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800266a:	7afb      	ldrb	r3, [r7, #11]
 800266c:	f003 020f 	and.w	r2, r3, #15
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	3338      	adds	r3, #56	; 0x38
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d102      	bne.n	80026b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026b4:	7afb      	ldrb	r3, [r7, #11]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	6979      	ldr	r1, [r7, #20]
 80026cc:	f002 fb9c 	bl	8004e08 <USB_EP0StartXfer>
 80026d0:	e008      	b.n	80026e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	f002 f94a 	bl	8004978 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b084      	sub	sp, #16
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	460b      	mov	r3, r1
 80026f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 020f 	and.w	r2, r3, #15
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d901      	bls.n	800270c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e050      	b.n	80027ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800270c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002710:	2b00      	cmp	r3, #0
 8002712:	da0f      	bge.n	8002734 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002714:	78fb      	ldrb	r3, [r7, #3]
 8002716:	f003 020f 	and.w	r2, r3, #15
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	3338      	adds	r3, #56	; 0x38
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	4413      	add	r3, r2
 8002728:	3304      	adds	r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	705a      	strb	r2, [r3, #1]
 8002732:	e00d      	b.n	8002750 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	3304      	adds	r3, #4
 8002748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_PCD_EP_SetStall+0x82>
 800276c:	2302      	movs	r3, #2
 800276e:	e01e      	b.n	80027ae <HAL_PCD_EP_SetStall+0xc0>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68f9      	ldr	r1, [r7, #12]
 800277e:	4618      	mov	r0, r3
 8002780:	f002 fdda 	bl	8005338 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	b2d9      	uxtb	r1, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800279e:	461a      	mov	r2, r3
 80027a0:	f002 ffca 	bl	8005738 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	f003 020f 	and.w	r2, r3, #15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d901      	bls.n	80027d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e042      	b.n	800285a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	da0f      	bge.n	80027fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	f003 020f 	and.w	r2, r3, #15
 80027e2:	4613      	mov	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4413      	add	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	3338      	adds	r3, #56	; 0x38
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	3304      	adds	r3, #4
 80027f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2201      	movs	r2, #1
 80027f8:	705a      	strb	r2, [r3, #1]
 80027fa:	e00f      	b.n	800281c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	3304      	adds	r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_PCD_EP_ClrStall+0x86>
 8002838:	2302      	movs	r3, #2
 800283a:	e00e      	b.n	800285a <HAL_PCD_EP_ClrStall+0xa4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	4618      	mov	r0, r3
 800284c:	f002 fde2 	bl	8005414 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800286e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002872:	2b00      	cmp	r3, #0
 8002874:	da0c      	bge.n	8002890 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	f003 020f 	and.w	r2, r3, #15
 800287c:	4613      	mov	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3338      	adds	r3, #56	; 0x38
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e00c      	b.n	80028aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	3304      	adds	r3, #4
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68f9      	ldr	r1, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f002 fc01 	bl	80050b8 <USB_EPStopXfer>
 80028b6:	4603      	mov	r3, r0
 80028b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80028ba:	7afb      	ldrb	r3, [r7, #11]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	3338      	adds	r3, #56	; 0x38
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	4413      	add	r3, r2
 80028e8:	3304      	adds	r3, #4
 80028ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a1a      	ldr	r2, [r3, #32]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d901      	bls.n	80028fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e06c      	b.n	80029d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	429a      	cmp	r2, r3
 8002910:	d902      	bls.n	8002918 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	3303      	adds	r3, #3
 800291c:	089b      	lsrs	r3, r3, #2
 800291e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002920:	e02b      	b.n	800297a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	429a      	cmp	r2, r3
 8002936:	d902      	bls.n	800293e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3303      	adds	r3, #3
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6919      	ldr	r1, [r3, #16]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002956:	b2db      	uxtb	r3, r3
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4603      	mov	r3, r0
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f002 fc55 	bl	800520c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1a      	ldr	r2, [r3, #32]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	441a      	add	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	015a      	lsls	r2, r3, #5
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	4413      	add	r3, r2
 8002982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	b29b      	uxth	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	429a      	cmp	r2, r3
 800298e:	d809      	bhi.n	80029a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002998:	429a      	cmp	r2, r3
 800299a:	d203      	bcs.n	80029a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1be      	bne.n	8002922 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d811      	bhi.n	80029d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	2201      	movs	r2, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	6939      	ldr	r1, [r7, #16]
 80029cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029d0:	4013      	ands	r3, r2
 80029d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	333c      	adds	r3, #60	; 0x3c
 80029f8:	3304      	adds	r3, #4
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d17b      	bne.n	8002b0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d015      	beq.n	8002a4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a61      	ldr	r2, [pc, #388]	; (8002ba8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f240 80b9 	bls.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80b3 	beq.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a48:	6093      	str	r3, [r2, #8]
 8002a4a:	e0a7      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a62:	461a      	mov	r2, r3
 8002a64:	2320      	movs	r3, #32
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	e098      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 8093 	bne.w	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	4a4b      	ldr	r2, [pc, #300]	; (8002ba8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d90f      	bls.n	8002a9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a9a:	6093      	str	r3, [r2, #8]
 8002a9c:	e07e      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	0159      	lsls	r1, r3, #5
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aca:	1ad2      	subs	r2, r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d114      	bne.n	8002b00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d109      	bne.n	8002af2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2101      	movs	r1, #1
 8002aec:	f002 fe24 	bl	8005738 <USB_EP0_OutStart>
 8002af0:	e006      	b.n	8002b00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	691a      	ldr	r2, [r3, #16]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	441a      	add	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f005 f8dc 	bl	8007cc4 <HAL_PCD_DataOutStageCallback>
 8002b0c:	e046      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d124      	bne.n	8002b60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b32:	6093      	str	r3, [r2, #8]
 8002b34:	e032      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d008      	beq.n	8002b52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	2320      	movs	r3, #32
 8002b50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f005 f8b3 	bl	8007cc4 <HAL_PCD_DataOutStageCallback>
 8002b5e:	e01d      	b.n	8002b9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d114      	bne.n	8002b90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	f002 fdd4 	bl	8005738 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f005 f894 	bl	8007cc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	4f54300a 	.word	0x4f54300a
 8002bac:	4f54310a 	.word	0x4f54310a

08002bb0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	333c      	adds	r3, #60	; 0x3c
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d90e      	bls.n	8002c04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f005 f84b 	bl	8007ca0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d90c      	bls.n	8002c2c <PCD_EP_OutSetupPacket_int+0x7c>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d108      	bne.n	8002c2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c24:	461a      	mov	r2, r3
 8002c26:	2101      	movs	r1, #1
 8002c28:	f002 fd86 	bl	8005738 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	4f54300a 	.word	0x4f54300a

08002c3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002c54:	78fb      	ldrb	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002c5a:	883b      	ldrh	r3, [r7, #0]
 8002c5c:	0419      	lsls	r1, r3, #16
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	629a      	str	r2, [r3, #40]	; 0x28
 8002c68:	e028      	b.n	8002cbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e00d      	b.n	8002c9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	3340      	adds	r3, #64	; 0x40
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	4413      	add	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	78fb      	ldrb	r3, [r7, #3]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ec      	bcc.n	8002c7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ca4:	883b      	ldrh	r3, [r7, #0]
 8002ca6:	0418      	lsls	r0, r3, #16
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6819      	ldr	r1, [r3, #0]
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	4302      	orrs	r2, r0
 8002cb4:	3340      	adds	r3, #64	; 0x40
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e267      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d075      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d00c      	beq.n	8002d48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2e:	4b85      	ldr	r3, [pc, #532]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d112      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d3a:	4b82      	ldr	r3, [pc, #520]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d46:	d10b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4b7e      	ldr	r3, [pc, #504]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d05b      	beq.n	8002e0c <HAL_RCC_OscConfig+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d157      	bne.n	8002e0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e242      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d68:	d106      	bne.n	8002d78 <HAL_RCC_OscConfig+0x74>
 8002d6a:	4b76      	ldr	r3, [pc, #472]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a75      	ldr	r2, [pc, #468]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x98>
 8002d82:	4b70      	ldr	r3, [pc, #448]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a6f      	ldr	r2, [pc, #444]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b6d      	ldr	r3, [pc, #436]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a6c      	ldr	r2, [pc, #432]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	4b69      	ldr	r3, [pc, #420]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a68      	ldr	r2, [pc, #416]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b66      	ldr	r3, [pc, #408]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a65      	ldr	r2, [pc, #404]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7fe f900 	bl	8000fc0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe f8fc 	bl	8000fc0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e207      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b5b      	ldr	r3, [pc, #364]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xc0>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe f8ec 	bl	8000fc0 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe f8e8 	bl	8000fc0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e1f3      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b51      	ldr	r3, [pc, #324]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0xe8>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d063      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	4b4a      	ldr	r3, [pc, #296]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e32:	4b44      	ldr	r3, [pc, #272]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b41      	ldr	r3, [pc, #260]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1c7      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4937      	ldr	r1, [pc, #220]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e03a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7a:	f7fe f8a1 	bl	8000fc0 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e82:	f7fe f89d 	bl	8000fc0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e1a8      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e94:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	4b28      	ldr	r3, [pc, #160]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	600b      	str	r3, [r1, #0]
 8002eb4:	e015      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_OscConfig+0x244>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe f880 	bl	8000fc0 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec4:	f7fe f87c 	bl	8000fc0 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e187      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d036      	beq.n	8002f5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef6:	4b15      	ldr	r3, [pc, #84]	; (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7fe f860 	bl	8000fc0 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe f85c 	bl	8000fc0 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e167      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f16:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_OscConfig+0x240>)
 8002f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x200>
 8002f22:	e01b      	b.n	8002f5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_OscConfig+0x248>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe f849 	bl	8000fc0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f30:	e00e      	b.n	8002f50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f32:	f7fe f845 	bl	8000fc0 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d907      	bls.n	8002f50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e150      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	42470000 	.word	0x42470000
 8002f4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f50:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ea      	bne.n	8002f32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8097 	beq.w	8003098 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10f      	bne.n	8002f9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b7d      	ldr	r3, [pc, #500]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b7a      	ldr	r3, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f96:	2301      	movs	r3, #1
 8002f98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9a:	4b77      	ldr	r3, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d118      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fa6:	4b74      	ldr	r3, [pc, #464]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a73      	ldr	r2, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb2:	f7fe f805 	bl	8000fc0 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fba:	f7fe f801 	bl	8000fc0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e10c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fcc:	4b6a      	ldr	r3, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x474>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d0f0      	beq.n	8002fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d106      	bne.n	8002fee <HAL_RCC_OscConfig+0x2ea>
 8002fe0:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	4a63      	ldr	r2, [pc, #396]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	6713      	str	r3, [r2, #112]	; 0x70
 8002fec:	e01c      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b05      	cmp	r3, #5
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x30c>
 8002ff6:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a5e      	ldr	r2, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8002ffc:	f043 0304 	orr.w	r3, r3, #4
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003006:	4a5b      	ldr	r2, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	6713      	str	r3, [r2, #112]	; 0x70
 800300e:	e00b      	b.n	8003028 <HAL_RCC_OscConfig+0x324>
 8003010:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
 800301c:	4b55      	ldr	r3, [pc, #340]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a54      	ldr	r2, [pc, #336]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 0304 	bic.w	r3, r3, #4
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003030:	f7fd ffc6 	bl	8000fc0 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	e00a      	b.n	800304e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003038:	f7fd ffc2 	bl	8000fc0 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0cb      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304e:	4b49      	ldr	r3, [pc, #292]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0ee      	beq.n	8003038 <HAL_RCC_OscConfig+0x334>
 800305a:	e014      	b.n	8003086 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305c:	f7fd ffb0 	bl	8000fc0 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	e00a      	b.n	800307a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003064:	f7fd ffac 	bl	8000fc0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003072:	4293      	cmp	r3, r2
 8003074:	d901      	bls.n	800307a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	e0b5      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307a:	4b3e      	ldr	r3, [pc, #248]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800307c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ee      	bne.n	8003064 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d105      	bne.n	8003098 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308c:	4b39      	ldr	r3, [pc, #228]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	4a38      	ldr	r2, [pc, #224]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a1 	beq.w	80031e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a2:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d05c      	beq.n	8003168 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d141      	bne.n	800313a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b6:	4b31      	ldr	r3, [pc, #196]	; (800317c <HAL_RCC_OscConfig+0x478>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7fd ff80 	bl	8000fc0 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c4:	f7fd ff7c 	bl	8000fc0 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e087      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	4b27      	ldr	r3, [pc, #156]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69da      	ldr	r2, [r3, #28]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	019b      	lsls	r3, r3, #6
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	3b01      	subs	r3, #1
 80030fc:	041b      	lsls	r3, r3, #16
 80030fe:	431a      	orrs	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x478>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fd ff55 	bl	8000fc0 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd ff51 	bl	8000fc0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e05c      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x416>
 8003138:	e054      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x478>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd ff3e 	bl	8000fc0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd ff3a 	bl	8000fc0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x470>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x444>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e038      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	40007000 	.word	0x40007000
 800317c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003180:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <HAL_RCC_OscConfig+0x4ec>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d028      	beq.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d121      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d11a      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031b0:	4013      	ands	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	3b01      	subs	r3, #1
 80031ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023800 	.word	0x40023800

080031f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e0cc      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003208:	4b68      	ldr	r3, [pc, #416]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d90c      	bls.n	8003230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b63      	ldr	r3, [pc, #396]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0b8      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003248:	4b59      	ldr	r3, [pc, #356]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a58      	ldr	r2, [pc, #352]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003260:	4b53      	ldr	r3, [pc, #332]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a52      	ldr	r2, [pc, #328]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800326a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800326c:	4b50      	ldr	r3, [pc, #320]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	494d      	ldr	r1, [pc, #308]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d044      	beq.n	8003314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d107      	bne.n	80032a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c2:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e067      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d2:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	4934      	ldr	r1, [pc, #208]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032e4:	f7fd fe6c 	bl	8000fc0 <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	e00a      	b.n	8003302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ec:	f7fd fe68 	bl	8000fc0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e04f      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	4b2b      	ldr	r3, [pc, #172]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 020c 	and.w	r2, r3, #12
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	429a      	cmp	r2, r3
 8003312:	d1eb      	bne.n	80032ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d20c      	bcs.n	800333c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332a:	4b20      	ldr	r3, [pc, #128]	; (80033ac <HAL_RCC_ClockConfig+0x1b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e032      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d008      	beq.n	800335a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4916      	ldr	r1, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	490e      	ldr	r1, [pc, #56]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	4313      	orrs	r3, r2
 8003378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800337a:	f000 f821 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800337e:	4602      	mov	r2, r0
 8003380:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	5ccb      	ldrb	r3, [r1, r3]
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	4a09      	ldr	r2, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd fdcc 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40023c00 	.word	0x40023c00
 80033b0:	40023800 	.word	0x40023800
 80033b4:	08008c2c 	.word	0x08008c2c
 80033b8:	20000000 	.word	0x20000000
 80033bc:	20000004 	.word	0x20000004

080033c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c4:	b090      	sub	sp, #64	; 0x40
 80033c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
 80033cc:	2300      	movs	r3, #0
 80033ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d00d      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x40>
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	f200 80a1 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x16c>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <HAL_RCC_GetSysClockFreq+0x34>
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_GetSysClockFreq+0x3a>
 80033f2:	e09b      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033f4:	4b53      	ldr	r3, [pc, #332]	; (8003544 <HAL_RCC_GetSysClockFreq+0x184>)
 80033f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033f8:	e09b      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033fa:	4b53      	ldr	r3, [pc, #332]	; (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 80033fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033fe:	e098      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800340a:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d028      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003416:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	2200      	movs	r2, #0
 800341e:	623b      	str	r3, [r7, #32]
 8003420:	627a      	str	r2, [r7, #36]	; 0x24
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003428:	2100      	movs	r1, #0
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 800342c:	fb03 f201 	mul.w	r2, r3, r1
 8003430:	2300      	movs	r3, #0
 8003432:	fb00 f303 	mul.w	r3, r0, r3
 8003436:	4413      	add	r3, r2
 8003438:	4a43      	ldr	r2, [pc, #268]	; (8003548 <HAL_RCC_GetSysClockFreq+0x188>)
 800343a:	fba0 1202 	umull	r1, r2, r0, r2
 800343e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003440:	460a      	mov	r2, r1
 8003442:	62ba      	str	r2, [r7, #40]	; 0x28
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	4413      	add	r3, r2
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344c:	2200      	movs	r2, #0
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	61fa      	str	r2, [r7, #28]
 8003452:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003456:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800345a:	f7fc ff19 	bl	8000290 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4613      	mov	r3, r2
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003466:	e053      	b.n	8003510 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	099b      	lsrs	r3, r3, #6
 800346e:	2200      	movs	r2, #0
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	617a      	str	r2, [r7, #20]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800347a:	f04f 0b00 	mov.w	fp, #0
 800347e:	4652      	mov	r2, sl
 8003480:	465b      	mov	r3, fp
 8003482:	f04f 0000 	mov.w	r0, #0
 8003486:	f04f 0100 	mov.w	r1, #0
 800348a:	0159      	lsls	r1, r3, #5
 800348c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003490:	0150      	lsls	r0, r2, #5
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	ebb2 080a 	subs.w	r8, r2, sl
 800349a:	eb63 090b 	sbc.w	r9, r3, fp
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034b2:	ebb2 0408 	subs.w	r4, r2, r8
 80034b6:	eb63 0509 	sbc.w	r5, r3, r9
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	00eb      	lsls	r3, r5, #3
 80034c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034c8:	00e2      	lsls	r2, r4, #3
 80034ca:	4614      	mov	r4, r2
 80034cc:	461d      	mov	r5, r3
 80034ce:	eb14 030a 	adds.w	r3, r4, sl
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	eb45 030b 	adc.w	r3, r5, fp
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034e6:	4629      	mov	r1, r5
 80034e8:	028b      	lsls	r3, r1, #10
 80034ea:	4621      	mov	r1, r4
 80034ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f0:	4621      	mov	r1, r4
 80034f2:	028a      	lsls	r2, r1, #10
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fa:	2200      	movs	r2, #0
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	60fa      	str	r2, [r7, #12]
 8003500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003504:	f7fc fec4 	bl	8000290 <__aeabi_uldivmod>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4613      	mov	r3, r2
 800350e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_GetSysClockFreq+0x180>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	0c1b      	lsrs	r3, r3, #16
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	3301      	adds	r3, #1
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003524:	fbb2 f3f3 	udiv	r3, r2, r3
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800352a:	e002      	b.n	8003532 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_RCC_GetSysClockFreq+0x184>)
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003534:	4618      	mov	r0, r3
 8003536:	3740      	adds	r7, #64	; 0x40
 8003538:	46bd      	mov	sp, r7
 800353a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800353e:	bf00      	nop
 8003540:	40023800 	.word	0x40023800
 8003544:	00f42400 	.word	0x00f42400
 8003548:	017d7840 	.word	0x017d7840

0800354c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCC_GetHCLKFreq+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	20000000 	.word	0x20000000

08003564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003568:	f7ff fff0 	bl	800354c <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0a9b      	lsrs	r3, r3, #10
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	08008c3c 	.word	0x08008c3c

0800358c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003590:	f7ff ffdc 	bl	800354c <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0b5b      	lsrs	r3, r3, #13
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08008c3c 	.word	0x08008c3c

080035b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e03f      	b.n	8003646 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fd fb68 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 fa6d 	bl	8003ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691a      	ldr	r2, [r3, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800360c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800361c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800362c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e057      	b.n	8003712 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fb1a 	bl	8000cb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fa1f 	bl	8003ad8 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691a      	ldr	r2, [r3, #16]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036b8:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036c8:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0220 	bic.w	r2, r2, #32
 80036d8:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6919      	ldr	r1, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2220      	movs	r2, #32
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b08a      	sub	sp, #40	; 0x28
 800371e:	af02      	add	r7, sp, #8
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	603b      	str	r3, [r7, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	d17c      	bne.n	8003834 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_UART_Transmit+0x2c>
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e075      	b.n	8003836 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_UART_Transmit+0x3e>
 8003754:	2302      	movs	r3, #2
 8003756:	e06e      	b.n	8003836 <HAL_UART_Transmit+0x11c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2221      	movs	r2, #33	; 0x21
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376e:	f7fd fc27 	bl	8000fc0 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x82>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037ac:	e02a      	b.n	8003804 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2200      	movs	r2, #0
 80037b6:	2180      	movs	r1, #128	; 0x80
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 f91e 	bl	80039fa <UART_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e036      	b.n	8003836 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10b      	bne.n	80037e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3302      	adds	r3, #2
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	e007      	b.n	80037f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	781a      	ldrb	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1cf      	bne.n	80037ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	2200      	movs	r2, #0
 8003816:	2140      	movs	r1, #64	; 0x40
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f8ee 	bl	80039fa <UART_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e006      	b.n	8003836 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e000      	b.n	8003836 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003834:	2302      	movs	r3, #2
  }
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08a      	sub	sp, #40	; 0x28
 8003842:	af02      	add	r7, sp, #8
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b20      	cmp	r3, #32
 800385c:	f040 808c 	bne.w	8003978 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Receive+0x2e>
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e084      	b.n	800397a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_UART_Receive+0x40>
 800387a:	2302      	movs	r3, #2
 800387c:	e07d      	b.n	800397a <HAL_UART_Receive+0x13c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2222      	movs	r2, #34	; 0x22
 8003890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fd fb91 	bl	8000fc0 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Receive+0x8a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80038d8:	e043      	b.n	8003962 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2120      	movs	r1, #32
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f888 	bl	80039fa <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e042      	b.n	800397a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	b29a      	uxth	r2, r3
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	3302      	adds	r3, #2
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	e01f      	b.n	8003954 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d007      	beq.n	800392e <HAL_UART_Receive+0xf0>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_UART_Receive+0xfe>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e008      	b.n	800394e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	b2da      	uxtb	r2, r3
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3301      	adds	r3, #1
 8003952:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003966:	b29b      	uxth	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1b6      	bne.n	80038da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8003982:	b480      	push	{r7}
 8003984:	b089      	sub	sp, #36	; 0x24
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_LIN_SendBreak+0x16>
 8003994:	2302      	movs	r3, #2
 8003996:	e02a      	b.n	80039ee <HAL_LIN_SendBreak+0x6c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2224      	movs	r2, #36	; 0x24
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f043 0301 	orr.w	r3, r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	61ba      	str	r2, [r7, #24]
 80039ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	613b      	str	r3, [r7, #16]
   return(result);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3724      	adds	r7, #36	; 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b090      	sub	sp, #64	; 0x40
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4613      	mov	r3, r2
 8003a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0a:	e050      	b.n	8003aae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d04c      	beq.n	8003aae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d007      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1a:	f7fd fad1 	bl	8000fc0 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d241      	bcs.n	8003aae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	330c      	adds	r3, #12
 8003a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a4a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a4c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f023 0301 	bic.w	r3, r3, #1
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3314      	adds	r3, #20
 8003a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a7e:	623a      	str	r2, [r7, #32]
 8003a80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	69f9      	ldr	r1, [r7, #28]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e00f      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d09f      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3740      	adds	r7, #64	; 0x40
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003adc:	b0c0      	sub	sp, #256	; 0x100
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	68d9      	ldr	r1, [r3, #12]
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	ea40 0301 	orr.w	r3, r0, r1
 8003b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	431a      	orrs	r2, r3
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b30:	f021 010c 	bic.w	r1, r1, #12
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	6999      	ldr	r1, [r3, #24]
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	ea40 0301 	orr.w	r3, r0, r1
 8003b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b8f      	ldr	r3, [pc, #572]	; (8003da4 <UART_SetConfig+0x2cc>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d005      	beq.n	8003b78 <UART_SetConfig+0xa0>
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	4b8d      	ldr	r3, [pc, #564]	; (8003da8 <UART_SetConfig+0x2d0>)
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b78:	f7ff fd08 	bl	800358c <HAL_RCC_GetPCLK2Freq>
 8003b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b80:	e003      	b.n	8003b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b82:	f7ff fcef 	bl	8003564 <HAL_RCC_GetPCLK1Freq>
 8003b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b94:	f040 810c 	bne.w	8003db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003baa:	4622      	mov	r2, r4
 8003bac:	462b      	mov	r3, r5
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bba:	4621      	mov	r1, r4
 8003bbc:	eb12 0801 	adds.w	r8, r2, r1
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	eb43 0901 	adc.w	r9, r3, r1
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bda:	4690      	mov	r8, r2
 8003bdc:	4699      	mov	r9, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	eb18 0303 	adds.w	r3, r8, r3
 8003be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003be8:	462b      	mov	r3, r5
 8003bea:	eb49 0303 	adc.w	r3, r9, r3
 8003bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c06:	460b      	mov	r3, r1
 8003c08:	18db      	adds	r3, r3, r3
 8003c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	eb42 0303 	adc.w	r3, r2, r3
 8003c12:	657b      	str	r3, [r7, #84]	; 0x54
 8003c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c1c:	f7fc fb38 	bl	8000290 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4b61      	ldr	r3, [pc, #388]	; (8003dac <UART_SetConfig+0x2d4>)
 8003c26:	fba3 2302 	umull	r2, r3, r3, r2
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	011c      	lsls	r4, r3, #4
 8003c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c32:	2200      	movs	r2, #0
 8003c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c40:	4642      	mov	r2, r8
 8003c42:	464b      	mov	r3, r9
 8003c44:	1891      	adds	r1, r2, r2
 8003c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c48:	415b      	adcs	r3, r3
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c50:	4641      	mov	r1, r8
 8003c52:	eb12 0a01 	adds.w	sl, r2, r1
 8003c56:	4649      	mov	r1, r9
 8003c58:	eb43 0b01 	adc.w	fp, r3, r1
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c70:	4692      	mov	sl, r2
 8003c72:	469b      	mov	fp, r3
 8003c74:	4643      	mov	r3, r8
 8003c76:	eb1a 0303 	adds.w	r3, sl, r3
 8003c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb4b 0303 	adc.w	r3, fp, r3
 8003c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	18db      	adds	r3, r3, r3
 8003ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8003caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003cb2:	f7fc faed 	bl	8000290 <__aeabi_uldivmod>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <UART_SetConfig+0x2d4>)
 8003cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2264      	movs	r2, #100	; 0x64
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	1acb      	subs	r3, r1, r3
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003cd2:	4b36      	ldr	r3, [pc, #216]	; (8003dac <UART_SetConfig+0x2d4>)
 8003cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ce0:	441c      	add	r4, r3
 8003ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	464b      	mov	r3, r9
 8003cf8:	1891      	adds	r1, r2, r2
 8003cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003cfc:	415b      	adcs	r3, r3
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d04:	4641      	mov	r1, r8
 8003d06:	1851      	adds	r1, r2, r1
 8003d08:	6339      	str	r1, [r7, #48]	; 0x30
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	414b      	adcs	r3, r1
 8003d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	00cb      	lsls	r3, r1, #3
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d26:	4651      	mov	r1, sl
 8003d28:	00ca      	lsls	r2, r1, #3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4642      	mov	r2, r8
 8003d32:	189b      	adds	r3, r3, r2
 8003d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d38:	464b      	mov	r3, r9
 8003d3a:	460a      	mov	r2, r1
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d58:	460b      	mov	r3, r1
 8003d5a:	18db      	adds	r3, r3, r3
 8003d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d5e:	4613      	mov	r3, r2
 8003d60:	eb42 0303 	adc.w	r3, r2, r3
 8003d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003d6e:	f7fc fa8f 	bl	8000290 <__aeabi_uldivmod>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4b0d      	ldr	r3, [pc, #52]	; (8003dac <UART_SetConfig+0x2d4>)
 8003d78:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	2164      	movs	r1, #100	; 0x64
 8003d80:	fb01 f303 	mul.w	r3, r1, r3
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	3332      	adds	r3, #50	; 0x32
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <UART_SetConfig+0x2d4>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	f003 0207 	and.w	r2, r3, #7
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4422      	add	r2, r4
 8003d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003da0:	e105      	b.n	8003fae <UART_SetConfig+0x4d6>
 8003da2:	bf00      	nop
 8003da4:	40011000 	.word	0x40011000
 8003da8:	40011400 	.word	0x40011400
 8003dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003db4:	2200      	movs	r2, #0
 8003db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003dc2:	4642      	mov	r2, r8
 8003dc4:	464b      	mov	r3, r9
 8003dc6:	1891      	adds	r1, r2, r2
 8003dc8:	6239      	str	r1, [r7, #32]
 8003dca:	415b      	adcs	r3, r3
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	1854      	adds	r4, r2, r1
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	eb43 0501 	adc.w	r5, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	00eb      	lsls	r3, r5, #3
 8003de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dea:	00e2      	lsls	r2, r4, #3
 8003dec:	4614      	mov	r4, r2
 8003dee:	461d      	mov	r5, r3
 8003df0:	4643      	mov	r3, r8
 8003df2:	18e3      	adds	r3, r4, r3
 8003df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df8:	464b      	mov	r3, r9
 8003dfa:	eb45 0303 	adc.w	r3, r5, r3
 8003dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e1e:	4629      	mov	r1, r5
 8003e20:	008b      	lsls	r3, r1, #2
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e28:	4621      	mov	r1, r4
 8003e2a:	008a      	lsls	r2, r1, #2
 8003e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e30:	f7fc fa2e 	bl	8000290 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <UART_SetConfig+0x4e4>)
 8003e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	011c      	lsls	r4, r3, #4
 8003e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e54:	4642      	mov	r2, r8
 8003e56:	464b      	mov	r3, r9
 8003e58:	1891      	adds	r1, r2, r2
 8003e5a:	61b9      	str	r1, [r7, #24]
 8003e5c:	415b      	adcs	r3, r3
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e64:	4641      	mov	r1, r8
 8003e66:	1851      	adds	r1, r2, r1
 8003e68:	6139      	str	r1, [r7, #16]
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	414b      	adcs	r3, r1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e7c:	4659      	mov	r1, fp
 8003e7e:	00cb      	lsls	r3, r1, #3
 8003e80:	4651      	mov	r1, sl
 8003e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e86:	4651      	mov	r1, sl
 8003e88:	00ca      	lsls	r2, r1, #3
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4642      	mov	r2, r8
 8003e92:	189b      	adds	r3, r3, r2
 8003e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e98:	464b      	mov	r3, r9
 8003e9a:	460a      	mov	r2, r1
 8003e9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ebc:	4649      	mov	r1, r9
 8003ebe:	008b      	lsls	r3, r1, #2
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	008a      	lsls	r2, r1, #2
 8003eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ece:	f7fc f9df 	bl	8000290 <__aeabi_uldivmod>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <UART_SetConfig+0x4e4>)
 8003ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	2164      	movs	r1, #100	; 0x64
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	011b      	lsls	r3, r3, #4
 8003ee8:	3332      	adds	r3, #50	; 0x32
 8003eea:	4a34      	ldr	r2, [pc, #208]	; (8003fbc <UART_SetConfig+0x4e4>)
 8003eec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef6:	441c      	add	r4, r3
 8003ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efc:	2200      	movs	r2, #0
 8003efe:	673b      	str	r3, [r7, #112]	; 0x70
 8003f00:	677a      	str	r2, [r7, #116]	; 0x74
 8003f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f06:	4642      	mov	r2, r8
 8003f08:	464b      	mov	r3, r9
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f16:	4641      	mov	r1, r8
 8003f18:	1851      	adds	r1, r2, r1
 8003f1a:	6039      	str	r1, [r7, #0]
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	414b      	adcs	r3, r1
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f2e:	4659      	mov	r1, fp
 8003f30:	00cb      	lsls	r3, r1, #3
 8003f32:	4651      	mov	r1, sl
 8003f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f38:	4651      	mov	r1, sl
 8003f3a:	00ca      	lsls	r2, r1, #3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4603      	mov	r3, r0
 8003f42:	4642      	mov	r2, r8
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f48:	464b      	mov	r3, r9
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	eb42 0303 	adc.w	r3, r2, r3
 8003f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	008b      	lsls	r3, r1, #2
 8003f6e:	4641      	mov	r1, r8
 8003f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f74:	4641      	mov	r1, r8
 8003f76:	008a      	lsls	r2, r1, #2
 8003f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f7c:	f7fc f988 	bl	8000290 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <UART_SetConfig+0x4e4>)
 8003f86:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2164      	movs	r1, #100	; 0x64
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	3332      	adds	r3, #50	; 0x32
 8003f98:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <UART_SetConfig+0x4e4>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4422      	add	r2, r4
 8003fac:	609a      	str	r2, [r3, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fba:	bf00      	nop
 8003fbc:	51eb851f 	.word	0x51eb851f

08003fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fc0:	b084      	sub	sp, #16
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	f107 001c 	add.w	r0, r7, #28
 8003fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d122      	bne.n	800401e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d105      	bne.n	8004012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 fbee 	bl	80057f4 <USB_CoreReset>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
 800401c:	e01a      	b.n	8004054 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 fbe2 	bl	80057f4 <USB_CoreReset>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d106      	bne.n	8004048 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
 8004046:	e005      	b.n	8004054 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	2b01      	cmp	r3, #1
 8004058:	d10b      	bne.n	8004072 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f043 0206 	orr.w	r2, r3, #6
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800407e:	b004      	add	sp, #16
 8004080:	4770      	bx	lr
	...

08004084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	2b02      	cmp	r3, #2
 8004096:	d165      	bne.n	8004164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4a41      	ldr	r2, [pc, #260]	; (80041a0 <USB_SetTurnaroundTime+0x11c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d906      	bls.n	80040ae <USB_SetTurnaroundTime+0x2a>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4a40      	ldr	r2, [pc, #256]	; (80041a4 <USB_SetTurnaroundTime+0x120>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d202      	bcs.n	80040ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80040a8:	230f      	movs	r3, #15
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e062      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a3c      	ldr	r2, [pc, #240]	; (80041a4 <USB_SetTurnaroundTime+0x120>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d306      	bcc.n	80040c4 <USB_SetTurnaroundTime+0x40>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <USB_SetTurnaroundTime+0x124>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d202      	bcs.n	80040c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80040be:	230e      	movs	r3, #14
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e057      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <USB_SetTurnaroundTime+0x124>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d306      	bcc.n	80040da <USB_SetTurnaroundTime+0x56>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	4a37      	ldr	r2, [pc, #220]	; (80041ac <USB_SetTurnaroundTime+0x128>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d202      	bcs.n	80040da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80040d4:	230d      	movs	r3, #13
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	e04c      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4a33      	ldr	r2, [pc, #204]	; (80041ac <USB_SetTurnaroundTime+0x128>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d306      	bcc.n	80040f0 <USB_SetTurnaroundTime+0x6c>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	4a32      	ldr	r2, [pc, #200]	; (80041b0 <USB_SetTurnaroundTime+0x12c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d802      	bhi.n	80040f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80040ea:	230c      	movs	r3, #12
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e041      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4a2f      	ldr	r2, [pc, #188]	; (80041b0 <USB_SetTurnaroundTime+0x12c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d906      	bls.n	8004106 <USB_SetTurnaroundTime+0x82>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4a2e      	ldr	r2, [pc, #184]	; (80041b4 <USB_SetTurnaroundTime+0x130>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d802      	bhi.n	8004106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004100:	230b      	movs	r3, #11
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	e036      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <USB_SetTurnaroundTime+0x130>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d906      	bls.n	800411c <USB_SetTurnaroundTime+0x98>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <USB_SetTurnaroundTime+0x134>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d802      	bhi.n	800411c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004116:	230a      	movs	r3, #10
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e02b      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4a26      	ldr	r2, [pc, #152]	; (80041b8 <USB_SetTurnaroundTime+0x134>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d906      	bls.n	8004132 <USB_SetTurnaroundTime+0xae>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4a25      	ldr	r2, [pc, #148]	; (80041bc <USB_SetTurnaroundTime+0x138>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d202      	bcs.n	8004132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800412c:	2309      	movs	r3, #9
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e020      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	4a21      	ldr	r2, [pc, #132]	; (80041bc <USB_SetTurnaroundTime+0x138>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d306      	bcc.n	8004148 <USB_SetTurnaroundTime+0xc4>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <USB_SetTurnaroundTime+0x13c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d802      	bhi.n	8004148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004142:	2308      	movs	r3, #8
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	e015      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <USB_SetTurnaroundTime+0x13c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d906      	bls.n	800415e <USB_SetTurnaroundTime+0xda>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <USB_SetTurnaroundTime+0x140>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d202      	bcs.n	800415e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004158:	2307      	movs	r3, #7
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	e00a      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800415e:	2306      	movs	r3, #6
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	e007      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d102      	bne.n	8004170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800416a:	2309      	movs	r3, #9
 800416c:	617b      	str	r3, [r7, #20]
 800416e:	e001      	b.n	8004174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004170:	2309      	movs	r3, #9
 8004172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	68da      	ldr	r2, [r3, #12]
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	00d8acbf 	.word	0x00d8acbf
 80041a4:	00e4e1c0 	.word	0x00e4e1c0
 80041a8:	00f42400 	.word	0x00f42400
 80041ac:	01067380 	.word	0x01067380
 80041b0:	011a499f 	.word	0x011a499f
 80041b4:	01312cff 	.word	0x01312cff
 80041b8:	014ca43f 	.word	0x014ca43f
 80041bc:	016e3600 	.word	0x016e3600
 80041c0:	01a6ab1f 	.word	0x01a6ab1f
 80041c4:	01e84800 	.word	0x01e84800

080041c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f043 0201 	orr.w	r2, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	460b      	mov	r3, r1
 8004216:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d115      	bne.n	800425a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800423a:	2001      	movs	r0, #1
 800423c:	f7fc fecc 	bl	8000fd8 <HAL_Delay>
      ms++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3301      	adds	r3, #1
 8004244:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f001 fa45 	bl	80056d6 <USB_GetMode>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d01e      	beq.n	8004290 <USB_SetCurrentMode+0x84>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b31      	cmp	r3, #49	; 0x31
 8004256:	d9f0      	bls.n	800423a <USB_SetCurrentMode+0x2e>
 8004258:	e01a      	b.n	8004290 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d115      	bne.n	800428c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800426c:	2001      	movs	r0, #1
 800426e:	f7fc feb3 	bl	8000fd8 <HAL_Delay>
      ms++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 fa2c 	bl	80056d6 <USB_GetMode>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <USB_SetCurrentMode+0x84>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b31      	cmp	r3, #49	; 0x31
 8004288:	d9f0      	bls.n	800426c <USB_SetCurrentMode+0x60>
 800428a:	e001      	b.n	8004290 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e005      	b.n	800429c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b32      	cmp	r3, #50	; 0x32
 8004294:	d101      	bne.n	800429a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a4:	b084      	sub	sp, #16
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80042b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80042be:	2300      	movs	r3, #0
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e009      	b.n	80042d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3340      	adds	r3, #64	; 0x40
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	3301      	adds	r3, #1
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b0e      	cmp	r3, #14
 80042dc:	d9f2      	bls.n	80042c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d11c      	bne.n	800431e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004314:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	639a      	str	r2, [r3, #56]	; 0x38
 800431c:	e00b      	b.n	8004336 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004348:	4619      	mov	r1, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	461a      	mov	r2, r3
 8004352:	680b      	ldr	r3, [r1, #0]
 8004354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10c      	bne.n	8004376 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d104      	bne.n	800436c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004362:	2100      	movs	r1, #0
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f965 	bl	8004634 <USB_SetDevSpeed>
 800436a:	e008      	b.n	800437e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800436c:	2101      	movs	r1, #1
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f960 	bl	8004634 <USB_SetDevSpeed>
 8004374:	e003      	b.n	800437e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004376:	2103      	movs	r1, #3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f95b 	bl	8004634 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800437e:	2110      	movs	r1, #16
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f8f3 	bl	800456c <USB_FlushTxFifo>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f91f 	bl	80045d4 <USB_FlushRxFifo>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	461a      	mov	r2, r3
 80043c0:	2300      	movs	r3, #0
 80043c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	e043      	b.n	8004452 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e0:	d118      	bne.n	8004414 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f4:	461a      	mov	r2, r3
 80043f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	e013      	b.n	8004426 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e008      	b.n	8004426 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	461a      	mov	r2, r3
 8004446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800444a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	3301      	adds	r3, #1
 8004450:	613b      	str	r3, [r7, #16]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d3b7      	bcc.n	80043ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e043      	b.n	80044e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004476:	d118      	bne.n	80044aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	e013      	b.n	80044bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	461a      	mov	r2, r3
 80044a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e008      	b.n	80044bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b6:	461a      	mov	r2, r3
 80044b8:	2300      	movs	r3, #0
 80044ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	2300      	movs	r3, #0
 80044cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3301      	adds	r3, #1
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d3b7      	bcc.n	8004460 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004502:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004510:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f043 0210 	orr.w	r2, r3, #16
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699a      	ldr	r2, [r3, #24]
 8004528:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <USB_DevInit+0x2c4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d005      	beq.n	8004542 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f043 0208 	orr.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004544:	2b01      	cmp	r3, #1
 8004546:	d107      	bne.n	8004558 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004564:	b004      	add	sp, #16
 8004566:	4770      	bx	lr
 8004568:	803c3800 	.word	0x803c3800

0800456c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <USB_FlushTxFifo+0x64>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e01b      	b.n	80045c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	daf2      	bge.n	800457a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	019b      	lsls	r3, r3, #6
 800459c:	f043 0220 	orr.w	r2, r3, #32
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a08      	ldr	r2, [pc, #32]	; (80045d0 <USB_FlushTxFifo+0x64>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e006      	b.n	80045c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d0f0      	beq.n	80045a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	00030d40 	.word	0x00030d40

080045d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	3301      	adds	r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a11      	ldr	r2, [pc, #68]	; (8004630 <USB_FlushRxFifo+0x5c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e018      	b.n	8004624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	daf2      	bge.n	80045e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2210      	movs	r2, #16
 8004602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	3301      	adds	r3, #1
 8004608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4a08      	ldr	r2, [pc, #32]	; (8004630 <USB_FlushRxFifo+0x5c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e006      	b.n	8004624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b10      	cmp	r3, #16
 8004620:	d0f0      	beq.n	8004604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	00030d40 	.word	0x00030d40

08004634 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	78fb      	ldrb	r3, [r7, #3]
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004654:	4313      	orrs	r3, r2
 8004656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004666:	b480      	push	{r7}
 8004668:	b087      	sub	sp, #28
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0306 	and.w	r3, r3, #6
 800467e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d102      	bne.n	800468c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004686:	2300      	movs	r3, #0
 8004688:	75fb      	strb	r3, [r7, #23]
 800468a:	e00a      	b.n	80046a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d002      	beq.n	8004698 <USB_GetDevSpeed+0x32>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b06      	cmp	r3, #6
 8004696:	d102      	bne.n	800469e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004698:	2302      	movs	r3, #2
 800469a:	75fb      	strb	r3, [r7, #23]
 800469c:	e001      	b.n	80046a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800469e:	230f      	movs	r3, #15
 80046a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80046a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	371c      	adds	r7, #28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	785b      	ldrb	r3, [r3, #1]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d13a      	bne.n	8004742 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f003 030f 	and.w	r3, r3, #15
 80046dc:	2101      	movs	r1, #1
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	68f9      	ldr	r1, [r7, #12]
 80046e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d155      	bne.n	80047b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	791b      	ldrb	r3, [r3, #4]
 800471e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004720:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	059b      	lsls	r3, r3, #22
 8004726:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004728:	4313      	orrs	r3, r2
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e036      	b.n	80047b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	69da      	ldr	r2, [r3, #28]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	2101      	movs	r1, #1
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004760:	4313      	orrs	r3, r2
 8004762:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11a      	bne.n	80047b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004796:	430b      	orrs	r3, r1
 8004798:	4313      	orrs	r3, r2
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
	...

080047c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d161      	bne.n	80048a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f2:	d11f      	bne.n	8004834 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800480e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004812:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	0151      	lsls	r1, r2, #5
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	440a      	add	r2, r1
 800482a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800482e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004832:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	b29b      	uxth	r3, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004854:	4013      	ands	r3, r2
 8004856:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	2101      	movs	r1, #1
 800486a:	fa01 f303 	lsl.w	r3, r1, r3
 800486e:	b29b      	uxth	r3, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004878:	4013      	ands	r3, r2
 800487a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	0159      	lsls	r1, r3, #5
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	440b      	add	r3, r1
 8004892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004896:	4619      	mov	r1, r3
 8004898:	4b35      	ldr	r3, [pc, #212]	; (8004970 <USB_DeactivateEndpoint+0x1b0>)
 800489a:	4013      	ands	r3, r2
 800489c:	600b      	str	r3, [r1, #0]
 800489e:	e060      	b.n	8004962 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b6:	d11f      	bne.n	80048f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	0151      	lsls	r1, r2, #5
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	440a      	add	r2, r1
 80048ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	0151      	lsls	r1, r2, #5
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	440a      	add	r2, r1
 80048ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	43db      	mvns	r3, r3
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004918:	4013      	ands	r3, r2
 800491a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f003 030f 	and.w	r3, r3, #15
 800492c:	2101      	movs	r1, #1
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	041b      	lsls	r3, r3, #16
 8004934:	43db      	mvns	r3, r3
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800493c:	4013      	ands	r3, r2
 800493e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	0159      	lsls	r1, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	440b      	add	r3, r1
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	4619      	mov	r1, r3
 800495c:	4b05      	ldr	r3, [pc, #20]	; (8004974 <USB_DeactivateEndpoint+0x1b4>)
 800495e:	4013      	ands	r3, r2
 8004960:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	ec337800 	.word	0xec337800
 8004974:	eff37800 	.word	0xeff37800

08004978 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	4613      	mov	r3, r2
 8004984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	2b01      	cmp	r3, #1
 8004996:	f040 815c 	bne.w	8004c52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d132      	bne.n	8004a08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	015a      	lsls	r2, r3, #5
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	4413      	add	r3, r2
 80049ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	0151      	lsls	r1, r2, #5
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	440a      	add	r2, r1
 80049dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	0151      	lsls	r1, r2, #5
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	440a      	add	r2, r1
 80049fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a00:	0cdb      	lsrs	r3, r3, #19
 8004a02:	04db      	lsls	r3, r3, #19
 8004a04:	6113      	str	r3, [r2, #16]
 8004a06:	e074      	b.n	8004af2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	0151      	lsls	r1, r2, #5
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	440a      	add	r2, r1
 8004a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a22:	0cdb      	lsrs	r3, r3, #19
 8004a24:	04db      	lsls	r3, r3, #19
 8004a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	69fa      	ldr	r2, [r7, #28]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6999      	ldr	r1, [r3, #24]
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	440b      	add	r3, r1
 8004a64:	1e59      	subs	r1, r3, #1
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004a70:	4b9d      	ldr	r3, [pc, #628]	; (8004ce8 <USB_EPStartXfer+0x370>)
 8004a72:	400b      	ands	r3, r1
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	0148      	lsls	r0, r1, #5
 8004a78:	69f9      	ldr	r1, [r7, #28]
 8004a7a:	4401      	add	r1, r0
 8004a7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a80:	4313      	orrs	r3, r2
 8004a82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9a:	69b9      	ldr	r1, [r7, #24]
 8004a9c:	0148      	lsls	r0, r1, #5
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	4401      	add	r1, r0
 8004aa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	791b      	ldrb	r3, [r3, #4]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d11f      	bne.n	8004af2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004acc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ad0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004af0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d14b      	bne.n	8004b90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	791b      	ldrb	r3, [r3, #4]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d128      	bne.n	8004b6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d110      	bne.n	8004b4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e00f      	b.n	8004b6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	0151      	lsls	r1, r2, #5
 8004b60:	69fa      	ldr	r2, [r7, #28]
 8004b62:	440a      	add	r2, r1
 8004b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e133      	b.n	8004df8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004baa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d015      	beq.n	8004be4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 811b 	beq.w	8004df8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd8:	69f9      	ldr	r1, [r7, #28]
 8004bda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bde:	4313      	orrs	r3, r2
 8004be0:	634b      	str	r3, [r1, #52]	; 0x34
 8004be2:	e109      	b.n	8004df8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d110      	bne.n	8004c16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	e00f      	b.n	8004c36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6919      	ldr	r1, [r3, #16]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	b298      	uxth	r0, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4603      	mov	r3, r0
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fade 	bl	800520c <USB_WritePacket>
 8004c50:	e0d2      	b.n	8004df8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	0151      	lsls	r1, r2, #5
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	440a      	add	r2, r1
 8004c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6c:	0cdb      	lsrs	r3, r3, #19
 8004c6e:	04db      	lsls	r3, r3, #19
 8004c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d126      	bne.n	8004cec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb4:	69b9      	ldr	r1, [r7, #24]
 8004cb6:	0148      	lsls	r0, r1, #5
 8004cb8:	69f9      	ldr	r1, [r7, #28]
 8004cba:	4401      	add	r1, r0
 8004cbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce2:	6113      	str	r3, [r2, #16]
 8004ce4:	e03a      	b.n	8004d5c <USB_EPStartXfer+0x3e4>
 8004ce6:	bf00      	nop
 8004ce8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	8afa      	ldrh	r2, [r7, #22]
 8004d08:	fb03 f202 	mul.w	r2, r3, r2
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	04d9      	lsls	r1, r3, #19
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <USB_EPStartXfer+0x48c>)
 8004d24:	400b      	ands	r3, r1
 8004d26:	69b9      	ldr	r1, [r7, #24]
 8004d28:	0148      	lsls	r0, r1, #5
 8004d2a:	69f9      	ldr	r1, [r7, #28]
 8004d2c:	4401      	add	r1, r0
 8004d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d32:	4313      	orrs	r3, r2
 8004d34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	69b9      	ldr	r1, [r7, #24]
 8004d4e:	0148      	lsls	r0, r1, #5
 8004d50:	69f9      	ldr	r1, [r7, #28]
 8004d52:	4401      	add	r1, r0
 8004d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d5c:	79fb      	ldrb	r3, [r7, #7]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d10d      	bne.n	8004d7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6919      	ldr	r1, [r3, #16]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	460a      	mov	r2, r1
 8004d7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	791b      	ldrb	r3, [r3, #4]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d128      	bne.n	8004dd8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d110      	bne.n	8004db8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	015a      	lsls	r2, r3, #5
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	0151      	lsls	r1, r2, #5
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	440a      	add	r2, r1
 8004dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e00f      	b.n	8004dd8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	0151      	lsls	r1, r2, #5
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	440a      	add	r2, r1
 8004dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	1ff80000 	.word	0x1ff80000

08004e08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	f040 80ce 	bne.w	8004fc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d132      	bne.n	8004e98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	0151      	lsls	r1, r2, #5
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	440a      	add	r2, r1
 8004e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	697a      	ldr	r2, [r7, #20]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e90:	0cdb      	lsrs	r3, r3, #19
 8004e92:	04db      	lsls	r3, r3, #19
 8004e94:	6113      	str	r3, [r2, #16]
 8004e96:	e04e      	b.n	8004f36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb2:	0cdb      	lsrs	r3, r3, #19
 8004eb4:	04db      	lsls	r3, r3, #19
 8004eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	0151      	lsls	r1, r2, #5
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	440a      	add	r2, r1
 8004ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ed6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d903      	bls.n	8004ef0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f26:	6939      	ldr	r1, [r7, #16]
 8004f28:	0148      	lsls	r0, r1, #5
 8004f2a:	6979      	ldr	r1, [r7, #20]
 8004f2c:	4401      	add	r1, r0
 8004f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f32:	4313      	orrs	r3, r2
 8004f34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11e      	bne.n	8004f7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	461a      	mov	r2, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	e097      	b.n	80050aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8083 	beq.w	80050aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	6979      	ldr	r1, [r7, #20]
 8004fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	634b      	str	r3, [r1, #52]	; 0x34
 8004fc4:	e071      	b.n	80050aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe0:	0cdb      	lsrs	r3, r3, #19
 8004fe2:	04db      	lsls	r3, r3, #19
 8004fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	0151      	lsls	r1, r2, #5
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	440a      	add	r2, r1
 8005038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	015a      	lsls	r2, r3, #5
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4413      	add	r3, r2
 800504a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005058:	6939      	ldr	r1, [r7, #16]
 800505a:	0148      	lsls	r0, r1, #5
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	4401      	add	r1, r0
 8005060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005064:	4313      	orrs	r3, r2
 8005066:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005068:	79fb      	ldrb	r3, [r7, #7]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d10d      	bne.n	800508a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6919      	ldr	r1, [r3, #16]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	460a      	mov	r2, r1
 8005088:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	785b      	ldrb	r3, [r3, #1]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d14a      	bne.n	800516c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ee:	f040 8086 	bne.w	80051fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	7812      	ldrb	r2, [r2, #0]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005114:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	7812      	ldrb	r2, [r2, #0]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005138:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	3301      	adds	r3, #1
 800513e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f242 7210 	movw	r2, #10000	; 0x2710
 8005146:	4293      	cmp	r3, r2
 8005148:	d902      	bls.n	8005150 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
          break;
 800514e:	e056      	b.n	80051fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005168:	d0e7      	beq.n	800513a <USB_EPStopXfer+0x82>
 800516a:	e048      	b.n	80051fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005184:	d13b      	bne.n	80051fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	0151      	lsls	r1, r2, #5
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	440a      	add	r2, r1
 80051c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3301      	adds	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80051da:	4293      	cmp	r3, r2
 80051dc:	d902      	bls.n	80051e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	75fb      	strb	r3, [r7, #23]
          break;
 80051e2:	e00c      	b.n	80051fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051fc:	d0e7      	beq.n	80051ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	4611      	mov	r1, r2
 8005218:	461a      	mov	r2, r3
 800521a:	460b      	mov	r3, r1
 800521c:	71fb      	strb	r3, [r7, #7]
 800521e:	4613      	mov	r3, r2
 8005220:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800522a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800522e:	2b00      	cmp	r3, #0
 8005230:	d123      	bne.n	800527a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005232:	88bb      	ldrh	r3, [r7, #4]
 8005234:	3303      	adds	r3, #3
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e018      	b.n	8005272 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	031a      	lsls	r2, r3, #12
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	4413      	add	r3, r2
 8005248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800524c:	461a      	mov	r2, r3
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	3301      	adds	r3, #1
 8005258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3301      	adds	r3, #1
 800525e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	3301      	adds	r3, #1
 8005264:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	3301      	adds	r3, #1
 800526a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	3301      	adds	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	69ba      	ldr	r2, [r7, #24]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	429a      	cmp	r2, r3
 8005278:	d3e2      	bcc.n	8005240 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3724      	adds	r7, #36	; 0x24
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005288:	b480      	push	{r7}
 800528a:	b08b      	sub	sp, #44	; 0x2c
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	4613      	mov	r3, r2
 8005294:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	e014      	b.n	80052de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	601a      	str	r2, [r3, #0]
    pDest++;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	3301      	adds	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	3301      	adds	r3, #1
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	3301      	adds	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	3301      	adds	r3, #1
 80052d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	3301      	adds	r3, #1
 80052dc:	623b      	str	r3, [r7, #32]
 80052de:	6a3a      	ldr	r2, [r7, #32]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d3e6      	bcc.n	80052b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052e6:	8bfb      	ldrh	r3, [r7, #30]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01e      	beq.n	800532a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	461a      	mov	r2, r3
 80052f8:	f107 0310 	add.w	r3, r7, #16
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	00db      	lsls	r3, r3, #3
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	b2da      	uxtb	r2, r3
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	701a      	strb	r2, [r3, #0]
      i++;
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	3301      	adds	r3, #1
 8005316:	623b      	str	r3, [r7, #32]
      pDest++;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	3301      	adds	r3, #1
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800531e:	8bfb      	ldrh	r3, [r7, #30]
 8005320:	3b01      	subs	r3, #1
 8005322:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005324:	8bfb      	ldrh	r3, [r7, #30]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1ea      	bne.n	8005300 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800532c:	4618      	mov	r0, r3
 800532e:	372c      	adds	r7, #44	; 0x2c
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005338:	b480      	push	{r7}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	785b      	ldrb	r3, [r3, #1]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d12c      	bne.n	80053ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	db12      	blt.n	800538c <USB_EPSetStall+0x54>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00f      	beq.n	800538c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800538a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	0151      	lsls	r1, r2, #5
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	440a      	add	r2, r1
 80053a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	e02b      	b.n	8005406 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	db12      	blt.n	80053e6 <USB_EPSetStall+0xae>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00f      	beq.n	80053e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	0151      	lsls	r1, r2, #5
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	440a      	add	r2, r1
 80053dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005404:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	785b      	ldrb	r3, [r3, #1]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d128      	bne.n	8005482 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	0151      	lsls	r1, r2, #5
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	440a      	add	r2, r1
 8005446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800544e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	791b      	ldrb	r3, [r3, #4]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d003      	beq.n	8005460 <USB_EPClearStall+0x4c>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	791b      	ldrb	r3, [r3, #4]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d138      	bne.n	80054d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e027      	b.n	80054d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	0151      	lsls	r1, r2, #5
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	440a      	add	r2, r1
 8005498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80054a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d003      	beq.n	80054b2 <USB_EPClearStall+0x9e>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	791b      	ldrb	r3, [r3, #4]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d10f      	bne.n	80054d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005502:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005514:	68f9      	ldr	r1, [r7, #12]
 8005516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005546:	f023 0303 	bic.w	r3, r3, #3
 800554a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800555a:	f023 0302 	bic.w	r3, r3, #2
 800555e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005588:	f023 0303 	bic.w	r3, r3, #3
 800558c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	4013      	ands	r3, r2
 80055c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055c8:	68fb      	ldr	r3, [r7, #12]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4013      	ands	r3, r2
 80055f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0c1b      	lsrs	r3, r3, #16
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800560a:	b480      	push	{r7}
 800560c:	b085      	sub	sp, #20
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	b29b      	uxth	r3, r3
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800563e:	b480      	push	{r7}
 8005640:	b085      	sub	sp, #20
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800566c:	68bb      	ldr	r3, [r7, #8]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800567a:	b480      	push	{r7}
 800567c:	b087      	sub	sp, #28
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
 8005682:	460b      	mov	r3, r1
 8005684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	01db      	lsls	r3, r3, #7
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4013      	ands	r3, r2
 80056c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056c8:	68bb      	ldr	r3, [r7, #8]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	f003 0301 	and.w	r3, r3, #1
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b085      	sub	sp, #20
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800570c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005710:	f023 0307 	bic.w	r3, r3, #7
 8005714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	460b      	mov	r3, r1
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	333c      	adds	r3, #60	; 0x3c
 800574e:	3304      	adds	r3, #4
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4a26      	ldr	r2, [pc, #152]	; (80057f0 <USB_EP0_OutStart+0xb8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d90a      	bls.n	8005772 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800576c:	d101      	bne.n	8005772 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e037      	b.n	80057e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800578c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a0:	f043 0318 	orr.w	r3, r3, #24
 80057a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80057b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057ba:	7afb      	ldrb	r3, [r7, #11]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10f      	bne.n	80057e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c6:	461a      	mov	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	4f54300a 	.word	0x4f54300a

080057f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <USB_CoreReset+0x64>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d901      	bls.n	8005812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e01b      	b.n	800584a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f043 0201 	orr.w	r2, r3, #1
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <USB_CoreReset+0x64>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d901      	bls.n	800583c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e006      	b.n	800584a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d0f0      	beq.n	800582a <USB_CoreReset+0x36>

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	00030d40 	.word	0x00030d40

0800585c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005868:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800586c:	f002 fc8a 	bl	8008184 <USBD_static_malloc>
 8005870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	32b0      	adds	r2, #176	; 0xb0
 8005882:	2100      	movs	r1, #0
 8005884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005888:	2302      	movs	r3, #2
 800588a:	e0d4      	b.n	8005a36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800588c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005890:	2100      	movs	r1, #0
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f002 fce4 	bl	8008260 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	32b0      	adds	r2, #176	; 0xb0
 80058a2:	68f9      	ldr	r1, [r7, #12]
 80058a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	32b0      	adds	r2, #176	; 0xb0
 80058b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7c1b      	ldrb	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d138      	bne.n	8005936 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80058c4:	4b5e      	ldr	r3, [pc, #376]	; (8005a40 <USBD_CDC_Init+0x1e4>)
 80058c6:	7819      	ldrb	r1, [r3, #0]
 80058c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058cc:	2202      	movs	r2, #2
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f002 fb35 	bl	8007f3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80058d4:	4b5a      	ldr	r3, [pc, #360]	; (8005a40 <USBD_CDC_Init+0x1e4>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	3324      	adds	r3, #36	; 0x24
 80058ea:	2201      	movs	r2, #1
 80058ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80058ee:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 80058f0:	7819      	ldrb	r1, [r3, #0]
 80058f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058f6:	2202      	movs	r2, #2
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f002 fb20 	bl	8007f3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80058fe:	4b51      	ldr	r3, [pc, #324]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 020f 	and.w	r2, r3, #15
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005916:	2201      	movs	r2, #1
 8005918:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800591a:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <USBD_CDC_Init+0x1ec>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	3326      	adds	r3, #38	; 0x26
 8005930:	2210      	movs	r2, #16
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e035      	b.n	80059a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005936:	4b42      	ldr	r3, [pc, #264]	; (8005a40 <USBD_CDC_Init+0x1e4>)
 8005938:	7819      	ldrb	r1, [r3, #0]
 800593a:	2340      	movs	r3, #64	; 0x40
 800593c:	2202      	movs	r2, #2
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f002 fafd 	bl	8007f3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005944:	4b3e      	ldr	r3, [pc, #248]	; (8005a40 <USBD_CDC_Init+0x1e4>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	f003 020f 	and.w	r2, r3, #15
 800594c:	6879      	ldr	r1, [r7, #4]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	440b      	add	r3, r1
 8005958:	3324      	adds	r3, #36	; 0x24
 800595a:	2201      	movs	r2, #1
 800595c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800595e:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 8005960:	7819      	ldrb	r1, [r3, #0]
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	2202      	movs	r2, #2
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f002 fae9 	bl	8007f3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800596c:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005984:	2201      	movs	r2, #1
 8005986:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005988:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <USBD_CDC_Init+0x1ec>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	4613      	mov	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	440b      	add	r3, r1
 800599c:	3326      	adds	r3, #38	; 0x26
 800599e:	2210      	movs	r2, #16
 80059a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059a2:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <USBD_CDC_Init+0x1ec>)
 80059a4:	7819      	ldrb	r1, [r3, #0]
 80059a6:	2308      	movs	r3, #8
 80059a8:	2203      	movs	r2, #3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f002 fac7 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <USBD_CDC_Init+0x1ec>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	f003 020f 	and.w	r2, r3, #15
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	3324      	adds	r3, #36	; 0x24
 80059c6:	2201      	movs	r2, #1
 80059c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	33b0      	adds	r3, #176	; 0xb0
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005a00:	2302      	movs	r3, #2
 8005a02:	e018      	b.n	8005a36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7c1b      	ldrb	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 8005a0e:	7819      	ldrb	r1, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 fb7e 	bl	800811c <USBD_LL_PrepareReceive>
 8005a20:	e008      	b.n	8005a34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <USBD_CDC_Init+0x1e8>)
 8005a24:	7819      	ldrb	r1, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a2c:	2340      	movs	r3, #64	; 0x40
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f002 fb74 	bl	800811c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000093 	.word	0x20000093
 8005a44:	20000094 	.word	0x20000094
 8005a48:	20000095 	.word	0x20000095

08005a4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005a58:	4b3a      	ldr	r3, [pc, #232]	; (8005b44 <USBD_CDC_DeInit+0xf8>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f002 fa93 	bl	8007f8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005a64:	4b37      	ldr	r3, [pc, #220]	; (8005b44 <USBD_CDC_DeInit+0xf8>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 020f 	and.w	r2, r3, #15
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	3324      	adds	r3, #36	; 0x24
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005a7e:	4b32      	ldr	r3, [pc, #200]	; (8005b48 <USBD_CDC_DeInit+0xfc>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 fa80 	bl	8007f8a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	; (8005b48 <USBD_CDC_DeInit+0xfc>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <USBD_CDC_DeInit+0x100>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f002 fa6c 	bl	8007f8a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <USBD_CDC_DeInit+0x100>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f003 020f 	and.w	r2, r3, #15
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	2200      	movs	r2, #0
 8005aca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005acc:	4b1f      	ldr	r3, [pc, #124]	; (8005b4c <USBD_CDC_DeInit+0x100>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 020f 	and.w	r2, r3, #15
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	440b      	add	r3, r1
 8005ae0:	3326      	adds	r3, #38	; 0x26
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	32b0      	adds	r2, #176	; 0xb0
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01f      	beq.n	8005b38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	33b0      	adds	r3, #176	; 0xb0
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	32b0      	adds	r2, #176	; 0xb0
 8005b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f002 fb40 	bl	80081a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	32b0      	adds	r2, #176	; 0xb0
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000093 	.word	0x20000093
 8005b48:	20000094 	.word	0x20000094
 8005b4c:	20000095 	.word	0x20000095

08005b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	32b0      	adds	r2, #176	; 0xb0
 8005b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e0bf      	b.n	8005d00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d050      	beq.n	8005c2e <USBD_CDC_Setup+0xde>
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	f040 80af 	bne.w	8005cf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	88db      	ldrh	r3, [r3, #6]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d03a      	beq.n	8005c10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b25b      	sxtb	r3, r3
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	da1b      	bge.n	8005bdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	33b0      	adds	r3, #176	; 0xb0
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005bba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	88d2      	ldrh	r2, [r2, #6]
 8005bc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	88db      	ldrh	r3, [r3, #6]
 8005bc6:	2b07      	cmp	r3, #7
 8005bc8:	bf28      	it	cs
 8005bca:	2307      	movcs	r3, #7
 8005bcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	89fa      	ldrh	r2, [r7, #14]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f001 fd89 	bl	80076ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005bda:	e090      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785a      	ldrb	r2, [r3, #1]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	88db      	ldrh	r3, [r3, #6]
 8005bea:	2b3f      	cmp	r3, #63	; 0x3f
 8005bec:	d803      	bhi.n	8005bf6 <USBD_CDC_Setup+0xa6>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	88db      	ldrh	r3, [r3, #6]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	e000      	b.n	8005bf8 <USBD_CDC_Setup+0xa8>
 8005bf6:	2240      	movs	r2, #64	; 0x40
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005c06:	461a      	mov	r2, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fd9b 	bl	8007744 <USBD_CtlPrepareRx>
      break;
 8005c0e:	e076      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	33b0      	adds	r3, #176	; 0xb0
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	7850      	ldrb	r0, [r2, #1]
 8005c26:	2200      	movs	r2, #0
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	4798      	blx	r3
      break;
 8005c2c:	e067      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b0b      	cmp	r3, #11
 8005c34:	d851      	bhi.n	8005cda <USBD_CDC_Setup+0x18a>
 8005c36:	a201      	add	r2, pc, #4	; (adr r2, 8005c3c <USBD_CDC_Setup+0xec>)
 8005c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3c:	08005c6d 	.word	0x08005c6d
 8005c40:	08005ce9 	.word	0x08005ce9
 8005c44:	08005cdb 	.word	0x08005cdb
 8005c48:	08005cdb 	.word	0x08005cdb
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005cdb 	.word	0x08005cdb
 8005c54:	08005cdb 	.word	0x08005cdb
 8005c58:	08005cdb 	.word	0x08005cdb
 8005c5c:	08005cdb 	.word	0x08005cdb
 8005c60:	08005cdb 	.word	0x08005cdb
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005cc1 	.word	0x08005cc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d107      	bne.n	8005c88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005c78:	f107 030a 	add.w	r3, r7, #10
 8005c7c:	2202      	movs	r2, #2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f001 fd33 	bl	80076ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c86:	e032      	b.n	8005cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005c88:	6839      	ldr	r1, [r7, #0]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f001 fcbd 	bl	800760a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c90:	2303      	movs	r3, #3
 8005c92:	75fb      	strb	r3, [r7, #23]
          break;
 8005c94:	e02b      	b.n	8005cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d107      	bne.n	8005cb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ca2:	f107 030d 	add.w	r3, r7, #13
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fd1e 	bl	80076ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005cb0:	e01d      	b.n	8005cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f001 fca8 	bl	800760a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8005cbe:	e016      	b.n	8005cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d00f      	beq.n	8005cec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f001 fc9b 	bl	800760a <USBD_CtlError>
            ret = USBD_FAIL;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005cd8:	e008      	b.n	8005cec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f001 fc94 	bl	800760a <USBD_CtlError>
          ret = USBD_FAIL;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ce6:	e002      	b.n	8005cee <USBD_CDC_Setup+0x19e>
          break;
 8005ce8:	bf00      	nop
 8005cea:	e008      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>
          break;
 8005cec:	bf00      	nop
      }
      break;
 8005cee:	e006      	b.n	8005cfe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f001 fc89 	bl	800760a <USBD_CtlError>
      ret = USBD_FAIL;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8005cfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3718      	adds	r7, #24
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	460b      	mov	r3, r1
 8005d12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32b0      	adds	r2, #176	; 0xb0
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e065      	b.n	8005dfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	32b0      	adds	r2, #176	; 0xb0
 8005d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d42:	78fb      	ldrb	r3, [r7, #3]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3318      	adds	r3, #24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02f      	beq.n	8005dbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	f003 020f 	and.w	r2, r3, #15
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	3318      	adds	r3, #24
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 010f 	and.w	r1, r3, #15
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	440b      	add	r3, r1
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4403      	add	r3, r0
 8005d84:	3348      	adds	r3, #72	; 0x48
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8005d8c:	fb01 f303 	mul.w	r3, r1, r3
 8005d90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d112      	bne.n	8005dbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	f003 020f 	and.w	r2, r3, #15
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	440b      	add	r3, r1
 8005da8:	3318      	adds	r3, #24
 8005daa:	2200      	movs	r2, #0
 8005dac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005dae:	78f9      	ldrb	r1, [r7, #3]
 8005db0:	2300      	movs	r3, #0
 8005db2:	2200      	movs	r2, #0
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f002 f990 	bl	80080da <USBD_LL_Transmit>
 8005dba:	e01f      	b.n	8005dfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	33b0      	adds	r3, #176	; 0xb0
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d010      	beq.n	8005dfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	33b0      	adds	r3, #176	; 0xb0
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	68ba      	ldr	r2, [r7, #8]
 8005dee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	460b      	mov	r3, r1
 8005e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	32b0      	adds	r2, #176	; 0xb0
 8005e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	32b0      	adds	r2, #176	; 0xb0
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e01a      	b.n	8005e6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005e38:	78fb      	ldrb	r3, [r7, #3]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f002 f98e 	bl	800815e <USBD_LL_GetRxDataSize>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	33b0      	adds	r3, #176	; 0xb0
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005e68:	4611      	mov	r1, r2
 8005e6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	32b0      	adds	r2, #176	; 0xb0
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e025      	b.n	8005ee4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	33b0      	adds	r3, #176	; 0xb0
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d01a      	beq.n	8005ee2 <USBD_CDC_EP0_RxReady+0x6c>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005eb2:	2bff      	cmp	r3, #255	; 0xff
 8005eb4:	d015      	beq.n	8005ee2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	33b0      	adds	r3, #176	; 0xb0
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005ece:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ed6:	b292      	uxth	r2, r2
 8005ed8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ef4:	2182      	movs	r1, #130	; 0x82
 8005ef6:	4818      	ldr	r0, [pc, #96]	; (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ef8:	f000 fd4f 	bl	800699a <USBD_GetEpDesc>
 8005efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005efe:	2101      	movs	r1, #1
 8005f00:	4815      	ldr	r0, [pc, #84]	; (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f02:	f000 fd4a 	bl	800699a <USBD_GetEpDesc>
 8005f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f08:	2181      	movs	r1, #129	; 0x81
 8005f0a:	4813      	ldr	r0, [pc, #76]	; (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005f0c:	f000 fd45 	bl	800699a <USBD_GetEpDesc>
 8005f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2210      	movs	r2, #16
 8005f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d006      	beq.n	8005f32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2c:	711a      	strb	r2, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f40:	711a      	strb	r2, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2243      	movs	r2, #67	; 0x43
 8005f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f4c:	4b02      	ldr	r3, [pc, #8]	; (8005f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000050 	.word	0x20000050

08005f5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f64:	2182      	movs	r1, #130	; 0x82
 8005f66:	4818      	ldr	r0, [pc, #96]	; (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f68:	f000 fd17 	bl	800699a <USBD_GetEpDesc>
 8005f6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f6e:	2101      	movs	r1, #1
 8005f70:	4815      	ldr	r0, [pc, #84]	; (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f72:	f000 fd12 	bl	800699a <USBD_GetEpDesc>
 8005f76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f78:	2181      	movs	r1, #129	; 0x81
 8005f7a:	4813      	ldr	r0, [pc, #76]	; (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005f7c:	f000 fd0d 	bl	800699a <USBD_GetEpDesc>
 8005f80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d006      	beq.n	8005fa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2200      	movs	r2, #0
 8005f98:	711a      	strb	r2, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f042 0202 	orr.w	r2, r2, #2
 8005fa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d006      	beq.n	8005fb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	711a      	strb	r2, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f042 0202 	orr.w	r2, r2, #2
 8005fb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2243      	movs	r2, #67	; 0x43
 8005fba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	20000050 	.word	0x20000050

08005fcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fd4:	2182      	movs	r1, #130	; 0x82
 8005fd6:	4818      	ldr	r0, [pc, #96]	; (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fd8:	f000 fcdf 	bl	800699a <USBD_GetEpDesc>
 8005fdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fde:	2101      	movs	r1, #1
 8005fe0:	4815      	ldr	r0, [pc, #84]	; (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fe2:	f000 fcda 	bl	800699a <USBD_GetEpDesc>
 8005fe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fe8:	2181      	movs	r1, #129	; 0x81
 8005fea:	4813      	ldr	r0, [pc, #76]	; (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005fec:	f000 fcd5 	bl	800699a <USBD_GetEpDesc>
 8005ff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2210      	movs	r2, #16
 8005ffc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d006      	beq.n	8006012 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2200      	movs	r2, #0
 8006008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800600c:	711a      	strb	r2, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006020:	711a      	strb	r2, [r3, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2243      	movs	r2, #67	; 0x43
 800602a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800602c:	4b02      	ldr	r3, [pc, #8]	; (8006038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000050 	.word	0x20000050

0800603c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	220a      	movs	r2, #10
 8006048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800604a:	4b03      	ldr	r3, [pc, #12]	; (8006058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800604c:	4618      	mov	r0, r3
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2000000c 	.word	0x2000000c

0800605c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e009      	b.n	8006084 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	33b0      	adds	r3, #176	; 0xb0
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4413      	add	r3, r2
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	32b0      	adds	r2, #176	; 0xb0
 80060a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e008      	b.n	80060c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	32b0      	adds	r2, #176	; 0xb0
 80060e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e004      	b.n	8006102 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
	...

08006110 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	32b0      	adds	r2, #176	; 0xb0
 8006122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006126:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	32b0      	adds	r2, #176	; 0xb0
 8006136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800613e:	2303      	movs	r3, #3
 8006140:	e025      	b.n	800618e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11f      	bne.n	800618c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	2201      	movs	r2, #1
 8006150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006154:	4b10      	ldr	r3, [pc, #64]	; (8006198 <USBD_CDC_TransmitPacket+0x88>)
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f003 020f 	and.w	r2, r3, #15
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4403      	add	r3, r0
 800616e:	3318      	adds	r3, #24
 8006170:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006172:	4b09      	ldr	r3, [pc, #36]	; (8006198 <USBD_CDC_TransmitPacket+0x88>)
 8006174:	7819      	ldrb	r1, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f001 ffa9 	bl	80080da <USBD_LL_Transmit>

    ret = USBD_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000093 	.word	0x20000093

0800619c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32b0      	adds	r2, #176	; 0xb0
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e018      	b.n	80061fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	7c1b      	ldrb	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061d2:	4b0c      	ldr	r3, [pc, #48]	; (8006204 <USBD_CDC_ReceivePacket+0x68>)
 80061d4:	7819      	ldrb	r1, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 ff9b 	bl	800811c <USBD_LL_PrepareReceive>
 80061e6:	e008      	b.n	80061fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <USBD_CDC_ReceivePacket+0x68>)
 80061ea:	7819      	ldrb	r1, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f2:	2340      	movs	r3, #64	; 0x40
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 ff91 	bl	800811c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000094 	.word	0x20000094

08006208 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	4613      	mov	r3, r2
 8006214:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800621c:	2303      	movs	r3, #3
 800621e:	e01f      	b.n	8006260 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	79fa      	ldrb	r2, [r7, #7]
 8006252:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fe0b 	bl	8007e70 <USBD_LL_Init>
 800625a:	4603      	mov	r3, r0
 800625c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800625e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	e025      	b.n	80062cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	32ae      	adds	r2, #174	; 0xae
 8006292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00f      	beq.n	80062bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	32ae      	adds	r2, #174	; 0xae
 80062a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f107 020e 	add.w	r2, r7, #14
 80062b0:	4610      	mov	r0, r2
 80062b2:	4798      	blx	r3
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fe13 	bl	8007f08 <USBD_LL_Start>
 80062e2:	4603      	mov	r3, r0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006318:	2b00      	cmp	r3, #0
 800631a:	d009      	beq.n	8006330 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	78fa      	ldrb	r2, [r7, #3]
 8006326:	4611      	mov	r1, r2
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	4798      	blx	r3
 800632c:	4603      	mov	r3, r0
 800632e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	78fa      	ldrb	r2, [r7, #3]
 8006354:	4611      	mov	r1, r2
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	4798      	blx	r3
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f001 f908 	bl	8007596 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006394:	461a      	mov	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d01a      	beq.n	80063e0 <USBD_LL_SetupStage+0x72>
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d822      	bhi.n	80063f4 <USBD_LL_SetupStage+0x86>
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <USBD_LL_SetupStage+0x4a>
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d00a      	beq.n	80063cc <USBD_LL_SetupStage+0x5e>
 80063b6:	e01d      	b.n	80063f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb5f 	bl	8006a84 <USBD_StdDevReq>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
      break;
 80063ca:	e020      	b.n	800640e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063d2:	4619      	mov	r1, r3
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fbc7 	bl	8006b68 <USBD_StdItfReq>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]
      break;
 80063de:	e016      	b.n	800640e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fc29 	bl	8006c40 <USBD_StdEPReq>
 80063ee:	4603      	mov	r3, r0
 80063f0:	73fb      	strb	r3, [r7, #15]
      break;
 80063f2:	e00c      	b.n	800640e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	4619      	mov	r1, r3
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f001 fde0 	bl	8007fc8 <USBD_LL_StallEP>
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	bf00      	nop
  }

  return ret;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	460b      	mov	r3, r1
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d16e      	bne.n	800650e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006436:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800643e:	2b03      	cmp	r3, #3
 8006440:	f040 8098 	bne.w	8006574 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	429a      	cmp	r2, r3
 800644e:	d913      	bls.n	8006478 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	1ad2      	subs	r2, r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	4293      	cmp	r3, r2
 8006468:	bf28      	it	cs
 800646a:	4613      	movcs	r3, r2
 800646c:	461a      	mov	r2, r3
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f001 f984 	bl	800777e <USBD_CtlContinueRx>
 8006476:	e07d      	b.n	8006574 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800647e:	f003 031f 	and.w	r3, r3, #31
 8006482:	2b02      	cmp	r3, #2
 8006484:	d014      	beq.n	80064b0 <USBD_LL_DataOutStage+0x98>
 8006486:	2b02      	cmp	r3, #2
 8006488:	d81d      	bhi.n	80064c6 <USBD_LL_DataOutStage+0xae>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <USBD_LL_DataOutStage+0x7c>
 800648e:	2b01      	cmp	r3, #1
 8006490:	d003      	beq.n	800649a <USBD_LL_DataOutStage+0x82>
 8006492:	e018      	b.n	80064c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	75bb      	strb	r3, [r7, #22]
            break;
 8006498:	e018      	b.n	80064cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	4619      	mov	r1, r3
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fa5e 	bl	8006966 <USBD_CoreFindIF>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75bb      	strb	r3, [r7, #22]
            break;
 80064ae:	e00d      	b.n	80064cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fa60 	bl	8006980 <USBD_CoreFindEP>
 80064c0:	4603      	mov	r3, r0
 80064c2:	75bb      	strb	r3, [r7, #22]
            break;
 80064c4:	e002      	b.n	80064cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	75bb      	strb	r3, [r7, #22]
            break;
 80064ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80064cc:	7dbb      	ldrb	r3, [r7, #22]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d119      	bne.n	8006506 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d113      	bne.n	8006506 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80064de:	7dba      	ldrb	r2, [r7, #22]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	32ae      	adds	r2, #174	; 0xae
 80064e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80064ee:	7dba      	ldrb	r2, [r7, #22]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80064f6:	7dba      	ldrb	r2, [r7, #22]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	32ae      	adds	r2, #174	; 0xae
 80064fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f001 f94a 	bl	80077a0 <USBD_CtlSendStatus>
 800650c:	e032      	b.n	8006574 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006514:	b2db      	uxtb	r3, r3
 8006516:	4619      	mov	r1, r3
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fa31 	bl	8006980 <USBD_CoreFindEP>
 800651e:	4603      	mov	r3, r0
 8006520:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006522:	7dbb      	ldrb	r3, [r7, #22]
 8006524:	2bff      	cmp	r3, #255	; 0xff
 8006526:	d025      	beq.n	8006574 <USBD_LL_DataOutStage+0x15c>
 8006528:	7dbb      	ldrb	r3, [r7, #22]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d122      	bne.n	8006574 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d117      	bne.n	800656a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800653a:	7dba      	ldrb	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	32ae      	adds	r2, #174	; 0xae
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800654a:	7dba      	ldrb	r2, [r7, #22]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006552:	7dba      	ldrb	r2, [r7, #22]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	32ae      	adds	r2, #174	; 0xae
 8006558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	7afa      	ldrb	r2, [r7, #11]
 8006560:	4611      	mov	r1, r2
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	4798      	blx	r3
 8006566:	4603      	mov	r3, r0
 8006568:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800656a:	7dfb      	ldrb	r3, [r7, #23]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006570:	7dfb      	ldrb	r3, [r7, #23]
 8006572:	e000      	b.n	8006576 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b086      	sub	sp, #24
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	460b      	mov	r3, r1
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800658c:	7afb      	ldrb	r3, [r7, #11]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d16f      	bne.n	8006672 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	3314      	adds	r3, #20
 8006596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d15a      	bne.n	8006658 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d914      	bls.n	80065d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	1ad2      	subs	r2, r2, r3
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	461a      	mov	r2, r3
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f001 f8ac 	bl	8007722 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065ca:	2300      	movs	r3, #0
 80065cc:	2200      	movs	r2, #0
 80065ce:	2100      	movs	r1, #0
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 fda3 	bl	800811c <USBD_LL_PrepareReceive>
 80065d6:	e03f      	b.n	8006658 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d11c      	bne.n	800661e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d316      	bcc.n	800661e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d20f      	bcs.n	800661e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80065fe:	2200      	movs	r2, #0
 8006600:	2100      	movs	r1, #0
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f001 f88d 	bl	8007722 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006610:	2300      	movs	r3, #0
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f001 fd80 	bl	800811c <USBD_LL_PrepareReceive>
 800661c:	e01c      	b.n	8006658 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b03      	cmp	r3, #3
 8006628:	d10f      	bne.n	800664a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d009      	beq.n	800664a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f001 fcbb 	bl	8007fc8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 f8b7 	bl	80077c6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d03a      	beq.n	80066d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f7ff fe42 	bl	80062ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006670:	e032      	b.n	80066d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006672:	7afb      	ldrb	r3, [r7, #11]
 8006674:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4619      	mov	r1, r3
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f97f 	bl	8006980 <USBD_CoreFindEP>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006686:	7dfb      	ldrb	r3, [r7, #23]
 8006688:	2bff      	cmp	r3, #255	; 0xff
 800668a:	d025      	beq.n	80066d8 <USBD_LL_DataInStage+0x15a>
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d122      	bne.n	80066d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b03      	cmp	r3, #3
 800669c:	d11c      	bne.n	80066d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800669e:	7dfa      	ldrb	r2, [r7, #23]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	32ae      	adds	r2, #174	; 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d014      	beq.n	80066d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066ae:	7dfa      	ldrb	r2, [r7, #23]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066b6:	7dfa      	ldrb	r2, [r7, #23]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	32ae      	adds	r2, #174	; 0xae
 80066bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	7afa      	ldrb	r2, [r7, #11]
 80066c4:	4611      	mov	r1, r2
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80066ce:	7dbb      	ldrb	r3, [r7, #22]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80066d4:	7dbb      	ldrb	r3, [r7, #22]
 80066d6:	e000      	b.n	80066da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	2b00      	cmp	r3, #0
 800671c:	d014      	beq.n	8006748 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00e      	beq.n	8006748 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6852      	ldr	r2, [r2, #4]
 8006736:	b2d2      	uxtb	r2, r2
 8006738:	4611      	mov	r1, r2
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006744:	2303      	movs	r3, #3
 8006746:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fbf5 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2240      	movs	r2, #64	; 0x40
 8006760:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006764:	2340      	movs	r3, #64	; 0x40
 8006766:	2200      	movs	r2, #0
 8006768:	2180      	movs	r1, #128	; 0x80
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fbe7 	bl	8007f3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	621a      	str	r2, [r3, #32]

  return ret;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	78fa      	ldrb	r2, [r7, #3]
 8006796:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2204      	movs	r2, #4
 80067c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d106      	bne.n	80067f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b03      	cmp	r3, #3
 8006814:	d110      	bne.n	8006838 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00b      	beq.n	8006838 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	460b      	mov	r3, r1
 800684c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	32ae      	adds	r2, #174	; 0xae
 8006858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006860:	2303      	movs	r3, #3
 8006862:	e01c      	b.n	800689e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b03      	cmp	r3, #3
 800686e:	d115      	bne.n	800689c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	32ae      	adds	r2, #174	; 0xae
 800687a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	32ae      	adds	r2, #174	; 0xae
 800688e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	4611      	mov	r1, r2
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3708      	adds	r7, #8
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	32ae      	adds	r2, #174	; 0xae
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e01c      	b.n	8006902 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d115      	bne.n	8006900 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32ae      	adds	r2, #174	; 0xae
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00b      	beq.n	8006900 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32ae      	adds	r2, #174	; 0xae
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	4611      	mov	r1, r2
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00e      	beq.n	800695c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	6852      	ldr	r2, [r2, #4]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	4611      	mov	r1, r2
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800695c:	7bfb      	ldrb	r3, [r7, #15]
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006972:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800698c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800698e:	4618      	mov	r0, r3
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b086      	sub	sp, #24
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	460b      	mov	r3, r1
 80069a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	885b      	ldrh	r3, [r3, #2]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	429a      	cmp	r2, r3
 80069c0:	d920      	bls.n	8006a04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80069ca:	e013      	b.n	80069f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80069cc:	f107 030a 	add.w	r3, r7, #10
 80069d0:	4619      	mov	r1, r3
 80069d2:	6978      	ldr	r0, [r7, #20]
 80069d4:	f000 f81b 	bl	8006a0e <USBD_GetNextDesc>
 80069d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d108      	bne.n	80069f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	789b      	ldrb	r3, [r3, #2]
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d008      	beq.n	8006a02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80069f0:	2300      	movs	r3, #0
 80069f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	885b      	ldrh	r3, [r3, #2]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	897b      	ldrh	r3, [r7, #10]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d8e5      	bhi.n	80069cc <USBD_GetEpDesc+0x32>
 8006a00:	e000      	b.n	8006a04 <USBD_GetEpDesc+0x6a>
          break;
 8006a02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a04:	693b      	ldr	r3, [r7, #16]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b085      	sub	sp, #20
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	881a      	ldrh	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4413      	add	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a66:	8a3b      	ldrh	r3, [r7, #16]
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b21a      	sxth	r2, r3
 8006a6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	b21b      	sxth	r3, r3
 8006a74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a76:	89fb      	ldrh	r3, [r7, #14]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d005      	beq.n	8006aaa <USBD_StdDevReq+0x26>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d857      	bhi.n	8006b52 <USBD_StdDevReq+0xce>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00f      	beq.n	8006ac6 <USBD_StdDevReq+0x42>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d153      	bne.n	8006b52 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	32ae      	adds	r2, #174	; 0xae
 8006ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	4798      	blx	r3
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ac4:	e04a      	b.n	8006b5c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b09      	cmp	r3, #9
 8006acc:	d83b      	bhi.n	8006b46 <USBD_StdDevReq+0xc2>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <USBD_StdDevReq+0x50>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b29 	.word	0x08006b29
 8006ad8:	08006b3d 	.word	0x08006b3d
 8006adc:	08006b47 	.word	0x08006b47
 8006ae0:	08006b33 	.word	0x08006b33
 8006ae4:	08006b47 	.word	0x08006b47
 8006ae8:	08006b07 	.word	0x08006b07
 8006aec:	08006afd 	.word	0x08006afd
 8006af0:	08006b47 	.word	0x08006b47
 8006af4:	08006b1f 	.word	0x08006b1f
 8006af8:	08006b11 	.word	0x08006b11
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa3c 	bl	8006f7c <USBD_GetDescriptor>
          break;
 8006b04:	e024      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fba1 	bl	8007250 <USBD_SetAddress>
          break;
 8006b0e:	e01f      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fbe0 	bl	80072d8 <USBD_SetConfig>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]
          break;
 8006b1c:	e018      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fc83 	bl	800742c <USBD_GetConfig>
          break;
 8006b26:	e013      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b28:	6839      	ldr	r1, [r7, #0]
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fcb4 	bl	8007498 <USBD_GetStatus>
          break;
 8006b30:	e00e      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fce3 	bl	8007500 <USBD_SetFeature>
          break;
 8006b3a:	e009      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fd07 	bl	8007552 <USBD_ClrFeature>
          break;
 8006b44:	e004      	b.n	8006b50 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fd5e 	bl	800760a <USBD_CtlError>
          break;
 8006b4e:	bf00      	nop
      }
      break;
 8006b50:	e004      	b.n	8006b5c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fd58 	bl	800760a <USBD_CtlError>
      break;
 8006b5a:	bf00      	nop
  }

  return ret;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop

08006b68 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d005      	beq.n	8006b8e <USBD_StdItfReq+0x26>
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	d852      	bhi.n	8006c2c <USBD_StdItfReq+0xc4>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <USBD_StdItfReq+0x26>
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	d14e      	bne.n	8006c2c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d840      	bhi.n	8006c1e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	889b      	ldrh	r3, [r3, #4]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d836      	bhi.n	8006c14 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	889b      	ldrh	r3, [r3, #4]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	4619      	mov	r1, r3
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff fed9 	bl	8006966 <USBD_CoreFindIF>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bb8:	7bbb      	ldrb	r3, [r7, #14]
 8006bba:	2bff      	cmp	r3, #255	; 0xff
 8006bbc:	d01d      	beq.n	8006bfa <USBD_StdItfReq+0x92>
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d11a      	bne.n	8006bfa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006bc4:	7bba      	ldrb	r2, [r7, #14]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	; 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00f      	beq.n	8006bf4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006bd4:	7bba      	ldrb	r2, [r7, #14]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bdc:	7bba      	ldrb	r2, [r7, #14]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	32ae      	adds	r2, #174	; 0xae
 8006be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	6839      	ldr	r1, [r7, #0]
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	4798      	blx	r3
 8006bee:	4603      	mov	r3, r0
 8006bf0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bf2:	e004      	b.n	8006bfe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006bf8:	e001      	b.n	8006bfe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	88db      	ldrh	r3, [r3, #6]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d110      	bne.n	8006c28 <USBD_StdItfReq+0xc0>
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10d      	bne.n	8006c28 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fdc7 	bl	80077a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c12:	e009      	b.n	8006c28 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c14:	6839      	ldr	r1, [r7, #0]
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fcf7 	bl	800760a <USBD_CtlError>
          break;
 8006c1c:	e004      	b.n	8006c28 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 fcf2 	bl	800760a <USBD_CtlError>
          break;
 8006c26:	e000      	b.n	8006c2a <USBD_StdItfReq+0xc2>
          break;
 8006c28:	bf00      	nop
      }
      break;
 8006c2a:	e004      	b.n	8006c36 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fceb 	bl	800760a <USBD_CtlError>
      break;
 8006c34:	bf00      	nop
  }

  return ret;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	889b      	ldrh	r3, [r3, #4]
 8006c52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c5c:	2b40      	cmp	r3, #64	; 0x40
 8006c5e:	d007      	beq.n	8006c70 <USBD_StdEPReq+0x30>
 8006c60:	2b40      	cmp	r3, #64	; 0x40
 8006c62:	f200 817f 	bhi.w	8006f64 <USBD_StdEPReq+0x324>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d02a      	beq.n	8006cc0 <USBD_StdEPReq+0x80>
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	f040 817a 	bne.w	8006f64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff fe83 	bl	8006980 <USBD_CoreFindEP>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c7e:	7b7b      	ldrb	r3, [r7, #13]
 8006c80:	2bff      	cmp	r3, #255	; 0xff
 8006c82:	f000 8174 	beq.w	8006f6e <USBD_StdEPReq+0x32e>
 8006c86:	7b7b      	ldrb	r3, [r7, #13]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f040 8170 	bne.w	8006f6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006c8e:	7b7a      	ldrb	r2, [r7, #13]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006c96:	7b7a      	ldrb	r2, [r7, #13]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	32ae      	adds	r2, #174	; 0xae
 8006c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8163 	beq.w	8006f6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ca8:	7b7a      	ldrb	r2, [r7, #13]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	32ae      	adds	r2, #174	; 0xae
 8006cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	4798      	blx	r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cbe:	e156      	b.n	8006f6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	785b      	ldrb	r3, [r3, #1]
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d008      	beq.n	8006cda <USBD_StdEPReq+0x9a>
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	f300 8145 	bgt.w	8006f58 <USBD_StdEPReq+0x318>
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 809b 	beq.w	8006e0a <USBD_StdEPReq+0x1ca>
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d03c      	beq.n	8006d52 <USBD_StdEPReq+0x112>
 8006cd8:	e13e      	b.n	8006f58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d002      	beq.n	8006cec <USBD_StdEPReq+0xac>
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d016      	beq.n	8006d18 <USBD_StdEPReq+0xd8>
 8006cea:	e02c      	b.n	8006d46 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00d      	beq.n	8006d0e <USBD_StdEPReq+0xce>
 8006cf2:	7bbb      	ldrb	r3, [r7, #14]
 8006cf4:	2b80      	cmp	r3, #128	; 0x80
 8006cf6:	d00a      	beq.n	8006d0e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f001 f963 	bl	8007fc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f95f 	bl	8007fc8 <USBD_LL_StallEP>
 8006d0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d0c:	e020      	b.n	8006d50 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fc7a 	bl	800760a <USBD_CtlError>
              break;
 8006d16:	e01b      	b.n	8006d50 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10e      	bne.n	8006d3e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <USBD_StdEPReq+0xfe>
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b80      	cmp	r3, #128	; 0x80
 8006d2a:	d008      	beq.n	8006d3e <USBD_StdEPReq+0xfe>
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	88db      	ldrh	r3, [r3, #6]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f945 	bl	8007fc8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fd2e 	bl	80077a0 <USBD_CtlSendStatus>

              break;
 8006d44:	e004      	b.n	8006d50 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fc5e 	bl	800760a <USBD_CtlError>
              break;
 8006d4e:	bf00      	nop
          }
          break;
 8006d50:	e107      	b.n	8006f62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d002      	beq.n	8006d64 <USBD_StdEPReq+0x124>
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d016      	beq.n	8006d90 <USBD_StdEPReq+0x150>
 8006d62:	e04b      	b.n	8006dfc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00d      	beq.n	8006d86 <USBD_StdEPReq+0x146>
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d00a      	beq.n	8006d86 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f927 	bl	8007fc8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d7a:	2180      	movs	r1, #128	; 0x80
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 f923 	bl	8007fc8 <USBD_LL_StallEP>
 8006d82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d84:	e040      	b.n	8006e08 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fc3e 	bl	800760a <USBD_CtlError>
              break;
 8006d8e:	e03b      	b.n	8006e08 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d136      	bne.n	8006e06 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f001 f92d 	bl	8008006 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fcf7 	bl	80077a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006db2:	7bbb      	ldrb	r3, [r7, #14]
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff fde2 	bl	8006980 <USBD_CoreFindEP>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dc0:	7b7b      	ldrb	r3, [r7, #13]
 8006dc2:	2bff      	cmp	r3, #255	; 0xff
 8006dc4:	d01f      	beq.n	8006e06 <USBD_StdEPReq+0x1c6>
 8006dc6:	7b7b      	ldrb	r3, [r7, #13]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d11c      	bne.n	8006e06 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006dcc:	7b7a      	ldrb	r2, [r7, #13]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006dd4:	7b7a      	ldrb	r2, [r7, #13]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	32ae      	adds	r2, #174	; 0xae
 8006dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006de4:	7b7a      	ldrb	r2, [r7, #13]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32ae      	adds	r2, #174	; 0xae
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	4798      	blx	r3
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006dfa:	e004      	b.n	8006e06 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fc03 	bl	800760a <USBD_CtlError>
              break;
 8006e04:	e000      	b.n	8006e08 <USBD_StdEPReq+0x1c8>
              break;
 8006e06:	bf00      	nop
          }
          break;
 8006e08:	e0ab      	b.n	8006f62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d002      	beq.n	8006e1c <USBD_StdEPReq+0x1dc>
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d032      	beq.n	8006e80 <USBD_StdEPReq+0x240>
 8006e1a:	e097      	b.n	8006f4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d007      	beq.n	8006e32 <USBD_StdEPReq+0x1f2>
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b80      	cmp	r3, #128	; 0x80
 8006e26:	d004      	beq.n	8006e32 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e28:	6839      	ldr	r1, [r7, #0]
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fbed 	bl	800760a <USBD_CtlError>
                break;
 8006e30:	e091      	b.n	8006f56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da0b      	bge.n	8006e52 <USBD_StdEPReq+0x212>
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3310      	adds	r3, #16
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	e00b      	b.n	8006e6a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e58:	4613      	mov	r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	3304      	adds	r3, #4
 8006e6a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2202      	movs	r2, #2
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fc37 	bl	80076ec <USBD_CtlSendData>
              break;
 8006e7e:	e06a      	b.n	8006f56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da11      	bge.n	8006eac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	f003 020f 	and.w	r2, r3, #15
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	3324      	adds	r3, #36	; 0x24
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d117      	bne.n	8006ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fbb0 	bl	800760a <USBD_CtlError>
                  break;
 8006eaa:	e054      	b.n	8006f56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	f003 020f 	and.w	r2, r3, #15
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ec2:	881b      	ldrh	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fb9d 	bl	800760a <USBD_CtlError>
                  break;
 8006ed0:	e041      	b.n	8006f56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da0b      	bge.n	8006ef2 <USBD_StdEPReq+0x2b2>
 8006eda:	7bbb      	ldrb	r3, [r7, #14]
 8006edc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4413      	add	r3, r2
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	3310      	adds	r3, #16
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	4413      	add	r3, r2
 8006eee:	3304      	adds	r3, #4
 8006ef0:	e00b      	b.n	8006f0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef8:	4613      	mov	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	4413      	add	r3, r2
 8006f08:	3304      	adds	r3, #4
 8006f0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <USBD_StdEPReq+0x2d8>
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d103      	bne.n	8006f20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e00e      	b.n	8006f3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	4619      	mov	r1, r3
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 f88d 	bl	8008044 <USBD_LL_IsStallEP>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	e002      	b.n	8006f3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2202      	movs	r2, #2
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fbd1 	bl	80076ec <USBD_CtlSendData>
              break;
 8006f4a:	e004      	b.n	8006f56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f4c:	6839      	ldr	r1, [r7, #0]
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 fb5b 	bl	800760a <USBD_CtlError>
              break;
 8006f54:	bf00      	nop
          }
          break;
 8006f56:	e004      	b.n	8006f62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb55 	bl	800760a <USBD_CtlError>
          break;
 8006f60:	bf00      	nop
      }
      break;
 8006f62:	e005      	b.n	8006f70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fb4f 	bl	800760a <USBD_CtlError>
      break;
 8006f6c:	e000      	b.n	8006f70 <USBD_StdEPReq+0x330>
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	2b06      	cmp	r3, #6
 8006f9e:	f200 8128 	bhi.w	80071f2 <USBD_GetDescriptor+0x276>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <USBD_GetDescriptor+0x2c>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fdd 	.word	0x08006fdd
 8006fb0:	0800701d 	.word	0x0800701d
 8006fb4:	080071f3 	.word	0x080071f3
 8006fb8:	080071f3 	.word	0x080071f3
 8006fbc:	08007193 	.word	0x08007193
 8006fc0:	080071bf 	.word	0x080071bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	f107 0108 	add.w	r1, r7, #8
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	60f8      	str	r0, [r7, #12]
      break;
 8006fda:	e112      	b.n	8007202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7c1b      	ldrb	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10d      	bne.n	8007000 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fec:	f107 0208 	add.w	r2, r7, #8
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ffe:	e100      	b.n	8007202 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	f107 0208 	add.w	r2, r7, #8
 800700c:	4610      	mov	r0, r2
 800700e:	4798      	blx	r3
 8007010:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	3301      	adds	r3, #1
 8007016:	2202      	movs	r2, #2
 8007018:	701a      	strb	r2, [r3, #0]
      break;
 800701a:	e0f2      	b.n	8007202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	885b      	ldrh	r3, [r3, #2]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b05      	cmp	r3, #5
 8007024:	f200 80ac 	bhi.w	8007180 <USBD_GetDescriptor+0x204>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <USBD_GetDescriptor+0xb4>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007049 	.word	0x08007049
 8007034:	0800707d 	.word	0x0800707d
 8007038:	080070b1 	.word	0x080070b1
 800703c:	080070e5 	.word	0x080070e5
 8007040:	08007119 	.word	0x08007119
 8007044:	0800714d 	.word	0x0800714d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7c12      	ldrb	r2, [r2, #16]
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706a:	e091      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 facb 	bl	800760a <USBD_CtlError>
            err++;
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	3301      	adds	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
          break;
 800707a:	e089      	b.n	8007190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709e:	e077      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fab1 	bl	800760a <USBD_CtlError>
            err++;
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	3301      	adds	r3, #1
 80070ac:	72fb      	strb	r3, [r7, #11]
          break;
 80070ae:	e06f      	b.n	8007190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	7c12      	ldrb	r2, [r2, #16]
 80070c8:	f107 0108 	add.w	r1, r7, #8
 80070cc:	4610      	mov	r0, r2
 80070ce:	4798      	blx	r3
 80070d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d2:	e05d      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fa97 	bl	800760a <USBD_CtlError>
            err++;
 80070dc:	7afb      	ldrb	r3, [r7, #11]
 80070de:	3301      	adds	r3, #1
 80070e0:	72fb      	strb	r3, [r7, #11]
          break;
 80070e2:	e055      	b.n	8007190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00b      	beq.n	8007108 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	7c12      	ldrb	r2, [r2, #16]
 80070fc:	f107 0108 	add.w	r1, r7, #8
 8007100:	4610      	mov	r0, r2
 8007102:	4798      	blx	r3
 8007104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007106:	e043      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fa7d 	bl	800760a <USBD_CtlError>
            err++;
 8007110:	7afb      	ldrb	r3, [r7, #11]
 8007112:	3301      	adds	r3, #1
 8007114:	72fb      	strb	r3, [r7, #11]
          break;
 8007116:	e03b      	b.n	8007190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00b      	beq.n	800713c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7c12      	ldrb	r2, [r2, #16]
 8007130:	f107 0108 	add.w	r1, r7, #8
 8007134:	4610      	mov	r0, r2
 8007136:	4798      	blx	r3
 8007138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713a:	e029      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fa63 	bl	800760a <USBD_CtlError>
            err++;
 8007144:	7afb      	ldrb	r3, [r7, #11]
 8007146:	3301      	adds	r3, #1
 8007148:	72fb      	strb	r3, [r7, #11]
          break;
 800714a:	e021      	b.n	8007190 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	7c12      	ldrb	r2, [r2, #16]
 8007164:	f107 0108 	add.w	r1, r7, #8
 8007168:	4610      	mov	r0, r2
 800716a:	4798      	blx	r3
 800716c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716e:	e00f      	b.n	8007190 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa49 	bl	800760a <USBD_CtlError>
            err++;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	3301      	adds	r3, #1
 800717c:	72fb      	strb	r3, [r7, #11]
          break;
 800717e:	e007      	b.n	8007190 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007180:	6839      	ldr	r1, [r7, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa41 	bl	800760a <USBD_CtlError>
          err++;
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	3301      	adds	r3, #1
 800718c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800718e:	bf00      	nop
      }
      break;
 8007190:	e037      	b.n	8007202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	7c1b      	ldrb	r3, [r3, #16]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a2:	f107 0208 	add.w	r2, r7, #8
 80071a6:	4610      	mov	r0, r2
 80071a8:	4798      	blx	r3
 80071aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ac:	e029      	b.n	8007202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa2a 	bl	800760a <USBD_CtlError>
        err++;
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	3301      	adds	r3, #1
 80071ba:	72fb      	strb	r3, [r7, #11]
      break;
 80071bc:	e021      	b.n	8007202 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c1b      	ldrb	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10d      	bne.n	80071e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	f107 0208 	add.w	r2, r7, #8
 80071d2:	4610      	mov	r0, r2
 80071d4:	4798      	blx	r3
 80071d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3301      	adds	r3, #1
 80071dc:	2207      	movs	r2, #7
 80071de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e0:	e00f      	b.n	8007202 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fa10 	bl	800760a <USBD_CtlError>
        err++;
 80071ea:	7afb      	ldrb	r3, [r7, #11]
 80071ec:	3301      	adds	r3, #1
 80071ee:	72fb      	strb	r3, [r7, #11]
      break;
 80071f0:	e007      	b.n	8007202 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fa08 	bl	800760a <USBD_CtlError>
      err++;
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	3301      	adds	r3, #1
 80071fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007200:	bf00      	nop
  }

  if (err != 0U)
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11e      	bne.n	8007246 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	88db      	ldrh	r3, [r3, #6]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d016      	beq.n	800723e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007210:	893b      	ldrh	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00e      	beq.n	8007234 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	88da      	ldrh	r2, [r3, #6]
 800721a:	893b      	ldrh	r3, [r7, #8]
 800721c:	4293      	cmp	r3, r2
 800721e:	bf28      	it	cs
 8007220:	4613      	movcs	r3, r2
 8007222:	b29b      	uxth	r3, r3
 8007224:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007226:	893b      	ldrh	r3, [r7, #8]
 8007228:	461a      	mov	r2, r3
 800722a:	68f9      	ldr	r1, [r7, #12]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fa5d 	bl	80076ec <USBD_CtlSendData>
 8007232:	e009      	b.n	8007248 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f9e7 	bl	800760a <USBD_CtlError>
 800723c:	e004      	b.n	8007248 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 faae 	bl	80077a0 <USBD_CtlSendStatus>
 8007244:	e000      	b.n	8007248 <USBD_GetDescriptor+0x2cc>
    return;
 8007246:	bf00      	nop
  }
}
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop

08007250 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	889b      	ldrh	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d131      	bne.n	80072c6 <USBD_SetAddress+0x76>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d12d      	bne.n	80072c6 <USBD_SetAddress+0x76>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	885b      	ldrh	r3, [r3, #2]
 800726e:	2b7f      	cmp	r3, #127	; 0x7f
 8007270:	d829      	bhi.n	80072c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	885b      	ldrh	r3, [r3, #2]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800727c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b03      	cmp	r3, #3
 8007288:	d104      	bne.n	8007294 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f9bc 	bl	800760a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007292:	e01d      	b.n	80072d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	7bfa      	ldrb	r2, [r7, #15]
 8007298:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fefb 	bl	800809c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa7a 	bl	80077a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	e009      	b.n	80072d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c4:	e004      	b.n	80072d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f99e 	bl	800760a <USBD_CtlError>
  }
}
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	885b      	ldrh	r3, [r3, #2]
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	4b4e      	ldr	r3, [pc, #312]	; (8007428 <USBD_SetConfig+0x150>)
 80072ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072f0:	4b4d      	ldr	r3, [pc, #308]	; (8007428 <USBD_SetConfig+0x150>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d905      	bls.n	8007304 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f985 	bl	800760a <USBD_CtlError>
    return USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	e08c      	b.n	800741e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d002      	beq.n	8007316 <USBD_SetConfig+0x3e>
 8007310:	2b03      	cmp	r3, #3
 8007312:	d029      	beq.n	8007368 <USBD_SetConfig+0x90>
 8007314:	e075      	b.n	8007402 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007316:	4b44      	ldr	r3, [pc, #272]	; (8007428 <USBD_SetConfig+0x150>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d020      	beq.n	8007360 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800731e:	4b42      	ldr	r3, [pc, #264]	; (8007428 <USBD_SetConfig+0x150>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007328:	4b3f      	ldr	r3, [pc, #252]	; (8007428 <USBD_SetConfig+0x150>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe ffe7 	bl	8006302 <USBD_SetClassConfig>
 8007334:	4603      	mov	r3, r0
 8007336:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d008      	beq.n	8007350 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f962 	bl	800760a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2202      	movs	r2, #2
 800734a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800734e:	e065      	b.n	800741c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa25 	bl	80077a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2203      	movs	r2, #3
 800735a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800735e:	e05d      	b.n	800741c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa1d 	bl	80077a0 <USBD_CtlSendStatus>
      break;
 8007366:	e059      	b.n	800741c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007368:	4b2f      	ldr	r3, [pc, #188]	; (8007428 <USBD_SetConfig+0x150>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d112      	bne.n	8007396 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007378:	4b2b      	ldr	r3, [pc, #172]	; (8007428 <USBD_SetConfig+0x150>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007382:	4b29      	ldr	r3, [pc, #164]	; (8007428 <USBD_SetConfig+0x150>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	4619      	mov	r1, r3
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fe ffd6 	bl	800633a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fa06 	bl	80077a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007394:	e042      	b.n	800741c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <USBD_SetConfig+0x150>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d02a      	beq.n	80073fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7fe ffc4 	bl	800633a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073b2:	4b1d      	ldr	r3, [pc, #116]	; (8007428 <USBD_SetConfig+0x150>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <USBD_SetConfig+0x150>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fe ff9d 	bl	8006302 <USBD_SetClassConfig>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00f      	beq.n	80073f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f918 	bl	800760a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fe ffa9 	bl	800633a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073f0:	e014      	b.n	800741c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9d4 	bl	80077a0 <USBD_CtlSendStatus>
      break;
 80073f8:	e010      	b.n	800741c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9d0 	bl	80077a0 <USBD_CtlSendStatus>
      break;
 8007400:	e00c      	b.n	800741c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f900 	bl	800760a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800740a:	4b07      	ldr	r3, [pc, #28]	; (8007428 <USBD_SetConfig+0x150>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f7fe ff92 	bl	800633a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007416:	2303      	movs	r3, #3
 8007418:	73fb      	strb	r3, [r7, #15]
      break;
 800741a:	bf00      	nop
  }

  return ret;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	20000260 	.word	0x20000260

0800742c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	88db      	ldrh	r3, [r3, #6]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d004      	beq.n	8007448 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f8e2 	bl	800760a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007446:	e023      	b.n	8007490 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	dc02      	bgt.n	800745a <USBD_GetConfig+0x2e>
 8007454:	2b00      	cmp	r3, #0
 8007456:	dc03      	bgt.n	8007460 <USBD_GetConfig+0x34>
 8007458:	e015      	b.n	8007486 <USBD_GetConfig+0x5a>
 800745a:	2b03      	cmp	r3, #3
 800745c:	d00b      	beq.n	8007476 <USBD_GetConfig+0x4a>
 800745e:	e012      	b.n	8007486 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3308      	adds	r3, #8
 800746a:	2201      	movs	r2, #1
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f93c 	bl	80076ec <USBD_CtlSendData>
        break;
 8007474:	e00c      	b.n	8007490 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	2201      	movs	r2, #1
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f934 	bl	80076ec <USBD_CtlSendData>
        break;
 8007484:	e004      	b.n	8007490 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007486:	6839      	ldr	r1, [r7, #0]
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8be 	bl	800760a <USBD_CtlError>
        break;
 800748e:	bf00      	nop
}
 8007490:	bf00      	nop
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d81e      	bhi.n	80074ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	88db      	ldrh	r3, [r3, #6]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d004      	beq.n	80074c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8a5 	bl	800760a <USBD_CtlError>
        break;
 80074c0:	e01a      	b.n	80074f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d005      	beq.n	80074de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f043 0202 	orr.w	r2, r3, #2
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	330c      	adds	r3, #12
 80074e2:	2202      	movs	r2, #2
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f900 	bl	80076ec <USBD_CtlSendData>
      break;
 80074ec:	e004      	b.n	80074f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f88a 	bl	800760a <USBD_CtlError>
      break;
 80074f6:	bf00      	nop
  }
}
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d107      	bne.n	8007522 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f940 	bl	80077a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007520:	e013      	b.n	800754a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d10b      	bne.n	8007542 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	889b      	ldrh	r3, [r3, #4]
 800752e:	0a1b      	lsrs	r3, r3, #8
 8007530:	b29b      	uxth	r3, r3
 8007532:	b2da      	uxtb	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f930 	bl	80077a0 <USBD_CtlSendStatus>
}
 8007540:	e003      	b.n	800754a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f860 	bl	800760a <USBD_CtlError>
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007562:	b2db      	uxtb	r3, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	2b02      	cmp	r3, #2
 8007568:	d80b      	bhi.n	8007582 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	885b      	ldrh	r3, [r3, #2]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10c      	bne.n	800758c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f910 	bl	80077a0 <USBD_CtlSendStatus>
      }
      break;
 8007580:	e004      	b.n	800758c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f840 	bl	800760a <USBD_CtlError>
      break;
 800758a:	e000      	b.n	800758e <USBD_ClrFeature+0x3c>
      break;
 800758c:	bf00      	nop
  }
}
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	781a      	ldrb	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3301      	adds	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	781a      	ldrb	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7ff fa41 	bl	8006a48 <SWAPBYTE>
 80075c6:	4603      	mov	r3, r0
 80075c8:	461a      	mov	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3301      	adds	r3, #1
 80075d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7ff fa34 	bl	8006a48 <SWAPBYTE>
 80075e0:	4603      	mov	r3, r0
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3301      	adds	r3, #1
 80075f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f7ff fa27 	bl	8006a48 <SWAPBYTE>
 80075fa:	4603      	mov	r3, r0
 80075fc:	461a      	mov	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	80da      	strh	r2, [r3, #6]
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007614:	2180      	movs	r1, #128	; 0x80
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fcd6 	bl	8007fc8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800761c:	2100      	movs	r1, #0
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fcd2 	bl	8007fc8 <USBD_LL_StallEP>
}
 8007624:	bf00      	nop
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d036      	beq.n	80076b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007646:	6938      	ldr	r0, [r7, #16]
 8007648:	f000 f836 	bl	80076b8 <USBD_GetLen>
 800764c:	4603      	mov	r3, r0
 800764e:	3301      	adds	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	b29a      	uxth	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	4413      	add	r3, r2
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7812      	ldrb	r2, [r2, #0]
 8007664:	701a      	strb	r2, [r3, #0]
  idx++;
 8007666:	7dfb      	ldrb	r3, [r7, #23]
 8007668:	3301      	adds	r3, #1
 800766a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	4413      	add	r3, r2
 8007672:	2203      	movs	r2, #3
 8007674:	701a      	strb	r2, [r3, #0]
  idx++;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	3301      	adds	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800767c:	e013      	b.n	80076a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4413      	add	r3, r2
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	7812      	ldrb	r2, [r2, #0]
 8007688:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	3301      	adds	r3, #1
 800768e:	613b      	str	r3, [r7, #16]
    idx++;
 8007690:	7dfb      	ldrb	r3, [r7, #23]
 8007692:	3301      	adds	r3, #1
 8007694:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
    idx++;
 80076a0:	7dfb      	ldrb	r3, [r7, #23]
 80076a2:	3301      	adds	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e7      	bne.n	800767e <USBD_GetString+0x52>
 80076ae:	e000      	b.n	80076b2 <USBD_GetString+0x86>
    return;
 80076b0:	bf00      	nop
  }
}
 80076b2:	3718      	adds	r7, #24
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80076c8:	e005      	b.n	80076d6 <USBD_GetLen+0x1e>
  {
    len++;
 80076ca:	7bfb      	ldrb	r3, [r7, #15]
 80076cc:	3301      	adds	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1f5      	bne.n	80076ca <USBD_GetLen+0x12>
  }

  return len;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fce1 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	2100      	movs	r1, #0
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fcd0 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2203      	movs	r2, #3
 8007754:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68ba      	ldr	r2, [r7, #8]
 800776c:	2100      	movs	r1, #0
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fcd4 	bl	800811c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	2100      	movs	r1, #0
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fcc3 	bl	800811c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2204      	movs	r2, #4
 80077ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077b0:	2300      	movs	r3, #0
 80077b2:	2200      	movs	r2, #0
 80077b4:	2100      	movs	r1, #0
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fc8f 	bl	80080da <USBD_LL_Transmit>

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2205      	movs	r2, #5
 80077d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80077d6:	2300      	movs	r3, #0
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fc9d 	bl	800811c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80077f0:	2200      	movs	r2, #0
 80077f2:	4912      	ldr	r1, [pc, #72]	; (800783c <MX_USB_DEVICE_Init+0x50>)
 80077f4:	4812      	ldr	r0, [pc, #72]	; (8007840 <MX_USB_DEVICE_Init+0x54>)
 80077f6:	f7fe fd07 	bl	8006208 <USBD_Init>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007800:	f7f9 f9e0 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007804:	490f      	ldr	r1, [pc, #60]	; (8007844 <MX_USB_DEVICE_Init+0x58>)
 8007806:	480e      	ldr	r0, [pc, #56]	; (8007840 <MX_USB_DEVICE_Init+0x54>)
 8007808:	f7fe fd2e 	bl	8006268 <USBD_RegisterClass>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007812:	f7f9 f9d7 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007816:	490c      	ldr	r1, [pc, #48]	; (8007848 <MX_USB_DEVICE_Init+0x5c>)
 8007818:	4809      	ldr	r0, [pc, #36]	; (8007840 <MX_USB_DEVICE_Init+0x54>)
 800781a:	f7fe fc1f 	bl	800605c <USBD_CDC_RegisterInterface>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007824:	f7f9 f9ce 	bl	8000bc4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007828:	4805      	ldr	r0, [pc, #20]	; (8007840 <MX_USB_DEVICE_Init+0x54>)
 800782a:	f7fe fd53 	bl	80062d4 <USBD_Start>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007834:	f7f9 f9c6 	bl	8000bc4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007838:	bf00      	nop
 800783a:	bd80      	pop	{r7, pc}
 800783c:	200000ac 	.word	0x200000ac
 8007840:	20000264 	.word	0x20000264
 8007844:	20000018 	.word	0x20000018
 8007848:	20000098 	.word	0x20000098

0800784c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007850:	2200      	movs	r2, #0
 8007852:	4905      	ldr	r1, [pc, #20]	; (8007868 <CDC_Init_FS+0x1c>)
 8007854:	4805      	ldr	r0, [pc, #20]	; (800786c <CDC_Init_FS+0x20>)
 8007856:	f7fe fc1b 	bl	8006090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800785a:	4905      	ldr	r1, [pc, #20]	; (8007870 <CDC_Init_FS+0x24>)
 800785c:	4803      	ldr	r0, [pc, #12]	; (800786c <CDC_Init_FS+0x20>)
 800785e:	f7fe fc39 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007862:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000d40 	.word	0x20000d40
 800786c:	20000264 	.word	0x20000264
 8007870:	20000540 	.word	0x20000540

08007874 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007878:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800787a:	4618      	mov	r0, r3
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	6039      	str	r1, [r7, #0]
 800788e:	71fb      	strb	r3, [r7, #7]
 8007890:	4613      	mov	r3, r2
 8007892:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007894:	79fb      	ldrb	r3, [r7, #7]
 8007896:	2b23      	cmp	r3, #35	; 0x23
 8007898:	d84a      	bhi.n	8007930 <CDC_Control_FS+0xac>
 800789a:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <CDC_Control_FS+0x1c>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	08007931 	.word	0x08007931
 80078a4:	08007931 	.word	0x08007931
 80078a8:	08007931 	.word	0x08007931
 80078ac:	08007931 	.word	0x08007931
 80078b0:	08007931 	.word	0x08007931
 80078b4:	08007931 	.word	0x08007931
 80078b8:	08007931 	.word	0x08007931
 80078bc:	08007931 	.word	0x08007931
 80078c0:	08007931 	.word	0x08007931
 80078c4:	08007931 	.word	0x08007931
 80078c8:	08007931 	.word	0x08007931
 80078cc:	08007931 	.word	0x08007931
 80078d0:	08007931 	.word	0x08007931
 80078d4:	08007931 	.word	0x08007931
 80078d8:	08007931 	.word	0x08007931
 80078dc:	08007931 	.word	0x08007931
 80078e0:	08007931 	.word	0x08007931
 80078e4:	08007931 	.word	0x08007931
 80078e8:	08007931 	.word	0x08007931
 80078ec:	08007931 	.word	0x08007931
 80078f0:	08007931 	.word	0x08007931
 80078f4:	08007931 	.word	0x08007931
 80078f8:	08007931 	.word	0x08007931
 80078fc:	08007931 	.word	0x08007931
 8007900:	08007931 	.word	0x08007931
 8007904:	08007931 	.word	0x08007931
 8007908:	08007931 	.word	0x08007931
 800790c:	08007931 	.word	0x08007931
 8007910:	08007931 	.word	0x08007931
 8007914:	08007931 	.word	0x08007931
 8007918:	08007931 	.word	0x08007931
 800791c:	08007931 	.word	0x08007931
 8007920:	08007931 	.word	0x08007931
 8007924:	08007931 	.word	0x08007931
 8007928:	08007931 	.word	0x08007931
 800792c:	08007931 	.word	0x08007931
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007930:	bf00      	nop
  }

  return (USBD_OK);
 8007932:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007934:	4618      	mov	r0, r3
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800794a:	6879      	ldr	r1, [r7, #4]
 800794c:	4805      	ldr	r0, [pc, #20]	; (8007964 <CDC_Receive_FS+0x24>)
 800794e:	f7fe fbc1 	bl	80060d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007952:	4804      	ldr	r0, [pc, #16]	; (8007964 <CDC_Receive_FS+0x24>)
 8007954:	f7fe fc22 	bl	800619c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007958:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000264 	.word	0x20000264

08007968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007978:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <CDC_Transmit_FS+0x48>)
 800797a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800797e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800798a:	2301      	movs	r3, #1
 800798c:	e00b      	b.n	80079a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800798e:	887b      	ldrh	r3, [r7, #2]
 8007990:	461a      	mov	r2, r3
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4806      	ldr	r0, [pc, #24]	; (80079b0 <CDC_Transmit_FS+0x48>)
 8007996:	f7fe fb7b 	bl	8006090 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800799a:	4805      	ldr	r0, [pc, #20]	; (80079b0 <CDC_Transmit_FS+0x48>)
 800799c:	f7fe fbb8 	bl	8006110 <USBD_CDC_TransmitPacket>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000264 	.word	0x20000264

080079b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2212      	movs	r2, #18
 80079e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079ea:	4b03      	ldr	r3, [pc, #12]	; (80079f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	200000c8 	.word	0x200000c8

080079fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200000dc 	.word	0x200000dc

08007a20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a36:	4808      	ldr	r0, [pc, #32]	; (8007a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a38:	f7ff fdf8 	bl	800762c <USBD_GetString>
 8007a3c:	e004      	b.n	8007a48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4904      	ldr	r1, [pc, #16]	; (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a42:	4805      	ldr	r0, [pc, #20]	; (8007a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a44:	f7ff fdf2 	bl	800762c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a48:	4b02      	ldr	r3, [pc, #8]	; (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20001540 	.word	0x20001540
 8007a58:	08008be4 	.word	0x08008be4

08007a5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	4904      	ldr	r1, [pc, #16]	; (8007a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a6c:	4804      	ldr	r0, [pc, #16]	; (8007a80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a6e:	f7ff fddd 	bl	800762c <USBD_GetString>
  return USBD_StrDesc;
 8007a72:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20001540 	.word	0x20001540
 8007a80:	08008bfc 	.word	0x08008bfc

08007a84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	221a      	movs	r2, #26
 8007a94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a96:	f000 f843 	bl	8007b20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a9a:	4b02      	ldr	r3, [pc, #8]	; (8007aa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200000e0 	.word	0x200000e0

08007aa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007abe:	4808      	ldr	r0, [pc, #32]	; (8007ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ac0:	f7ff fdb4 	bl	800762c <USBD_GetString>
 8007ac4:	e004      	b.n	8007ad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4904      	ldr	r1, [pc, #16]	; (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aca:	4805      	ldr	r0, [pc, #20]	; (8007ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007acc:	f7ff fdae 	bl	800762c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	; (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20001540 	.word	0x20001540
 8007ae0:	08008c10 	.word	0x08008c10

08007ae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4907      	ldr	r1, [pc, #28]	; (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007afa:	4808      	ldr	r0, [pc, #32]	; (8007b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007afc:	f7ff fd96 	bl	800762c <USBD_GetString>
 8007b00:	e004      	b.n	8007b0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4904      	ldr	r1, [pc, #16]	; (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b06:	4805      	ldr	r0, [pc, #20]	; (8007b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b08:	f7ff fd90 	bl	800762c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b0c:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20001540 	.word	0x20001540
 8007b1c:	08008c1c 	.word	0x08008c1c

08007b20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b26:	4b0f      	ldr	r3, [pc, #60]	; (8007b64 <Get_SerialNum+0x44>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b2c:	4b0e      	ldr	r3, [pc, #56]	; (8007b68 <Get_SerialNum+0x48>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b32:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <Get_SerialNum+0x4c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b46:	2208      	movs	r2, #8
 8007b48:	4909      	ldr	r1, [pc, #36]	; (8007b70 <Get_SerialNum+0x50>)
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f814 	bl	8007b78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b50:	2204      	movs	r2, #4
 8007b52:	4908      	ldr	r1, [pc, #32]	; (8007b74 <Get_SerialNum+0x54>)
 8007b54:	68b8      	ldr	r0, [r7, #8]
 8007b56:	f000 f80f 	bl	8007b78 <IntToUnicode>
  }
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	1fff7a10 	.word	0x1fff7a10
 8007b68:	1fff7a14 	.word	0x1fff7a14
 8007b6c:	1fff7a18 	.word	0x1fff7a18
 8007b70:	200000e2 	.word	0x200000e2
 8007b74:	200000f2 	.word	0x200000f2

08007b78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	4613      	mov	r3, r2
 8007b84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b86:	2300      	movs	r3, #0
 8007b88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	75fb      	strb	r3, [r7, #23]
 8007b8e:	e027      	b.n	8007be0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	0f1b      	lsrs	r3, r3, #28
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d80b      	bhi.n	8007bb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	0f1b      	lsrs	r3, r3, #28
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	005b      	lsls	r3, r3, #1
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	440b      	add	r3, r1
 8007ba8:	3230      	adds	r2, #48	; 0x30
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	701a      	strb	r2, [r3, #0]
 8007bae:	e00a      	b.n	8007bc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	0f1b      	lsrs	r3, r3, #28
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3237      	adds	r2, #55	; 0x37
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	011b      	lsls	r3, r3, #4
 8007bca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bcc:	7dfb      	ldrb	r3, [r7, #23]
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
 8007be0:	7dfa      	ldrb	r2, [r7, #23]
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d3d3      	bcc.n	8007b90 <IntToUnicode+0x18>
  }
}
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	371c      	adds	r7, #28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	; 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c00:	f107 0314 	add.w	r3, r7, #20
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	605a      	str	r2, [r3, #4]
 8007c0a:	609a      	str	r2, [r3, #8]
 8007c0c:	60da      	str	r2, [r3, #12]
 8007c0e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c18:	d13a      	bne.n	8007c90 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	6313      	str	r3, [r2, #48]	; 0x30
 8007c2a:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c44:	2303      	movs	r3, #3
 8007c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c48:	230a      	movs	r3, #10
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c4c:	f107 0314 	add.w	r3, r7, #20
 8007c50:	4619      	mov	r1, r3
 8007c52:	4812      	ldr	r0, [pc, #72]	; (8007c9c <HAL_PCD_MspInit+0xa4>)
 8007c54:	f7f9 faf6 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c58:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	4a0e      	ldr	r2, [pc, #56]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c62:	6353      	str	r3, [r2, #52]	; 0x34
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6c:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c72:	6453      	str	r3, [r2, #68]	; 0x44
 8007c74:	4b08      	ldr	r3, [pc, #32]	; (8007c98 <HAL_PCD_MspInit+0xa0>)
 8007c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7c:	60fb      	str	r3, [r7, #12]
 8007c7e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c80:	2200      	movs	r2, #0
 8007c82:	2100      	movs	r1, #0
 8007c84:	2043      	movs	r0, #67	; 0x43
 8007c86:	f7f9 faa6 	bl	80011d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c8a:	2043      	movs	r0, #67	; 0x43
 8007c8c:	f7f9 fabf 	bl	800120e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c90:	bf00      	nop
 8007c92:	3728      	adds	r7, #40	; 0x28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	40020000 	.word	0x40020000

08007ca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7fe fb59 	bl	800636e <USBD_LL_SetupStage>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007cd6:	78fa      	ldrb	r2, [r7, #3]
 8007cd8:	6879      	ldr	r1, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	440b      	add	r3, r1
 8007ce4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	78fb      	ldrb	r3, [r7, #3]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f7fe fb93 	bl	8006418 <USBD_LL_DataOutStage>
}
 8007cf2:	bf00      	nop
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b082      	sub	sp, #8
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	334c      	adds	r3, #76	; 0x4c
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	4619      	mov	r1, r3
 8007d22:	f7fe fc2c 	bl	800657e <USBD_LL_DataInStage>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fe fd60 	bl	8006802 <USBD_LL_SOF>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d52:	2301      	movs	r3, #1
 8007d54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d001      	beq.n	8007d62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d5e:	f7f8 ff31 	bl	8000bc4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fd0a 	bl	8006786 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fe fcb2 	bl	80066e2 <USBD_LL_Reset>
}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fd05 	bl	80067a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dae:	f043 0301 	orr.w	r3, r3, #1
 8007db2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dbc:	4b04      	ldr	r3, [pc, #16]	; (8007dd0 <HAL_PCD_SuspendCallback+0x48>)
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	4a03      	ldr	r2, [pc, #12]	; (8007dd0 <HAL_PCD_SuspendCallback+0x48>)
 8007dc2:	f043 0306 	orr.w	r3, r3, #6
 8007dc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	e000ed00 	.word	0xe000ed00

08007dd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fe fcf5 	bl	80067d2 <USBD_LL_Resume>
}
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e02:	78fa      	ldrb	r2, [r7, #3]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fd4d 	bl	80068a6 <USBD_LL_IsoOUTIncomplete>
}
 8007e0c:	bf00      	nop
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e26:	78fa      	ldrb	r2, [r7, #3]
 8007e28:	4611      	mov	r1, r2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fe fd09 	bl	8006842 <USBD_LL_IsoINIncomplete>
}
 8007e30:	bf00      	nop
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fd5f 	bl	800690a <USBD_LL_DevConnected>
}
 8007e4c:	bf00      	nop
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe fd5c 	bl	8006920 <USBD_LL_DevDisconnected>
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d13c      	bne.n	8007efa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e80:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <USBD_LL_Init+0x94>)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1e      	ldr	r2, [pc, #120]	; (8007f04 <USBD_LL_Init+0x94>)
 8007e8c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e90:	4b1c      	ldr	r3, [pc, #112]	; (8007f04 <USBD_LL_Init+0x94>)
 8007e92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e98:	4b1a      	ldr	r3, [pc, #104]	; (8007f04 <USBD_LL_Init+0x94>)
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ea4:	4b17      	ldr	r3, [pc, #92]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007eaa:	4b16      	ldr	r3, [pc, #88]	; (8007f04 <USBD_LL_Init+0x94>)
 8007eac:	2202      	movs	r2, #2
 8007eae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007eb0:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <USBD_LL_Init+0x94>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007eb6:	4b13      	ldr	r3, [pc, #76]	; (8007f04 <USBD_LL_Init+0x94>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ebc:	4b11      	ldr	r3, [pc, #68]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ec2:	4b10      	ldr	r3, [pc, #64]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ec8:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <USBD_LL_Init+0x94>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ece:	480d      	ldr	r0, [pc, #52]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ed0:	f7f9 fc9a 	bl	8001808 <HAL_PCD_Init>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007eda:	f7f8 fe73 	bl	8000bc4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ede:	2180      	movs	r1, #128	; 0x80
 8007ee0:	4808      	ldr	r0, [pc, #32]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ee2:	f7fa fef2 	bl	8002cca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ee6:	2240      	movs	r2, #64	; 0x40
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4806      	ldr	r0, [pc, #24]	; (8007f04 <USBD_LL_Init+0x94>)
 8007eec:	f7fa fea6 	bl	8002c3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ef0:	2280      	movs	r2, #128	; 0x80
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	4803      	ldr	r0, [pc, #12]	; (8007f04 <USBD_LL_Init+0x94>)
 8007ef6:	f7fa fea1 	bl	8002c3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	20001740 	.word	0x20001740

08007f08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7f9 fd8f 	bl	8001a42 <HAL_PCD_Start>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 f942 	bl	80081b4 <USBD_Get_USB_Status>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b084      	sub	sp, #16
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	4608      	mov	r0, r1
 8007f48:	4611      	mov	r1, r2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70bb      	strb	r3, [r7, #2]
 8007f54:	4613      	mov	r3, r2
 8007f56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f66:	78bb      	ldrb	r3, [r7, #2]
 8007f68:	883a      	ldrh	r2, [r7, #0]
 8007f6a:	78f9      	ldrb	r1, [r7, #3]
 8007f6c:	f7fa fa60 	bl	8002430 <HAL_PCD_EP_Open>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f91c 	bl	80081b4 <USBD_Get_USB_Status>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	460b      	mov	r3, r1
 8007f94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa4:	78fa      	ldrb	r2, [r7, #3]
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fa faa9 	bl	8002500 <HAL_PCD_EP_Close>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f8fd 	bl	80081b4 <USBD_Get_USB_Status>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fa fb81 	bl	80026ee <HAL_PCD_EP_SetStall>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f8de 	bl	80081b4 <USBD_Get_USB_Status>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	460b      	mov	r3, r1
 8008010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008016:	2300      	movs	r3, #0
 8008018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008020:	78fa      	ldrb	r2, [r7, #3]
 8008022:	4611      	mov	r1, r2
 8008024:	4618      	mov	r0, r3
 8008026:	f7fa fbc6 	bl	80027b6 <HAL_PCD_EP_ClrStall>
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	4618      	mov	r0, r3
 8008032:	f000 f8bf 	bl	80081b4 <USBD_Get_USB_Status>
 8008036:	4603      	mov	r3, r0
 8008038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803a:	7bbb      	ldrb	r3, [r7, #14]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008056:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da0b      	bge.n	8008078 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008066:	68f9      	ldr	r1, [r7, #12]
 8008068:	4613      	mov	r3, r2
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	333e      	adds	r3, #62	; 0x3e
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	e00b      	b.n	8008090 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800807e:	68f9      	ldr	r1, [r7, #12]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800808e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080b6:	78fa      	ldrb	r2, [r7, #3]
 80080b8:	4611      	mov	r1, r2
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fa f993 	bl	80023e6 <HAL_PCD_SetAddress>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c4:	7bfb      	ldrb	r3, [r7, #15]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 f874 	bl	80081b4 <USBD_Get_USB_Status>
 80080cc:	4603      	mov	r3, r0
 80080ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b086      	sub	sp, #24
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
 80080e6:	460b      	mov	r3, r1
 80080e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080f8:	7af9      	ldrb	r1, [r7, #11]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f7fa faac 	bl	800265a <HAL_PCD_EP_Transmit>
 8008102:	4603      	mov	r3, r0
 8008104:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	4618      	mov	r0, r3
 800810a:	f000 f853 	bl	80081b4 <USBD_Get_USB_Status>
 800810e:	4603      	mov	r3, r0
 8008110:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008112:	7dbb      	ldrb	r3, [r7, #22]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	607a      	str	r2, [r7, #4]
 8008126:	603b      	str	r3, [r7, #0]
 8008128:	460b      	mov	r3, r1
 800812a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800813a:	7af9      	ldrb	r1, [r7, #11]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f7fa fa28 	bl	8002594 <HAL_PCD_EP_Receive>
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f832 	bl	80081b4 <USBD_Get_USB_Status>
 8008150:	4603      	mov	r3, r0
 8008152:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008154:	7dbb      	ldrb	r3, [r7, #22]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	460b      	mov	r3, r1
 8008168:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008170:	78fa      	ldrb	r2, [r7, #3]
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f7fa fa58 	bl	800262a <HAL_PCD_EP_GetRxCount>
 800817a:	4603      	mov	r3, r0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800818c:	4b03      	ldr	r3, [pc, #12]	; (800819c <USBD_static_malloc+0x18>)
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	20001c4c 	.word	0x20001c4c

080081a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081be:	2300      	movs	r3, #0
 80081c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d817      	bhi.n	80081f8 <USBD_Get_USB_Status+0x44>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBD_Get_USB_Status+0x1c>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	080081e1 	.word	0x080081e1
 80081d4:	080081e7 	.word	0x080081e7
 80081d8:	080081ed 	.word	0x080081ed
 80081dc:	080081f3 	.word	0x080081f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081e0:	2300      	movs	r3, #0
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e00b      	b.n	80081fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e008      	b.n	80081fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	e005      	b.n	80081fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	73fb      	strb	r3, [r7, #15]
    break;
 80081f6:	e002      	b.n	80081fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
    break;
 80081fc:	bf00      	nop
  }
  return usb_status;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <__errno>:
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <__errno+0x8>)
 800820e:	6818      	ldr	r0, [r3, #0]
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	200000fc 	.word	0x200000fc

08008218 <__libc_init_array>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	4d0d      	ldr	r5, [pc, #52]	; (8008250 <__libc_init_array+0x38>)
 800821c:	4c0d      	ldr	r4, [pc, #52]	; (8008254 <__libc_init_array+0x3c>)
 800821e:	1b64      	subs	r4, r4, r5
 8008220:	10a4      	asrs	r4, r4, #2
 8008222:	2600      	movs	r6, #0
 8008224:	42a6      	cmp	r6, r4
 8008226:	d109      	bne.n	800823c <__libc_init_array+0x24>
 8008228:	4d0b      	ldr	r5, [pc, #44]	; (8008258 <__libc_init_array+0x40>)
 800822a:	4c0c      	ldr	r4, [pc, #48]	; (800825c <__libc_init_array+0x44>)
 800822c:	f000 fca2 	bl	8008b74 <_init>
 8008230:	1b64      	subs	r4, r4, r5
 8008232:	10a4      	asrs	r4, r4, #2
 8008234:	2600      	movs	r6, #0
 8008236:	42a6      	cmp	r6, r4
 8008238:	d105      	bne.n	8008246 <__libc_init_array+0x2e>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008240:	4798      	blx	r3
 8008242:	3601      	adds	r6, #1
 8008244:	e7ee      	b.n	8008224 <__libc_init_array+0xc>
 8008246:	f855 3b04 	ldr.w	r3, [r5], #4
 800824a:	4798      	blx	r3
 800824c:	3601      	adds	r6, #1
 800824e:	e7f2      	b.n	8008236 <__libc_init_array+0x1e>
 8008250:	08008c80 	.word	0x08008c80
 8008254:	08008c80 	.word	0x08008c80
 8008258:	08008c80 	.word	0x08008c80
 800825c:	08008c84 	.word	0x08008c84

08008260 <memset>:
 8008260:	4402      	add	r2, r0
 8008262:	4603      	mov	r3, r0
 8008264:	4293      	cmp	r3, r2
 8008266:	d100      	bne.n	800826a <memset+0xa>
 8008268:	4770      	bx	lr
 800826a:	f803 1b01 	strb.w	r1, [r3], #1
 800826e:	e7f9      	b.n	8008264 <memset+0x4>

08008270 <sniprintf>:
 8008270:	b40c      	push	{r2, r3}
 8008272:	b530      	push	{r4, r5, lr}
 8008274:	4b17      	ldr	r3, [pc, #92]	; (80082d4 <sniprintf+0x64>)
 8008276:	1e0c      	subs	r4, r1, #0
 8008278:	681d      	ldr	r5, [r3, #0]
 800827a:	b09d      	sub	sp, #116	; 0x74
 800827c:	da08      	bge.n	8008290 <sniprintf+0x20>
 800827e:	238b      	movs	r3, #139	; 0x8b
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	b01d      	add	sp, #116	; 0x74
 8008288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800828c:	b002      	add	sp, #8
 800828e:	4770      	bx	lr
 8008290:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008294:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008298:	bf14      	ite	ne
 800829a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800829e:	4623      	moveq	r3, r4
 80082a0:	9304      	str	r3, [sp, #16]
 80082a2:	9307      	str	r3, [sp, #28]
 80082a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80082a8:	9002      	str	r0, [sp, #8]
 80082aa:	9006      	str	r0, [sp, #24]
 80082ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80082b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80082b2:	ab21      	add	r3, sp, #132	; 0x84
 80082b4:	a902      	add	r1, sp, #8
 80082b6:	4628      	mov	r0, r5
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	f000 f869 	bl	8008390 <_svfiprintf_r>
 80082be:	1c43      	adds	r3, r0, #1
 80082c0:	bfbc      	itt	lt
 80082c2:	238b      	movlt	r3, #139	; 0x8b
 80082c4:	602b      	strlt	r3, [r5, #0]
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	d0dd      	beq.n	8008286 <sniprintf+0x16>
 80082ca:	9b02      	ldr	r3, [sp, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	701a      	strb	r2, [r3, #0]
 80082d0:	e7d9      	b.n	8008286 <sniprintf+0x16>
 80082d2:	bf00      	nop
 80082d4:	200000fc 	.word	0x200000fc

080082d8 <__ssputs_r>:
 80082d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	688e      	ldr	r6, [r1, #8]
 80082de:	429e      	cmp	r6, r3
 80082e0:	4682      	mov	sl, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	4690      	mov	r8, r2
 80082e6:	461f      	mov	r7, r3
 80082e8:	d838      	bhi.n	800835c <__ssputs_r+0x84>
 80082ea:	898a      	ldrh	r2, [r1, #12]
 80082ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082f0:	d032      	beq.n	8008358 <__ssputs_r+0x80>
 80082f2:	6825      	ldr	r5, [r4, #0]
 80082f4:	6909      	ldr	r1, [r1, #16]
 80082f6:	eba5 0901 	sub.w	r9, r5, r1
 80082fa:	6965      	ldr	r5, [r4, #20]
 80082fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008304:	3301      	adds	r3, #1
 8008306:	444b      	add	r3, r9
 8008308:	106d      	asrs	r5, r5, #1
 800830a:	429d      	cmp	r5, r3
 800830c:	bf38      	it	cc
 800830e:	461d      	movcc	r5, r3
 8008310:	0553      	lsls	r3, r2, #21
 8008312:	d531      	bpl.n	8008378 <__ssputs_r+0xa0>
 8008314:	4629      	mov	r1, r5
 8008316:	f000 fb63 	bl	80089e0 <_malloc_r>
 800831a:	4606      	mov	r6, r0
 800831c:	b950      	cbnz	r0, 8008334 <__ssputs_r+0x5c>
 800831e:	230c      	movs	r3, #12
 8008320:	f8ca 3000 	str.w	r3, [sl]
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	f04f 30ff 	mov.w	r0, #4294967295
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	6921      	ldr	r1, [r4, #16]
 8008336:	464a      	mov	r2, r9
 8008338:	f000 fabe 	bl	80088b8 <memcpy>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	6126      	str	r6, [r4, #16]
 800834a:	6165      	str	r5, [r4, #20]
 800834c:	444e      	add	r6, r9
 800834e:	eba5 0509 	sub.w	r5, r5, r9
 8008352:	6026      	str	r6, [r4, #0]
 8008354:	60a5      	str	r5, [r4, #8]
 8008356:	463e      	mov	r6, r7
 8008358:	42be      	cmp	r6, r7
 800835a:	d900      	bls.n	800835e <__ssputs_r+0x86>
 800835c:	463e      	mov	r6, r7
 800835e:	6820      	ldr	r0, [r4, #0]
 8008360:	4632      	mov	r2, r6
 8008362:	4641      	mov	r1, r8
 8008364:	f000 fab6 	bl	80088d4 <memmove>
 8008368:	68a3      	ldr	r3, [r4, #8]
 800836a:	1b9b      	subs	r3, r3, r6
 800836c:	60a3      	str	r3, [r4, #8]
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	4433      	add	r3, r6
 8008372:	6023      	str	r3, [r4, #0]
 8008374:	2000      	movs	r0, #0
 8008376:	e7db      	b.n	8008330 <__ssputs_r+0x58>
 8008378:	462a      	mov	r2, r5
 800837a:	f000 fba5 	bl	8008ac8 <_realloc_r>
 800837e:	4606      	mov	r6, r0
 8008380:	2800      	cmp	r0, #0
 8008382:	d1e1      	bne.n	8008348 <__ssputs_r+0x70>
 8008384:	6921      	ldr	r1, [r4, #16]
 8008386:	4650      	mov	r0, sl
 8008388:	f000 fabe 	bl	8008908 <_free_r>
 800838c:	e7c7      	b.n	800831e <__ssputs_r+0x46>
	...

08008390 <_svfiprintf_r>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	4698      	mov	r8, r3
 8008396:	898b      	ldrh	r3, [r1, #12]
 8008398:	061b      	lsls	r3, r3, #24
 800839a:	b09d      	sub	sp, #116	; 0x74
 800839c:	4607      	mov	r7, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	4614      	mov	r4, r2
 80083a2:	d50e      	bpl.n	80083c2 <_svfiprintf_r+0x32>
 80083a4:	690b      	ldr	r3, [r1, #16]
 80083a6:	b963      	cbnz	r3, 80083c2 <_svfiprintf_r+0x32>
 80083a8:	2140      	movs	r1, #64	; 0x40
 80083aa:	f000 fb19 	bl	80089e0 <_malloc_r>
 80083ae:	6028      	str	r0, [r5, #0]
 80083b0:	6128      	str	r0, [r5, #16]
 80083b2:	b920      	cbnz	r0, 80083be <_svfiprintf_r+0x2e>
 80083b4:	230c      	movs	r3, #12
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	f04f 30ff 	mov.w	r0, #4294967295
 80083bc:	e0d1      	b.n	8008562 <_svfiprintf_r+0x1d2>
 80083be:	2340      	movs	r3, #64	; 0x40
 80083c0:	616b      	str	r3, [r5, #20]
 80083c2:	2300      	movs	r3, #0
 80083c4:	9309      	str	r3, [sp, #36]	; 0x24
 80083c6:	2320      	movs	r3, #32
 80083c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80083d0:	2330      	movs	r3, #48	; 0x30
 80083d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800857c <_svfiprintf_r+0x1ec>
 80083d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083da:	f04f 0901 	mov.w	r9, #1
 80083de:	4623      	mov	r3, r4
 80083e0:	469a      	mov	sl, r3
 80083e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e6:	b10a      	cbz	r2, 80083ec <_svfiprintf_r+0x5c>
 80083e8:	2a25      	cmp	r2, #37	; 0x25
 80083ea:	d1f9      	bne.n	80083e0 <_svfiprintf_r+0x50>
 80083ec:	ebba 0b04 	subs.w	fp, sl, r4
 80083f0:	d00b      	beq.n	800840a <_svfiprintf_r+0x7a>
 80083f2:	465b      	mov	r3, fp
 80083f4:	4622      	mov	r2, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff ff6d 	bl	80082d8 <__ssputs_r>
 80083fe:	3001      	adds	r0, #1
 8008400:	f000 80aa 	beq.w	8008558 <_svfiprintf_r+0x1c8>
 8008404:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008406:	445a      	add	r2, fp
 8008408:	9209      	str	r2, [sp, #36]	; 0x24
 800840a:	f89a 3000 	ldrb.w	r3, [sl]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80a2 	beq.w	8008558 <_svfiprintf_r+0x1c8>
 8008414:	2300      	movs	r3, #0
 8008416:	f04f 32ff 	mov.w	r2, #4294967295
 800841a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800841e:	f10a 0a01 	add.w	sl, sl, #1
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800842a:	931a      	str	r3, [sp, #104]	; 0x68
 800842c:	4654      	mov	r4, sl
 800842e:	2205      	movs	r2, #5
 8008430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008434:	4851      	ldr	r0, [pc, #324]	; (800857c <_svfiprintf_r+0x1ec>)
 8008436:	f7f7 fedb 	bl	80001f0 <memchr>
 800843a:	9a04      	ldr	r2, [sp, #16]
 800843c:	b9d8      	cbnz	r0, 8008476 <_svfiprintf_r+0xe6>
 800843e:	06d0      	lsls	r0, r2, #27
 8008440:	bf44      	itt	mi
 8008442:	2320      	movmi	r3, #32
 8008444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008448:	0711      	lsls	r1, r2, #28
 800844a:	bf44      	itt	mi
 800844c:	232b      	movmi	r3, #43	; 0x2b
 800844e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008452:	f89a 3000 	ldrb.w	r3, [sl]
 8008456:	2b2a      	cmp	r3, #42	; 0x2a
 8008458:	d015      	beq.n	8008486 <_svfiprintf_r+0xf6>
 800845a:	9a07      	ldr	r2, [sp, #28]
 800845c:	4654      	mov	r4, sl
 800845e:	2000      	movs	r0, #0
 8008460:	f04f 0c0a 	mov.w	ip, #10
 8008464:	4621      	mov	r1, r4
 8008466:	f811 3b01 	ldrb.w	r3, [r1], #1
 800846a:	3b30      	subs	r3, #48	; 0x30
 800846c:	2b09      	cmp	r3, #9
 800846e:	d94e      	bls.n	800850e <_svfiprintf_r+0x17e>
 8008470:	b1b0      	cbz	r0, 80084a0 <_svfiprintf_r+0x110>
 8008472:	9207      	str	r2, [sp, #28]
 8008474:	e014      	b.n	80084a0 <_svfiprintf_r+0x110>
 8008476:	eba0 0308 	sub.w	r3, r0, r8
 800847a:	fa09 f303 	lsl.w	r3, r9, r3
 800847e:	4313      	orrs	r3, r2
 8008480:	9304      	str	r3, [sp, #16]
 8008482:	46a2      	mov	sl, r4
 8008484:	e7d2      	b.n	800842c <_svfiprintf_r+0x9c>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	1d19      	adds	r1, r3, #4
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	9103      	str	r1, [sp, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfbb      	ittet	lt
 8008492:	425b      	neglt	r3, r3
 8008494:	f042 0202 	orrlt.w	r2, r2, #2
 8008498:	9307      	strge	r3, [sp, #28]
 800849a:	9307      	strlt	r3, [sp, #28]
 800849c:	bfb8      	it	lt
 800849e:	9204      	strlt	r2, [sp, #16]
 80084a0:	7823      	ldrb	r3, [r4, #0]
 80084a2:	2b2e      	cmp	r3, #46	; 0x2e
 80084a4:	d10c      	bne.n	80084c0 <_svfiprintf_r+0x130>
 80084a6:	7863      	ldrb	r3, [r4, #1]
 80084a8:	2b2a      	cmp	r3, #42	; 0x2a
 80084aa:	d135      	bne.n	8008518 <_svfiprintf_r+0x188>
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	1d1a      	adds	r2, r3, #4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	9203      	str	r2, [sp, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bfb8      	it	lt
 80084b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80084bc:	3402      	adds	r4, #2
 80084be:	9305      	str	r3, [sp, #20]
 80084c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800858c <_svfiprintf_r+0x1fc>
 80084c4:	7821      	ldrb	r1, [r4, #0]
 80084c6:	2203      	movs	r2, #3
 80084c8:	4650      	mov	r0, sl
 80084ca:	f7f7 fe91 	bl	80001f0 <memchr>
 80084ce:	b140      	cbz	r0, 80084e2 <_svfiprintf_r+0x152>
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	eba0 000a 	sub.w	r0, r0, sl
 80084d6:	fa03 f000 	lsl.w	r0, r3, r0
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	4303      	orrs	r3, r0
 80084de:	3401      	adds	r4, #1
 80084e0:	9304      	str	r3, [sp, #16]
 80084e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e6:	4826      	ldr	r0, [pc, #152]	; (8008580 <_svfiprintf_r+0x1f0>)
 80084e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084ec:	2206      	movs	r2, #6
 80084ee:	f7f7 fe7f 	bl	80001f0 <memchr>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	d038      	beq.n	8008568 <_svfiprintf_r+0x1d8>
 80084f6:	4b23      	ldr	r3, [pc, #140]	; (8008584 <_svfiprintf_r+0x1f4>)
 80084f8:	bb1b      	cbnz	r3, 8008542 <_svfiprintf_r+0x1b2>
 80084fa:	9b03      	ldr	r3, [sp, #12]
 80084fc:	3307      	adds	r3, #7
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	3308      	adds	r3, #8
 8008504:	9303      	str	r3, [sp, #12]
 8008506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008508:	4433      	add	r3, r6
 800850a:	9309      	str	r3, [sp, #36]	; 0x24
 800850c:	e767      	b.n	80083de <_svfiprintf_r+0x4e>
 800850e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008512:	460c      	mov	r4, r1
 8008514:	2001      	movs	r0, #1
 8008516:	e7a5      	b.n	8008464 <_svfiprintf_r+0xd4>
 8008518:	2300      	movs	r3, #0
 800851a:	3401      	adds	r4, #1
 800851c:	9305      	str	r3, [sp, #20]
 800851e:	4619      	mov	r1, r3
 8008520:	f04f 0c0a 	mov.w	ip, #10
 8008524:	4620      	mov	r0, r4
 8008526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800852a:	3a30      	subs	r2, #48	; 0x30
 800852c:	2a09      	cmp	r2, #9
 800852e:	d903      	bls.n	8008538 <_svfiprintf_r+0x1a8>
 8008530:	2b00      	cmp	r3, #0
 8008532:	d0c5      	beq.n	80084c0 <_svfiprintf_r+0x130>
 8008534:	9105      	str	r1, [sp, #20]
 8008536:	e7c3      	b.n	80084c0 <_svfiprintf_r+0x130>
 8008538:	fb0c 2101 	mla	r1, ip, r1, r2
 800853c:	4604      	mov	r4, r0
 800853e:	2301      	movs	r3, #1
 8008540:	e7f0      	b.n	8008524 <_svfiprintf_r+0x194>
 8008542:	ab03      	add	r3, sp, #12
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	462a      	mov	r2, r5
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <_svfiprintf_r+0x1f8>)
 800854a:	a904      	add	r1, sp, #16
 800854c:	4638      	mov	r0, r7
 800854e:	f3af 8000 	nop.w
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	4606      	mov	r6, r0
 8008556:	d1d6      	bne.n	8008506 <_svfiprintf_r+0x176>
 8008558:	89ab      	ldrh	r3, [r5, #12]
 800855a:	065b      	lsls	r3, r3, #25
 800855c:	f53f af2c 	bmi.w	80083b8 <_svfiprintf_r+0x28>
 8008560:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008562:	b01d      	add	sp, #116	; 0x74
 8008564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008568:	ab03      	add	r3, sp, #12
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	462a      	mov	r2, r5
 800856e:	4b06      	ldr	r3, [pc, #24]	; (8008588 <_svfiprintf_r+0x1f8>)
 8008570:	a904      	add	r1, sp, #16
 8008572:	4638      	mov	r0, r7
 8008574:	f000 f87a 	bl	800866c <_printf_i>
 8008578:	e7eb      	b.n	8008552 <_svfiprintf_r+0x1c2>
 800857a:	bf00      	nop
 800857c:	08008c44 	.word	0x08008c44
 8008580:	08008c4e 	.word	0x08008c4e
 8008584:	00000000 	.word	0x00000000
 8008588:	080082d9 	.word	0x080082d9
 800858c:	08008c4a 	.word	0x08008c4a

08008590 <_printf_common>:
 8008590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008594:	4616      	mov	r6, r2
 8008596:	4699      	mov	r9, r3
 8008598:	688a      	ldr	r2, [r1, #8]
 800859a:	690b      	ldr	r3, [r1, #16]
 800859c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bfb8      	it	lt
 80085a4:	4613      	movlt	r3, r2
 80085a6:	6033      	str	r3, [r6, #0]
 80085a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085ac:	4607      	mov	r7, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	b10a      	cbz	r2, 80085b6 <_printf_common+0x26>
 80085b2:	3301      	adds	r3, #1
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	0699      	lsls	r1, r3, #26
 80085ba:	bf42      	ittt	mi
 80085bc:	6833      	ldrmi	r3, [r6, #0]
 80085be:	3302      	addmi	r3, #2
 80085c0:	6033      	strmi	r3, [r6, #0]
 80085c2:	6825      	ldr	r5, [r4, #0]
 80085c4:	f015 0506 	ands.w	r5, r5, #6
 80085c8:	d106      	bne.n	80085d8 <_printf_common+0x48>
 80085ca:	f104 0a19 	add.w	sl, r4, #25
 80085ce:	68e3      	ldr	r3, [r4, #12]
 80085d0:	6832      	ldr	r2, [r6, #0]
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dc26      	bgt.n	8008626 <_printf_common+0x96>
 80085d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085dc:	1e13      	subs	r3, r2, #0
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	bf18      	it	ne
 80085e2:	2301      	movne	r3, #1
 80085e4:	0692      	lsls	r2, r2, #26
 80085e6:	d42b      	bmi.n	8008640 <_printf_common+0xb0>
 80085e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085ec:	4649      	mov	r1, r9
 80085ee:	4638      	mov	r0, r7
 80085f0:	47c0      	blx	r8
 80085f2:	3001      	adds	r0, #1
 80085f4:	d01e      	beq.n	8008634 <_printf_common+0xa4>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	68e5      	ldr	r5, [r4, #12]
 80085fa:	6832      	ldr	r2, [r6, #0]
 80085fc:	f003 0306 	and.w	r3, r3, #6
 8008600:	2b04      	cmp	r3, #4
 8008602:	bf08      	it	eq
 8008604:	1aad      	subeq	r5, r5, r2
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	6922      	ldr	r2, [r4, #16]
 800860a:	bf0c      	ite	eq
 800860c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008610:	2500      	movne	r5, #0
 8008612:	4293      	cmp	r3, r2
 8008614:	bfc4      	itt	gt
 8008616:	1a9b      	subgt	r3, r3, r2
 8008618:	18ed      	addgt	r5, r5, r3
 800861a:	2600      	movs	r6, #0
 800861c:	341a      	adds	r4, #26
 800861e:	42b5      	cmp	r5, r6
 8008620:	d11a      	bne.n	8008658 <_printf_common+0xc8>
 8008622:	2000      	movs	r0, #0
 8008624:	e008      	b.n	8008638 <_printf_common+0xa8>
 8008626:	2301      	movs	r3, #1
 8008628:	4652      	mov	r2, sl
 800862a:	4649      	mov	r1, r9
 800862c:	4638      	mov	r0, r7
 800862e:	47c0      	blx	r8
 8008630:	3001      	adds	r0, #1
 8008632:	d103      	bne.n	800863c <_printf_common+0xac>
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863c:	3501      	adds	r5, #1
 800863e:	e7c6      	b.n	80085ce <_printf_common+0x3e>
 8008640:	18e1      	adds	r1, r4, r3
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	2030      	movs	r0, #48	; 0x30
 8008646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800864a:	4422      	add	r2, r4
 800864c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008650:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008654:	3302      	adds	r3, #2
 8008656:	e7c7      	b.n	80085e8 <_printf_common+0x58>
 8008658:	2301      	movs	r3, #1
 800865a:	4622      	mov	r2, r4
 800865c:	4649      	mov	r1, r9
 800865e:	4638      	mov	r0, r7
 8008660:	47c0      	blx	r8
 8008662:	3001      	adds	r0, #1
 8008664:	d0e6      	beq.n	8008634 <_printf_common+0xa4>
 8008666:	3601      	adds	r6, #1
 8008668:	e7d9      	b.n	800861e <_printf_common+0x8e>
	...

0800866c <_printf_i>:
 800866c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	7e0f      	ldrb	r7, [r1, #24]
 8008672:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008674:	2f78      	cmp	r7, #120	; 0x78
 8008676:	4691      	mov	r9, r2
 8008678:	4680      	mov	r8, r0
 800867a:	460c      	mov	r4, r1
 800867c:	469a      	mov	sl, r3
 800867e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008682:	d807      	bhi.n	8008694 <_printf_i+0x28>
 8008684:	2f62      	cmp	r7, #98	; 0x62
 8008686:	d80a      	bhi.n	800869e <_printf_i+0x32>
 8008688:	2f00      	cmp	r7, #0
 800868a:	f000 80d8 	beq.w	800883e <_printf_i+0x1d2>
 800868e:	2f58      	cmp	r7, #88	; 0x58
 8008690:	f000 80a3 	beq.w	80087da <_printf_i+0x16e>
 8008694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800869c:	e03a      	b.n	8008714 <_printf_i+0xa8>
 800869e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086a2:	2b15      	cmp	r3, #21
 80086a4:	d8f6      	bhi.n	8008694 <_printf_i+0x28>
 80086a6:	a101      	add	r1, pc, #4	; (adr r1, 80086ac <_printf_i+0x40>)
 80086a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086ac:	08008705 	.word	0x08008705
 80086b0:	08008719 	.word	0x08008719
 80086b4:	08008695 	.word	0x08008695
 80086b8:	08008695 	.word	0x08008695
 80086bc:	08008695 	.word	0x08008695
 80086c0:	08008695 	.word	0x08008695
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008695 	.word	0x08008695
 80086cc:	08008695 	.word	0x08008695
 80086d0:	08008695 	.word	0x08008695
 80086d4:	08008695 	.word	0x08008695
 80086d8:	08008825 	.word	0x08008825
 80086dc:	08008749 	.word	0x08008749
 80086e0:	08008807 	.word	0x08008807
 80086e4:	08008695 	.word	0x08008695
 80086e8:	08008695 	.word	0x08008695
 80086ec:	08008847 	.word	0x08008847
 80086f0:	08008695 	.word	0x08008695
 80086f4:	08008749 	.word	0x08008749
 80086f8:	08008695 	.word	0x08008695
 80086fc:	08008695 	.word	0x08008695
 8008700:	0800880f 	.word	0x0800880f
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	1d1a      	adds	r2, r3, #4
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	602a      	str	r2, [r5, #0]
 800870c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008714:	2301      	movs	r3, #1
 8008716:	e0a3      	b.n	8008860 <_printf_i+0x1f4>
 8008718:	6820      	ldr	r0, [r4, #0]
 800871a:	6829      	ldr	r1, [r5, #0]
 800871c:	0606      	lsls	r6, r0, #24
 800871e:	f101 0304 	add.w	r3, r1, #4
 8008722:	d50a      	bpl.n	800873a <_printf_i+0xce>
 8008724:	680e      	ldr	r6, [r1, #0]
 8008726:	602b      	str	r3, [r5, #0]
 8008728:	2e00      	cmp	r6, #0
 800872a:	da03      	bge.n	8008734 <_printf_i+0xc8>
 800872c:	232d      	movs	r3, #45	; 0x2d
 800872e:	4276      	negs	r6, r6
 8008730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008734:	485e      	ldr	r0, [pc, #376]	; (80088b0 <_printf_i+0x244>)
 8008736:	230a      	movs	r3, #10
 8008738:	e019      	b.n	800876e <_printf_i+0x102>
 800873a:	680e      	ldr	r6, [r1, #0]
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008742:	bf18      	it	ne
 8008744:	b236      	sxthne	r6, r6
 8008746:	e7ef      	b.n	8008728 <_printf_i+0xbc>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	1d19      	adds	r1, r3, #4
 800874e:	6029      	str	r1, [r5, #0]
 8008750:	0601      	lsls	r1, r0, #24
 8008752:	d501      	bpl.n	8008758 <_printf_i+0xec>
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	e002      	b.n	800875e <_printf_i+0xf2>
 8008758:	0646      	lsls	r6, r0, #25
 800875a:	d5fb      	bpl.n	8008754 <_printf_i+0xe8>
 800875c:	881e      	ldrh	r6, [r3, #0]
 800875e:	4854      	ldr	r0, [pc, #336]	; (80088b0 <_printf_i+0x244>)
 8008760:	2f6f      	cmp	r7, #111	; 0x6f
 8008762:	bf0c      	ite	eq
 8008764:	2308      	moveq	r3, #8
 8008766:	230a      	movne	r3, #10
 8008768:	2100      	movs	r1, #0
 800876a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800876e:	6865      	ldr	r5, [r4, #4]
 8008770:	60a5      	str	r5, [r4, #8]
 8008772:	2d00      	cmp	r5, #0
 8008774:	bfa2      	ittt	ge
 8008776:	6821      	ldrge	r1, [r4, #0]
 8008778:	f021 0104 	bicge.w	r1, r1, #4
 800877c:	6021      	strge	r1, [r4, #0]
 800877e:	b90e      	cbnz	r6, 8008784 <_printf_i+0x118>
 8008780:	2d00      	cmp	r5, #0
 8008782:	d04d      	beq.n	8008820 <_printf_i+0x1b4>
 8008784:	4615      	mov	r5, r2
 8008786:	fbb6 f1f3 	udiv	r1, r6, r3
 800878a:	fb03 6711 	mls	r7, r3, r1, r6
 800878e:	5dc7      	ldrb	r7, [r0, r7]
 8008790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008794:	4637      	mov	r7, r6
 8008796:	42bb      	cmp	r3, r7
 8008798:	460e      	mov	r6, r1
 800879a:	d9f4      	bls.n	8008786 <_printf_i+0x11a>
 800879c:	2b08      	cmp	r3, #8
 800879e:	d10b      	bne.n	80087b8 <_printf_i+0x14c>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07de      	lsls	r6, r3, #31
 80087a4:	d508      	bpl.n	80087b8 <_printf_i+0x14c>
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	4299      	cmp	r1, r3
 80087ac:	bfde      	ittt	le
 80087ae:	2330      	movle	r3, #48	; 0x30
 80087b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087b8:	1b52      	subs	r2, r2, r5
 80087ba:	6122      	str	r2, [r4, #16]
 80087bc:	f8cd a000 	str.w	sl, [sp]
 80087c0:	464b      	mov	r3, r9
 80087c2:	aa03      	add	r2, sp, #12
 80087c4:	4621      	mov	r1, r4
 80087c6:	4640      	mov	r0, r8
 80087c8:	f7ff fee2 	bl	8008590 <_printf_common>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d14c      	bne.n	800886a <_printf_i+0x1fe>
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	b004      	add	sp, #16
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087da:	4835      	ldr	r0, [pc, #212]	; (80088b0 <_printf_i+0x244>)
 80087dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80087e0:	6829      	ldr	r1, [r5, #0]
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80087e8:	6029      	str	r1, [r5, #0]
 80087ea:	061d      	lsls	r5, r3, #24
 80087ec:	d514      	bpl.n	8008818 <_printf_i+0x1ac>
 80087ee:	07df      	lsls	r7, r3, #31
 80087f0:	bf44      	itt	mi
 80087f2:	f043 0320 	orrmi.w	r3, r3, #32
 80087f6:	6023      	strmi	r3, [r4, #0]
 80087f8:	b91e      	cbnz	r6, 8008802 <_printf_i+0x196>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	f023 0320 	bic.w	r3, r3, #32
 8008800:	6023      	str	r3, [r4, #0]
 8008802:	2310      	movs	r3, #16
 8008804:	e7b0      	b.n	8008768 <_printf_i+0xfc>
 8008806:	6823      	ldr	r3, [r4, #0]
 8008808:	f043 0320 	orr.w	r3, r3, #32
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	2378      	movs	r3, #120	; 0x78
 8008810:	4828      	ldr	r0, [pc, #160]	; (80088b4 <_printf_i+0x248>)
 8008812:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008816:	e7e3      	b.n	80087e0 <_printf_i+0x174>
 8008818:	0659      	lsls	r1, r3, #25
 800881a:	bf48      	it	mi
 800881c:	b2b6      	uxthmi	r6, r6
 800881e:	e7e6      	b.n	80087ee <_printf_i+0x182>
 8008820:	4615      	mov	r5, r2
 8008822:	e7bb      	b.n	800879c <_printf_i+0x130>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	6826      	ldr	r6, [r4, #0]
 8008828:	6961      	ldr	r1, [r4, #20]
 800882a:	1d18      	adds	r0, r3, #4
 800882c:	6028      	str	r0, [r5, #0]
 800882e:	0635      	lsls	r5, r6, #24
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	d501      	bpl.n	8008838 <_printf_i+0x1cc>
 8008834:	6019      	str	r1, [r3, #0]
 8008836:	e002      	b.n	800883e <_printf_i+0x1d2>
 8008838:	0670      	lsls	r0, r6, #25
 800883a:	d5fb      	bpl.n	8008834 <_printf_i+0x1c8>
 800883c:	8019      	strh	r1, [r3, #0]
 800883e:	2300      	movs	r3, #0
 8008840:	6123      	str	r3, [r4, #16]
 8008842:	4615      	mov	r5, r2
 8008844:	e7ba      	b.n	80087bc <_printf_i+0x150>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	1d1a      	adds	r2, r3, #4
 800884a:	602a      	str	r2, [r5, #0]
 800884c:	681d      	ldr	r5, [r3, #0]
 800884e:	6862      	ldr	r2, [r4, #4]
 8008850:	2100      	movs	r1, #0
 8008852:	4628      	mov	r0, r5
 8008854:	f7f7 fccc 	bl	80001f0 <memchr>
 8008858:	b108      	cbz	r0, 800885e <_printf_i+0x1f2>
 800885a:	1b40      	subs	r0, r0, r5
 800885c:	6060      	str	r0, [r4, #4]
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	6123      	str	r3, [r4, #16]
 8008862:	2300      	movs	r3, #0
 8008864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008868:	e7a8      	b.n	80087bc <_printf_i+0x150>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	462a      	mov	r2, r5
 800886e:	4649      	mov	r1, r9
 8008870:	4640      	mov	r0, r8
 8008872:	47d0      	blx	sl
 8008874:	3001      	adds	r0, #1
 8008876:	d0ab      	beq.n	80087d0 <_printf_i+0x164>
 8008878:	6823      	ldr	r3, [r4, #0]
 800887a:	079b      	lsls	r3, r3, #30
 800887c:	d413      	bmi.n	80088a6 <_printf_i+0x23a>
 800887e:	68e0      	ldr	r0, [r4, #12]
 8008880:	9b03      	ldr	r3, [sp, #12]
 8008882:	4298      	cmp	r0, r3
 8008884:	bfb8      	it	lt
 8008886:	4618      	movlt	r0, r3
 8008888:	e7a4      	b.n	80087d4 <_printf_i+0x168>
 800888a:	2301      	movs	r3, #1
 800888c:	4632      	mov	r2, r6
 800888e:	4649      	mov	r1, r9
 8008890:	4640      	mov	r0, r8
 8008892:	47d0      	blx	sl
 8008894:	3001      	adds	r0, #1
 8008896:	d09b      	beq.n	80087d0 <_printf_i+0x164>
 8008898:	3501      	adds	r5, #1
 800889a:	68e3      	ldr	r3, [r4, #12]
 800889c:	9903      	ldr	r1, [sp, #12]
 800889e:	1a5b      	subs	r3, r3, r1
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	dcf2      	bgt.n	800888a <_printf_i+0x21e>
 80088a4:	e7eb      	b.n	800887e <_printf_i+0x212>
 80088a6:	2500      	movs	r5, #0
 80088a8:	f104 0619 	add.w	r6, r4, #25
 80088ac:	e7f5      	b.n	800889a <_printf_i+0x22e>
 80088ae:	bf00      	nop
 80088b0:	08008c55 	.word	0x08008c55
 80088b4:	08008c66 	.word	0x08008c66

080088b8 <memcpy>:
 80088b8:	440a      	add	r2, r1
 80088ba:	4291      	cmp	r1, r2
 80088bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80088c0:	d100      	bne.n	80088c4 <memcpy+0xc>
 80088c2:	4770      	bx	lr
 80088c4:	b510      	push	{r4, lr}
 80088c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088ce:	4291      	cmp	r1, r2
 80088d0:	d1f9      	bne.n	80088c6 <memcpy+0xe>
 80088d2:	bd10      	pop	{r4, pc}

080088d4 <memmove>:
 80088d4:	4288      	cmp	r0, r1
 80088d6:	b510      	push	{r4, lr}
 80088d8:	eb01 0402 	add.w	r4, r1, r2
 80088dc:	d902      	bls.n	80088e4 <memmove+0x10>
 80088de:	4284      	cmp	r4, r0
 80088e0:	4623      	mov	r3, r4
 80088e2:	d807      	bhi.n	80088f4 <memmove+0x20>
 80088e4:	1e43      	subs	r3, r0, #1
 80088e6:	42a1      	cmp	r1, r4
 80088e8:	d008      	beq.n	80088fc <memmove+0x28>
 80088ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088f2:	e7f8      	b.n	80088e6 <memmove+0x12>
 80088f4:	4402      	add	r2, r0
 80088f6:	4601      	mov	r1, r0
 80088f8:	428a      	cmp	r2, r1
 80088fa:	d100      	bne.n	80088fe <memmove+0x2a>
 80088fc:	bd10      	pop	{r4, pc}
 80088fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008902:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008906:	e7f7      	b.n	80088f8 <memmove+0x24>

08008908 <_free_r>:
 8008908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	d044      	beq.n	8008998 <_free_r+0x90>
 800890e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008912:	9001      	str	r0, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f1a1 0404 	sub.w	r4, r1, #4
 800891a:	bfb8      	it	lt
 800891c:	18e4      	addlt	r4, r4, r3
 800891e:	f000 f913 	bl	8008b48 <__malloc_lock>
 8008922:	4a1e      	ldr	r2, [pc, #120]	; (800899c <_free_r+0x94>)
 8008924:	9801      	ldr	r0, [sp, #4]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	b933      	cbnz	r3, 8008938 <_free_r+0x30>
 800892a:	6063      	str	r3, [r4, #4]
 800892c:	6014      	str	r4, [r2, #0]
 800892e:	b003      	add	sp, #12
 8008930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008934:	f000 b90e 	b.w	8008b54 <__malloc_unlock>
 8008938:	42a3      	cmp	r3, r4
 800893a:	d908      	bls.n	800894e <_free_r+0x46>
 800893c:	6825      	ldr	r5, [r4, #0]
 800893e:	1961      	adds	r1, r4, r5
 8008940:	428b      	cmp	r3, r1
 8008942:	bf01      	itttt	eq
 8008944:	6819      	ldreq	r1, [r3, #0]
 8008946:	685b      	ldreq	r3, [r3, #4]
 8008948:	1949      	addeq	r1, r1, r5
 800894a:	6021      	streq	r1, [r4, #0]
 800894c:	e7ed      	b.n	800892a <_free_r+0x22>
 800894e:	461a      	mov	r2, r3
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	b10b      	cbz	r3, 8008958 <_free_r+0x50>
 8008954:	42a3      	cmp	r3, r4
 8008956:	d9fa      	bls.n	800894e <_free_r+0x46>
 8008958:	6811      	ldr	r1, [r2, #0]
 800895a:	1855      	adds	r5, r2, r1
 800895c:	42a5      	cmp	r5, r4
 800895e:	d10b      	bne.n	8008978 <_free_r+0x70>
 8008960:	6824      	ldr	r4, [r4, #0]
 8008962:	4421      	add	r1, r4
 8008964:	1854      	adds	r4, r2, r1
 8008966:	42a3      	cmp	r3, r4
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	d1e0      	bne.n	800892e <_free_r+0x26>
 800896c:	681c      	ldr	r4, [r3, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	6053      	str	r3, [r2, #4]
 8008972:	4421      	add	r1, r4
 8008974:	6011      	str	r1, [r2, #0]
 8008976:	e7da      	b.n	800892e <_free_r+0x26>
 8008978:	d902      	bls.n	8008980 <_free_r+0x78>
 800897a:	230c      	movs	r3, #12
 800897c:	6003      	str	r3, [r0, #0]
 800897e:	e7d6      	b.n	800892e <_free_r+0x26>
 8008980:	6825      	ldr	r5, [r4, #0]
 8008982:	1961      	adds	r1, r4, r5
 8008984:	428b      	cmp	r3, r1
 8008986:	bf04      	itt	eq
 8008988:	6819      	ldreq	r1, [r3, #0]
 800898a:	685b      	ldreq	r3, [r3, #4]
 800898c:	6063      	str	r3, [r4, #4]
 800898e:	bf04      	itt	eq
 8008990:	1949      	addeq	r1, r1, r5
 8008992:	6021      	streq	r1, [r4, #0]
 8008994:	6054      	str	r4, [r2, #4]
 8008996:	e7ca      	b.n	800892e <_free_r+0x26>
 8008998:	b003      	add	sp, #12
 800899a:	bd30      	pop	{r4, r5, pc}
 800899c:	20001e6c 	.word	0x20001e6c

080089a0 <sbrk_aligned>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	4e0e      	ldr	r6, [pc, #56]	; (80089dc <sbrk_aligned+0x3c>)
 80089a4:	460c      	mov	r4, r1
 80089a6:	6831      	ldr	r1, [r6, #0]
 80089a8:	4605      	mov	r5, r0
 80089aa:	b911      	cbnz	r1, 80089b2 <sbrk_aligned+0x12>
 80089ac:	f000 f8bc 	bl	8008b28 <_sbrk_r>
 80089b0:	6030      	str	r0, [r6, #0]
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f000 f8b7 	bl	8008b28 <_sbrk_r>
 80089ba:	1c43      	adds	r3, r0, #1
 80089bc:	d00a      	beq.n	80089d4 <sbrk_aligned+0x34>
 80089be:	1cc4      	adds	r4, r0, #3
 80089c0:	f024 0403 	bic.w	r4, r4, #3
 80089c4:	42a0      	cmp	r0, r4
 80089c6:	d007      	beq.n	80089d8 <sbrk_aligned+0x38>
 80089c8:	1a21      	subs	r1, r4, r0
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f8ac 	bl	8008b28 <_sbrk_r>
 80089d0:	3001      	adds	r0, #1
 80089d2:	d101      	bne.n	80089d8 <sbrk_aligned+0x38>
 80089d4:	f04f 34ff 	mov.w	r4, #4294967295
 80089d8:	4620      	mov	r0, r4
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	20001e70 	.word	0x20001e70

080089e0 <_malloc_r>:
 80089e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e4:	1ccd      	adds	r5, r1, #3
 80089e6:	f025 0503 	bic.w	r5, r5, #3
 80089ea:	3508      	adds	r5, #8
 80089ec:	2d0c      	cmp	r5, #12
 80089ee:	bf38      	it	cc
 80089f0:	250c      	movcc	r5, #12
 80089f2:	2d00      	cmp	r5, #0
 80089f4:	4607      	mov	r7, r0
 80089f6:	db01      	blt.n	80089fc <_malloc_r+0x1c>
 80089f8:	42a9      	cmp	r1, r5
 80089fa:	d905      	bls.n	8008a08 <_malloc_r+0x28>
 80089fc:	230c      	movs	r3, #12
 80089fe:	603b      	str	r3, [r7, #0]
 8008a00:	2600      	movs	r6, #0
 8008a02:	4630      	mov	r0, r6
 8008a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a08:	4e2e      	ldr	r6, [pc, #184]	; (8008ac4 <_malloc_r+0xe4>)
 8008a0a:	f000 f89d 	bl	8008b48 <__malloc_lock>
 8008a0e:	6833      	ldr	r3, [r6, #0]
 8008a10:	461c      	mov	r4, r3
 8008a12:	bb34      	cbnz	r4, 8008a62 <_malloc_r+0x82>
 8008a14:	4629      	mov	r1, r5
 8008a16:	4638      	mov	r0, r7
 8008a18:	f7ff ffc2 	bl	80089a0 <sbrk_aligned>
 8008a1c:	1c43      	adds	r3, r0, #1
 8008a1e:	4604      	mov	r4, r0
 8008a20:	d14d      	bne.n	8008abe <_malloc_r+0xde>
 8008a22:	6834      	ldr	r4, [r6, #0]
 8008a24:	4626      	mov	r6, r4
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d140      	bne.n	8008aac <_malloc_r+0xcc>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4638      	mov	r0, r7
 8008a30:	eb04 0803 	add.w	r8, r4, r3
 8008a34:	f000 f878 	bl	8008b28 <_sbrk_r>
 8008a38:	4580      	cmp	r8, r0
 8008a3a:	d13a      	bne.n	8008ab2 <_malloc_r+0xd2>
 8008a3c:	6821      	ldr	r1, [r4, #0]
 8008a3e:	3503      	adds	r5, #3
 8008a40:	1a6d      	subs	r5, r5, r1
 8008a42:	f025 0503 	bic.w	r5, r5, #3
 8008a46:	3508      	adds	r5, #8
 8008a48:	2d0c      	cmp	r5, #12
 8008a4a:	bf38      	it	cc
 8008a4c:	250c      	movcc	r5, #12
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff ffa5 	bl	80089a0 <sbrk_aligned>
 8008a56:	3001      	adds	r0, #1
 8008a58:	d02b      	beq.n	8008ab2 <_malloc_r+0xd2>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	442b      	add	r3, r5
 8008a5e:	6023      	str	r3, [r4, #0]
 8008a60:	e00e      	b.n	8008a80 <_malloc_r+0xa0>
 8008a62:	6822      	ldr	r2, [r4, #0]
 8008a64:	1b52      	subs	r2, r2, r5
 8008a66:	d41e      	bmi.n	8008aa6 <_malloc_r+0xc6>
 8008a68:	2a0b      	cmp	r2, #11
 8008a6a:	d916      	bls.n	8008a9a <_malloc_r+0xba>
 8008a6c:	1961      	adds	r1, r4, r5
 8008a6e:	42a3      	cmp	r3, r4
 8008a70:	6025      	str	r5, [r4, #0]
 8008a72:	bf18      	it	ne
 8008a74:	6059      	strne	r1, [r3, #4]
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	bf08      	it	eq
 8008a7a:	6031      	streq	r1, [r6, #0]
 8008a7c:	5162      	str	r2, [r4, r5]
 8008a7e:	604b      	str	r3, [r1, #4]
 8008a80:	4638      	mov	r0, r7
 8008a82:	f104 060b 	add.w	r6, r4, #11
 8008a86:	f000 f865 	bl	8008b54 <__malloc_unlock>
 8008a8a:	f026 0607 	bic.w	r6, r6, #7
 8008a8e:	1d23      	adds	r3, r4, #4
 8008a90:	1af2      	subs	r2, r6, r3
 8008a92:	d0b6      	beq.n	8008a02 <_malloc_r+0x22>
 8008a94:	1b9b      	subs	r3, r3, r6
 8008a96:	50a3      	str	r3, [r4, r2]
 8008a98:	e7b3      	b.n	8008a02 <_malloc_r+0x22>
 8008a9a:	6862      	ldr	r2, [r4, #4]
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	bf0c      	ite	eq
 8008aa0:	6032      	streq	r2, [r6, #0]
 8008aa2:	605a      	strne	r2, [r3, #4]
 8008aa4:	e7ec      	b.n	8008a80 <_malloc_r+0xa0>
 8008aa6:	4623      	mov	r3, r4
 8008aa8:	6864      	ldr	r4, [r4, #4]
 8008aaa:	e7b2      	b.n	8008a12 <_malloc_r+0x32>
 8008aac:	4634      	mov	r4, r6
 8008aae:	6876      	ldr	r6, [r6, #4]
 8008ab0:	e7b9      	b.n	8008a26 <_malloc_r+0x46>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	603b      	str	r3, [r7, #0]
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f000 f84c 	bl	8008b54 <__malloc_unlock>
 8008abc:	e7a1      	b.n	8008a02 <_malloc_r+0x22>
 8008abe:	6025      	str	r5, [r4, #0]
 8008ac0:	e7de      	b.n	8008a80 <_malloc_r+0xa0>
 8008ac2:	bf00      	nop
 8008ac4:	20001e6c 	.word	0x20001e6c

08008ac8 <_realloc_r>:
 8008ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008acc:	4680      	mov	r8, r0
 8008ace:	4614      	mov	r4, r2
 8008ad0:	460e      	mov	r6, r1
 8008ad2:	b921      	cbnz	r1, 8008ade <_realloc_r+0x16>
 8008ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad8:	4611      	mov	r1, r2
 8008ada:	f7ff bf81 	b.w	80089e0 <_malloc_r>
 8008ade:	b92a      	cbnz	r2, 8008aec <_realloc_r+0x24>
 8008ae0:	f7ff ff12 	bl	8008908 <_free_r>
 8008ae4:	4625      	mov	r5, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aec:	f000 f838 	bl	8008b60 <_malloc_usable_size_r>
 8008af0:	4284      	cmp	r4, r0
 8008af2:	4607      	mov	r7, r0
 8008af4:	d802      	bhi.n	8008afc <_realloc_r+0x34>
 8008af6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008afa:	d812      	bhi.n	8008b22 <_realloc_r+0x5a>
 8008afc:	4621      	mov	r1, r4
 8008afe:	4640      	mov	r0, r8
 8008b00:	f7ff ff6e 	bl	80089e0 <_malloc_r>
 8008b04:	4605      	mov	r5, r0
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d0ed      	beq.n	8008ae6 <_realloc_r+0x1e>
 8008b0a:	42bc      	cmp	r4, r7
 8008b0c:	4622      	mov	r2, r4
 8008b0e:	4631      	mov	r1, r6
 8008b10:	bf28      	it	cs
 8008b12:	463a      	movcs	r2, r7
 8008b14:	f7ff fed0 	bl	80088b8 <memcpy>
 8008b18:	4631      	mov	r1, r6
 8008b1a:	4640      	mov	r0, r8
 8008b1c:	f7ff fef4 	bl	8008908 <_free_r>
 8008b20:	e7e1      	b.n	8008ae6 <_realloc_r+0x1e>
 8008b22:	4635      	mov	r5, r6
 8008b24:	e7df      	b.n	8008ae6 <_realloc_r+0x1e>
	...

08008b28 <_sbrk_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_sbrk_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f8 f96c 	bl	8000e10 <_sbrk>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_sbrk_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_sbrk_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	20001e74 	.word	0x20001e74

08008b48 <__malloc_lock>:
 8008b48:	4801      	ldr	r0, [pc, #4]	; (8008b50 <__malloc_lock+0x8>)
 8008b4a:	f000 b811 	b.w	8008b70 <__retarget_lock_acquire_recursive>
 8008b4e:	bf00      	nop
 8008b50:	20001e78 	.word	0x20001e78

08008b54 <__malloc_unlock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	; (8008b5c <__malloc_unlock+0x8>)
 8008b56:	f000 b80c 	b.w	8008b72 <__retarget_lock_release_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	20001e78 	.word	0x20001e78

08008b60 <_malloc_usable_size_r>:
 8008b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b64:	1f18      	subs	r0, r3, #4
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	bfbc      	itt	lt
 8008b6a:	580b      	ldrlt	r3, [r1, r0]
 8008b6c:	18c0      	addlt	r0, r0, r3
 8008b6e:	4770      	bx	lr

08008b70 <__retarget_lock_acquire_recursive>:
 8008b70:	4770      	bx	lr

08008b72 <__retarget_lock_release_recursive>:
 8008b72:	4770      	bx	lr

08008b74 <_init>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr

08008b80 <_fini>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr
